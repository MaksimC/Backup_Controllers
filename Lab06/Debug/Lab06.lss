
Lab06.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000166  00800200  000037c2  00003856  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000037c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000299  00800366  00800366  000039bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000039bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000448  00000000  00000000  00003a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006391  00000000  00000000  00003ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002156  00000000  00000000  0000a231  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002e9e  00000000  00000000  0000c387  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001030  00000000  00000000  0000f228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019bd  00000000  00000000  00010258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a3b  00000000  00000000  00011c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a8  00000000  00000000  00016650  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	21 c4       	rjmp	.+2114   	; 0x844 <__ctors_end>
       2:	00 00       	nop
       4:	40 c4       	rjmp	.+2176   	; 0x886 <__bad_interrupt>
       6:	00 00       	nop
       8:	3e c4       	rjmp	.+2172   	; 0x886 <__bad_interrupt>
       a:	00 00       	nop
       c:	3c c4       	rjmp	.+2168   	; 0x886 <__bad_interrupt>
       e:	00 00       	nop
      10:	3a c4       	rjmp	.+2164   	; 0x886 <__bad_interrupt>
      12:	00 00       	nop
      14:	38 c4       	rjmp	.+2160   	; 0x886 <__bad_interrupt>
      16:	00 00       	nop
      18:	36 c4       	rjmp	.+2156   	; 0x886 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	34 c4       	rjmp	.+2152   	; 0x886 <__bad_interrupt>
      1e:	00 00       	nop
      20:	32 c4       	rjmp	.+2148   	; 0x886 <__bad_interrupt>
      22:	00 00       	nop
      24:	30 c4       	rjmp	.+2144   	; 0x886 <__bad_interrupt>
      26:	00 00       	nop
      28:	2e c4       	rjmp	.+2140   	; 0x886 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2c c4       	rjmp	.+2136   	; 0x886 <__bad_interrupt>
      2e:	00 00       	nop
      30:	2a c4       	rjmp	.+2132   	; 0x886 <__bad_interrupt>
      32:	00 00       	nop
      34:	28 c4       	rjmp	.+2128   	; 0x886 <__bad_interrupt>
      36:	00 00       	nop
      38:	26 c4       	rjmp	.+2124   	; 0x886 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	24 c4       	rjmp	.+2120   	; 0x886 <__bad_interrupt>
      3e:	00 00       	nop
      40:	22 c4       	rjmp	.+2116   	; 0x886 <__bad_interrupt>
      42:	00 00       	nop
      44:	20 c4       	rjmp	.+2112   	; 0x886 <__bad_interrupt>
      46:	00 00       	nop
      48:	1e c4       	rjmp	.+2108   	; 0x886 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1c c4       	rjmp	.+2104   	; 0x886 <__bad_interrupt>
      4e:	00 00       	nop
      50:	1a c4       	rjmp	.+2100   	; 0x886 <__bad_interrupt>
      52:	00 00       	nop
      54:	18 c4       	rjmp	.+2096   	; 0x886 <__bad_interrupt>
      56:	00 00       	nop
      58:	16 c4       	rjmp	.+2092   	; 0x886 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	14 c4       	rjmp	.+2088   	; 0x886 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__vector_24>
      64:	11 c4       	rjmp	.+2082   	; 0x888 <__vector_25>
      66:	00 00       	nop
      68:	48 c4       	rjmp	.+2192   	; 0x8fa <__vector_26>
      6a:	00 00       	nop
      6c:	0c c4       	rjmp	.+2072   	; 0x886 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0a c4       	rjmp	.+2068   	; 0x886 <__bad_interrupt>
      72:	00 00       	nop
      74:	08 c4       	rjmp	.+2064   	; 0x886 <__bad_interrupt>
      76:	00 00       	nop
      78:	06 c4       	rjmp	.+2060   	; 0x886 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	04 c4       	rjmp	.+2056   	; 0x886 <__bad_interrupt>
      7e:	00 00       	nop
      80:	02 c4       	rjmp	.+2052   	; 0x886 <__bad_interrupt>
      82:	00 00       	nop
      84:	00 c4       	rjmp	.+2048   	; 0x886 <__bad_interrupt>
      86:	00 00       	nop
      88:	fe c3       	rjmp	.+2044   	; 0x886 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fc c3       	rjmp	.+2040   	; 0x886 <__bad_interrupt>
      8e:	00 00       	nop
      90:	fa c3       	rjmp	.+2036   	; 0x886 <__bad_interrupt>
      92:	00 00       	nop
      94:	f8 c3       	rjmp	.+2032   	; 0x886 <__bad_interrupt>
      96:	00 00       	nop
      98:	f6 c3       	rjmp	.+2028   	; 0x886 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f4 c3       	rjmp	.+2024   	; 0x886 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f2 c3       	rjmp	.+2020   	; 0x886 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f0 c3       	rjmp	.+2016   	; 0x886 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ee c3       	rjmp	.+2012   	; 0x886 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ec c3       	rjmp	.+2008   	; 0x886 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ea c3       	rjmp	.+2004   	; 0x886 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e8 c3       	rjmp	.+2000   	; 0x886 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e6 c3       	rjmp	.+1996   	; 0x886 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__vector_47>
      c0:	e2 c3       	rjmp	.+1988   	; 0x886 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e0 c3       	rjmp	.+1984   	; 0x886 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	de c3       	rjmp	.+1980   	; 0x886 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	dc c3       	rjmp	.+1976   	; 0x886 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	da c3       	rjmp	.+1972   	; 0x886 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d8 c3       	rjmp	.+1968   	; 0x886 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a9 c4       	rjmp	.+2386   	; 0xa2c <__vector_54>
      da:	00 00       	nop
      dc:	e0 c4       	rjmp	.+2496   	; 0xa9e <__vector_55>
      de:	00 00       	nop
      e0:	d2 c3       	rjmp	.+1956   	; 0x886 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	51 0a       	sbc	r5, r17
      e6:	72 0a       	sbc	r7, r18
      e8:	92 0a       	sbc	r9, r18
      ea:	92 0a       	sbc	r9, r18
      ec:	38 0a       	sbc	r3, r24
      ee:	59 0a       	sbc	r5, r25
      f0:	92 0a       	sbc	r9, r18
      f2:	87 0a       	sbc	r8, r23
      f4:	92 0a       	sbc	r9, r18
      f6:	e8 0a       	sbc	r14, r24
      f8:	24 0a       	sbc	r2, r20
      fa:	92 0a       	sbc	r9, r18
      fc:	10 0a       	sbc	r1, r16
      fe:	e8 0a       	sbc	r14, r24
     100:	92 0a       	sbc	r9, r18
     102:	e8 0a       	sbc	r14, r24
     104:	92 0a       	sbc	r9, r18
     106:	92 0a       	sbc	r9, r18
     108:	92 0a       	sbc	r9, r18
     10a:	92 0a       	sbc	r9, r18
     10c:	07 0a       	sbc	r0, r23
     10e:	92 0a       	sbc	r9, r18
     110:	92 0a       	sbc	r9, r18
     112:	92 0a       	sbc	r9, r18
     114:	92 0a       	sbc	r9, r18
     116:	92 0a       	sbc	r9, r18
     118:	e8 0a       	sbc	r14, r24
     11a:	92 0a       	sbc	r9, r18
     11c:	92 0a       	sbc	r9, r18
     11e:	92 0a       	sbc	r9, r18
     120:	92 0a       	sbc	r9, r18
     122:	92 0a       	sbc	r9, r18
     124:	92 0a       	sbc	r9, r18
     126:	92 0a       	sbc	r9, r18
     128:	92 0a       	sbc	r9, r18
     12a:	92 0a       	sbc	r9, r18
     12c:	92 0a       	sbc	r9, r18
     12e:	92 0a       	sbc	r9, r18
     130:	92 0a       	sbc	r9, r18
     132:	92 0a       	sbc	r9, r18
     134:	92 0a       	sbc	r9, r18
     136:	92 0a       	sbc	r9, r18
     138:	92 0a       	sbc	r9, r18
     13a:	92 0a       	sbc	r9, r18
     13c:	92 0a       	sbc	r9, r18
     13e:	92 0a       	sbc	r9, r18
     140:	92 0a       	sbc	r9, r18
     142:	92 0a       	sbc	r9, r18
     144:	92 0a       	sbc	r9, r18
     146:	92 0a       	sbc	r9, r18
     148:	92 0a       	sbc	r9, r18
     14a:	92 0a       	sbc	r9, r18
     14c:	92 0a       	sbc	r9, r18
     14e:	92 0a       	sbc	r9, r18
     150:	92 0a       	sbc	r9, r18
     152:	92 0a       	sbc	r9, r18
     154:	92 0a       	sbc	r9, r18
     156:	92 0a       	sbc	r9, r18
     158:	92 0a       	sbc	r9, r18
     15a:	92 0a       	sbc	r9, r18
     15c:	92 0a       	sbc	r9, r18
     15e:	92 0a       	sbc	r9, r18
     160:	92 0a       	sbc	r9, r18
     162:	92 0a       	sbc	r9, r18
     164:	92 0a       	sbc	r9, r18
     166:	92 0a       	sbc	r9, r18
     168:	92 0a       	sbc	r9, r18
     16a:	92 0a       	sbc	r9, r18
     16c:	92 0a       	sbc	r9, r18
     16e:	92 0a       	sbc	r9, r18
     170:	92 0a       	sbc	r9, r18
     172:	92 0a       	sbc	r9, r18
     174:	92 0a       	sbc	r9, r18
     176:	92 0a       	sbc	r9, r18
     178:	92 0a       	sbc	r9, r18
     17a:	92 0a       	sbc	r9, r18
     17c:	92 0a       	sbc	r9, r18
     17e:	92 0a       	sbc	r9, r18
     180:	92 0a       	sbc	r9, r18
     182:	92 0a       	sbc	r9, r18
     184:	92 0a       	sbc	r9, r18
     186:	92 0a       	sbc	r9, r18
     188:	92 0a       	sbc	r9, r18
     18a:	92 0a       	sbc	r9, r18
     18c:	92 0a       	sbc	r9, r18
     18e:	92 0a       	sbc	r9, r18
     190:	92 0a       	sbc	r9, r18
     192:	92 0a       	sbc	r9, r18
     194:	92 0a       	sbc	r9, r18
     196:	92 0a       	sbc	r9, r18
     198:	92 0a       	sbc	r9, r18
     19a:	92 0a       	sbc	r9, r18
     19c:	92 0a       	sbc	r9, r18
     19e:	92 0a       	sbc	r9, r18
     1a0:	92 0a       	sbc	r9, r18
     1a2:	92 0a       	sbc	r9, r18
     1a4:	92 0a       	sbc	r9, r18
     1a6:	92 0a       	sbc	r9, r18
     1a8:	92 0a       	sbc	r9, r18
     1aa:	92 0a       	sbc	r9, r18
     1ac:	92 0a       	sbc	r9, r18
     1ae:	92 0a       	sbc	r9, r18
     1b0:	92 0a       	sbc	r9, r18
     1b2:	92 0a       	sbc	r9, r18
     1b4:	92 0a       	sbc	r9, r18
     1b6:	92 0a       	sbc	r9, r18
     1b8:	92 0a       	sbc	r9, r18
     1ba:	92 0a       	sbc	r9, r18
     1bc:	92 0a       	sbc	r9, r18
     1be:	92 0a       	sbc	r9, r18
     1c0:	92 0a       	sbc	r9, r18
     1c2:	92 0a       	sbc	r9, r18
     1c4:	92 0a       	sbc	r9, r18
     1c6:	92 0a       	sbc	r9, r18
     1c8:	92 0a       	sbc	r9, r18
     1ca:	92 0a       	sbc	r9, r18
     1cc:	92 0a       	sbc	r9, r18
     1ce:	92 0a       	sbc	r9, r18
     1d0:	92 0a       	sbc	r9, r18
     1d2:	92 0a       	sbc	r9, r18
     1d4:	92 0a       	sbc	r9, r18
     1d6:	92 0a       	sbc	r9, r18
     1d8:	92 0a       	sbc	r9, r18
     1da:	92 0a       	sbc	r9, r18
     1dc:	92 0a       	sbc	r9, r18
     1de:	92 0a       	sbc	r9, r18
     1e0:	87 0a       	sbc	r8, r23

000001e2 <__trampolines_end>:
     1e2:	4c 61       	ori	r20, 0x1C	; 28
     1e4:	72 67       	ori	r23, 0x72	; 114
     1e6:	65 73       	andi	r22, 0x35	; 53
     1e8:	74 20       	and	r7, r4
     1ea:	61 6c       	ori	r22, 0xC1	; 193
     1ec:	6c 6f       	ori	r22, 0xFC	; 252
     1ee:	63 61       	ori	r22, 0x13	; 19
     1f0:	62 6c       	ori	r22, 0xC2	; 194
     1f2:	65 20       	and	r6, r5
     1f4:	62 6c       	ori	r22, 0xC2	; 194
     1f6:	6f 63       	ori	r22, 0x3F	; 63
     1f8:	6b 3a       	cpi	r22, 0xAB	; 171
     1fa:	20 20       	and	r2, r0
     1fc:	20 25       	eor	r18, r0
     1fe:	64 0a       	sbc	r6, r20
	...

00000201 <__c.2691>:
     201:	4c 61 72 67 65 73 74 20 66 72 65 65 6c 69 73 74     Largest freelist
     211:	20 62 6c 6f 63 6b 3a 20 20 20 20 25 64 0a 00         block:    %d..

00000220 <__c.2689>:
     220:	4c 61 72 67 65 73 74 20 62 6c 6f 63 6b 20 69 6e     Largest block in
     230:	20 66 72 65 65 6c 69 73 74 3a 20 25 64 0a 00         freelist: %d..

0000023f <__c.2687>:
     23f:	42 6c 6f 63 6b 73 20 69 6e 20 66 72 65 65 6c 69     Blocks in freeli
     24f:	73 74 3a 20 20 20 20 20 20 20 20 25 64 0a 00        st:        %d..

0000025e <__c.2685>:
     25e:	46 72 65 65 6c 69 73 74 20 73 69 7a 65 3a 20 25     Freelist size: %
     26e:	64 0a 00                                            d..

00000271 <__c.2683>:
     271:	0a 46 72 65 65 6c 69 73 74 0a 00                    .Freelist..

0000027c <__c.2681>:
     27c:	43 68 61 6e 67 65 20 20 20 25 64 0a 00              Change   %d..

00000289 <__c.2679>:
     289:	50 72 65 76 69 6f 75 73 20 25 64 0a 00              Previous %d..

00000296 <__c.2677>:
     296:	43 75 72 72 65 6e 74 20 20 25 64 0a 00              Current  %d..

000002a3 <__c.2675>:
     2a3:	0a 53 70 61 63 65 20 62 65 74 77 65 65 6e 20 73     .Space between s
     2b3:	74 61 63 6b 20 61 6e 64 20 68 65 61 70 3a 0a 00     tack and heap:..

000002c3 <__c.2673>:
     2c3:	46 72 65 65 3a 20 25 64 0a 00                       Free: %d..

000002cd <__c.2671>:
     2cd:	55 73 65 64 3a 20 25 64 0a 00                       Used: %d..

000002d7 <__c.2669>:
     2d7:	0a 48 65 61 70 20 73 74 61 74 69 73 74 69 63 73     .Heap statistics
     2e7:	0a 00                                               ..

000002e9 <__c.2653>:
     2e9:	0a 55 6e 61 62 6c 65 20 74 6f 20 73 65 6c 65 63     .Unable to selec
     2f9:	74 20 63 61 72 64 2e 0a 00                          t card...

00000302 <__c.2645>:
     302:	0a 55 6e 61 62 6c 65 20 74 6f 20 73 65 6c 65 63     .Unable to selec
     312:	74 20 63 61 72 64 2e 0a 00                          t card...

0000031b <__c.2643>:
     31b:	0a 00                                               ..

0000031d <__c.2637>:
     31d:	43 61 72 64 20 55 49 44 3a 20 00                    Card UID: .

00000328 <__c.2635>:
     328:	55 49 44 20 73 61 6b 3a 20 30 78 25 30 32 58 0a     UID sak: 0x%02X.
	...

00000339 <__c.2633>:
     339:	0a 55 49 44 20 73 69 7a 65 3a 20 30 78 25 30 32     .UID size: 0x%02
     349:	58 0a 00                                            X..

0000034c <__c.2626>:
     34c:	54 6f 20 66 65 77 20 6f 72 20 74 6f 20 6d 61 6e     To few or to man
     35c:	79 20 61 72 67 75 6d 65 6e 74 73 20 66 6f 72 20     y arguments for 
     36c:	74 68 69 73 20 63 6f 6d 6d 61 6e 64 0a 55 73 65     this command.Use
     37c:	20 3c 68 65 6c 70 3e 0a 00                           <help>..

00000385 <__c.2624>:
     385:	0a 00                                               ..

00000387 <__c.2619>:
     387:	43 6f 6d 6d 61 6e 64 20 6e 6f 74 20 69 6d 70 6c     Command not impl
     397:	65 6d 65 6e 74 65 64 2e 0a 55 73 65 20 3c 68 65     emented..Use <he
     3a7:	6c 70 3e 20 74 6f 20 67 65 74 20 68 65 6c 70 2e     lp> to get help.
     3b7:	0a 00                                               ..

000003b9 <__c.2617>:
     3b9:	0a 00                                               ..

000003bb <__c.2603>:
     3bb:	25 53 0a 00                                         %S..

000003bf <__c.2586>:
     3bf:	0a 00                                               ..

000003c1 <__c.2579>:
     3c1:	61 76 72 2d 6c 69 62 63 20 76 65 72 73 69 6f 6e     avr-libc version
     3d1:	3a 20 25 53 20 61 76 72 2d 67 63 63 20 76 65 72     : %S avr-gcc ver
     3e1:	73 69 6f 6e 3a 20 34 2e 39 2e 32 0a 00              sion: 4.9.2..

000003ee <__c.2581>:
     3ee:	32 2e 30 2e 30 00                                   2.0.0.

000003f4 <__c.2571>:
     3f4:	56 65 72 73 69 6f 6e 3a 20 25 53 20 62 75 69 6c     Version: %S buil
     404:	74 20 6f 6e 3a 20 25 53 20 25 53 0a 00              t on: %S %S..

00000411 <__c.2573>:
     411:	47 49 54 20 56 45 52 53 49 4f 4e 21 20 52 65 70     GIT VERSION! Rep
     421:	6c 61 63 65 21 00                                   lace!.

00000427 <__c.2575>:
     427:	4a 61 6e 20 31 33 20 32 30 31 37 00                 Jan 13 2017.

00000433 <__c.2577>:
     433:	31 38 3a 31 36 3a 31 36 00                          18:16:16.

0000043c <__c.2563>:
     43c:	0a 00                                               ..

0000043e <__c.2561>:
     43e:	20 3a 20 00                                          : .

00000442 <__c.2558>:
     442:	49 6d 70 6c 65 6d 65 6e 74 65 64 20 63 6f 6d 6d     Implemented comm
     452:	61 6e 64 73 3a 0a 00                                ands:..

00000459 <__c.2556>:
     459:	0a 00                                               ..

0000045b <mem_help>:
     45b:	50 72 69 6e 74 20 6d 65 6d 6f 72 79 20 75 73 61     Print memory usa
     46b:	67 65 20 61 6e 64 20 63 68 61 6e 67 65 20 63 6f     ge and change co
     47b:	6d 70 61 72 65 64 20 74 6f 20 70 72 65 76 69 6f     mpared to previo
     48b:	75 73 20 63 61 6c 6c 00                             us call.

00000493 <mem_cmd>:
     493:	6d 65 6d 00                                         mem.

00000497 <access_denied_msg>:
     497:	41 63 63 65 73 73 20 64 65 6e 69 65 64 21 00        Access denied!.

000004a6 <print_help>:
     4a6:	50 72 69 6e 74 20 73 74 6f 72 65 64 20 61 63 63     Print stored acc
     4b6:	65 73 73 20 63 61 72 64 20 6c 69 73 74 00           ess card list.

000004c4 <print_cmd>:
     4c4:	70 72 69 6e 74 00                                   print.

000004ca <remove_help>:
     4ca:	52 65 6d 6f 76 65 20 4d 69 66 61 72 65 20 63 61     Remove Mifare ca
     4da:	72 64 20 66 72 6f 6d 20 6c 69 73 74 20 55 73 61     rd from list Usa
     4ea:	67 65 3a 20 72 65 6d 6f 76 65 20 3c 63 61 72 64     ge: remove <card
     4fa:	20 75 69 64 3e 00                                    uid>.

00000500 <remove_cmd>:
     500:	72 65 6d 6f 76 65 00                                remove.

00000507 <add_help>:
     507:	41 64 64 20 4d 69 63 61 72 65 20 63 61 72 64 20     Add Micare card 
     517:	74 6f 20 6c 69 73 74 2e 20 55 73 61 67 65 3a 20     to list. Usage: 
     527:	61 64 64 20 3c 63 61 72 64 20 68 6f 6c 64 65 72     add <card holder
     537:	20 6e 61 6d 65 3e 00                                 name>.

0000053e <add_cmd>:
     53e:	61 64 64 00                                         add.

00000542 <read_help>:
     542:	52 65 61 64 20 4d 69 66 61 72 65 20 63 61 72 64     Read Mifare card
     552:	20 61 6e 64 20 70 72 69 6e 74 20 43 61 72 64 20      and print Card 
     562:	49 44 00                                            ID.

00000565 <read_cmd>:
     565:	72 65 61 64 00                                      read.

0000056a <month_help>:
     56a:	46 69 6e 64 20 6d 61 74 63 68 69 6e 67 20 6d 6f     Find matching mo
     57a:	6e 74 68 20 66 72 6f 6d 20 6c 6f 6f 6b 75 70 20     nth from lookup 
     58a:	6c 69 73 74 2e 20 55 73 61 67 65 3a 20 6d 6f 6e     list. Usage: mon
     59a:	74 68 20 3c 73 74 72 69 6e 67 3e 00                 th <string>.

000005a6 <month_cmd>:
     5a6:	6d 6f 6e 74 68 00                                   month.

000005ac <ascii_help>:
     5ac:	70 72 69 6e 74 20 41 53 43 49 49 20 74 61 62 6c     print ASCII tabl
     5bc:	65 73 00                                            es.

000005bf <ascii_cmd>:
     5bf:	61 73 63 69 69 00                                   ascii.

000005c5 <ver_help>:
     5c5:	50 72 69 6e 74 20 46 57 20 76 65 72 73 69 6f 6e     Print FW version
	...

000005d6 <ver_cmd>:
     5d6:	76 65 72 73 69 6f 6e 00                             version.

000005de <help_help>:
     5de:	47 65 74 20 68 65 6c 70 00                          Get help.

000005e7 <help_cmd>:
     5e7:	68 65 6c 70 00                                      help.

000005ec <months>:
     5ec:	16 06 0d 06 07 06 01 06 fd 05 f8 05                 ............

000005f8 <string_6>:
     5f8:	4a 75 6e 65 00                                      June.

000005fd <string_5>:
     5fd:	4d 61 79 00                                         May.

00000601 <string_4>:
     601:	41 70 72 69 6c 00                                   April.

00000607 <string_3>:
     607:	4d 61 72 63 68 00                                   March.

0000060d <string_2>:
     60d:	46 65 62 72 75 61 72 79 00                          February.

00000616 <string_1>:
     616:	4a 61 6e 75 61 72 79 00                             January.

0000061e <__c.2464>:
     61e:	55 70 74 69 6d 65 3a 20 25 6c 75 20 73 0a 00        Uptime: %lu s..

0000062d <__c.2448>:
     62d:	4d 61 6b 73 69 6d 20 54 3f 65 6c 6a 61 62 6f 76     Maksim T?eljabov
	...

0000063e <__c.2446>:
     63e:	55 73 65 20 62 61 63 6b 73 70 61 63 65 20 74 6f     Use backspace to
     64e:	20 64 65 6c 65 74 65 20 65 6e 74 72 79 20 61 6e      delete entry an
     65e:	64 20 65 6e 74 65 72 20 74 6f 20 63 6f 6e 66 69     d enter to confi
     66e:	72 6d 2e 0a 41 72 72 6f 77 20 6b 65 79 73 20 61     rm..Arrow keys a
     67e:	6e 64 20 64 65 6c 20 64 6f 20 6e 6f 74 20 77 6f     nd del do not wo
     68e:	72 6b 20 63 75 72 72 65 6e 74 6c 79 2e 0a 55 73     rk currently..Us
     69e:	65 20 48 65 6c 70 20 63 6f 6d 6d 61 6e 64 20 74     e Help command t
     6ae:	6f 20 6c 65 61 72 6e 20 61 62 6f 75 74 20 63 6f     o learn about co
     6be:	6d 6d 61 6e 64 73 00                                mmands.

000006c5 <__c.2444>:
     6c5:	4d 61 6b 73 69 6d 20 54 3f 65 6c 6a 61 62 6f 76     Maksim T?eljabov
	...

000006d6 <__c.2250>:
     6d6:	0a 43 61 72 64 20 6e 6f 74 20 66 6f 75 6e 64 20     .Card not found 
     6e6:	69 6e 20 74 68 65 20 6c 69 73 74 2e 20 50 6c 65     in the list. Ple
     6f6:	61 73 65 20 74 72 79 20 61 67 61 69 6e 2e 0a 00     ase try again...

00000706 <__c.2245>:
     706:	0a 00                                               ..

00000708 <__c.2243>:
     708:	20 68 6f 6c 64 65 72 20 00                           holder .

00000711 <__c.2241>:
     711:	0a 52 65 6d 6f 76 69 6e 67 20 63 61 72 64 20 55     .Removing card U
     721:	49 44 3a 20 00                                      ID: .

00000726 <__c.2239>:
     726:	0a 00                                               ..

00000728 <__c.2237>:
     728:	20 68 6f 6c 64 65 72 20 00                           holder .

00000731 <__c.2235>:
     731:	0a 52 65 6d 6f 76 69 6e 67 20 63 61 72 64 20 55     .Removing card U
     741:	49 44 3a 20 00                                      ID: .

00000746 <__c.2229>:
     746:	0a 43 61 72 64 20 6c 69 73 74 20 69 73 20 65 6d     .Card list is em
     756:	70 74 79 2e 0a 00                                   pty...

0000075c <__c.2212>:
     75c:	0a 41 64 64 65 64 20 63 61 72 64 00                 .Added card.

00000768 <__c.2206>:
     768:	0a 43 61 72 64 73 20 6c 69 73 74 20 69 73 20 66     .Cards list is f
     778:	75 6c 6c 2e 20 59 6f 75 20 68 61 76 65 20 74 6f     ull. You have to
     788:	20 72 65 6d 6f 76 65 20 73 6f 6d 65 20 63 61 72      remove some car
     798:	64 73 2c 20 62 65 66 6f 72 65 20 79 6f 75 20 63     ds, before you c
     7a8:	61 6e 20 61 64 64 20 6e 65 77 20 6f 6e 65 73 2e     an add new ones.
     7b8:	0a 00                                               ..

000007ba <__c.2202>:
     7ba:	0a 53 63 61 6e 6e 65 64 20 63 61 72 64 20 61 6c     .Scanned card al
     7ca:	72 61 64 79 20 65 78 69 73 74 73 20 69 6e 20 74     rady exists in t
     7da:	68 65 20 6c 69 73 74 2e 20 50 6c 65 61 73 65 20     he list. Please 
     7ea:	73 63 61 6e 20 61 6e 6f 74 68 65 72 20 63 61 72     scan another car
     7fa:	64 21 0a 31 00                                      d!.1.

000007ff <__c.2193>:
     7ff:	0a 41 63 63 65 73 73 20 63 61 72 64 73 20 69 6e     .Access cards in
     80f:	20 6c 69 73 74 3a 0a 00                              list:..

00000817 <__c.2189>:
     817:	0a 43 61 72 64 20 6c 69 73 74 20 69 73 20 65 6d     .Card list is em
     827:	70 74 79 2e 0a 00                                   pty...

0000082d <__c.2184>:
     82d:	0a 00                                               ..

0000082f <__c.2182>:
     82f:	20 68 6f 6c 64 65 72 20 00                           holder .

00000838 <__c.2176>:
     838:	5d 3a 20 00                                         ]: .

0000083c <__c.2174>:
     83c:	2e 20 55 49 44 5b 00 00                             . UID[..

00000844 <__ctors_end>:
     844:	11 24       	eor	r1, r1
     846:	1f be       	out	0x3f, r1	; 63
     848:	cf ef       	ldi	r28, 0xFF	; 255
     84a:	d1 e2       	ldi	r29, 0x21	; 33
     84c:	de bf       	out	0x3e, r29	; 62
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	00 e0       	ldi	r16, 0x00	; 0
     852:	0c bf       	out	0x3c, r16	; 60

00000854 <__do_copy_data>:
     854:	13 e0       	ldi	r17, 0x03	; 3
     856:	a0 e0       	ldi	r26, 0x00	; 0
     858:	b2 e0       	ldi	r27, 0x02	; 2
     85a:	e2 ec       	ldi	r30, 0xC2	; 194
     85c:	f7 e3       	ldi	r31, 0x37	; 55
     85e:	00 e0       	ldi	r16, 0x00	; 0
     860:	0b bf       	out	0x3b, r16	; 59
     862:	02 c0       	rjmp	.+4      	; 0x868 <__do_copy_data+0x14>
     864:	07 90       	elpm	r0, Z+
     866:	0d 92       	st	X+, r0
     868:	a6 36       	cpi	r26, 0x66	; 102
     86a:	b1 07       	cpc	r27, r17
     86c:	d9 f7       	brne	.-10     	; 0x864 <__do_copy_data+0x10>

0000086e <__do_clear_bss>:
     86e:	25 e0       	ldi	r18, 0x05	; 5
     870:	a6 e6       	ldi	r26, 0x66	; 102
     872:	b3 e0       	ldi	r27, 0x03	; 3
     874:	01 c0       	rjmp	.+2      	; 0x878 <.do_clear_bss_start>

00000876 <.do_clear_bss_loop>:
     876:	1d 92       	st	X+, r1

00000878 <.do_clear_bss_start>:
     878:	af 3f       	cpi	r26, 0xFF	; 255
     87a:	b2 07       	cpc	r27, r18
     87c:	e1 f7       	brne	.-8      	; 0x876 <.do_clear_bss_loop>
     87e:	0e 94 93 12 	call	0x2526	; 0x2526 <main>
     882:	0c 94 df 1b 	jmp	0x37be	; 0x37be <_exit>

00000886 <__bad_interrupt>:
     886:	bc cb       	rjmp	.-2184   	; 0x0 <__vectors>

00000888 <__vector_25>:
	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];

	return (UART3_LastRxError << 8) + data;

} /* uart3_peek */
     888:	1f 92       	push	r1
     88a:	0f 92       	push	r0
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	0f 92       	push	r0
     890:	11 24       	eor	r1, r1
     892:	0b b6       	in	r0, 0x3b	; 59
     894:	0f 92       	push	r0
     896:	2f 93       	push	r18
     898:	3f 93       	push	r19
     89a:	4f 93       	push	r20
     89c:	5f 93       	push	r21
     89e:	8f 93       	push	r24
     8a0:	9f 93       	push	r25
     8a2:	ef 93       	push	r30
     8a4:	ff 93       	push	r31
     8a6:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     8aa:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     8ae:	28 71       	andi	r18, 0x18	; 24
     8b0:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <UART_RxHead>
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	99 27       	eor	r25, r25
     8bc:	40 91 6c 04 	lds	r20, 0x046C	; 0x80046c <UART_RxTail>
     8c0:	50 e0       	ldi	r21, 0x00	; 0
     8c2:	48 17       	cp	r20, r24
     8c4:	59 07       	cpc	r21, r25
     8c6:	39 f0       	breq	.+14     	; 0x8d6 <__vector_25+0x4e>
     8c8:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <UART_RxHead>
     8cc:	fc 01       	movw	r30, r24
     8ce:	e0 59       	subi	r30, 0x90	; 144
     8d0:	fb 4f       	sbci	r31, 0xFB	; 251
     8d2:	30 83       	st	Z, r19
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <__vector_25+0x50>
     8d6:	22 e0       	ldi	r18, 0x02	; 2
     8d8:	20 93 6b 04 	sts	0x046B, r18	; 0x80046b <UART_LastRxError>
     8dc:	ff 91       	pop	r31
     8de:	ef 91       	pop	r30
     8e0:	9f 91       	pop	r25
     8e2:	8f 91       	pop	r24
     8e4:	5f 91       	pop	r21
     8e6:	4f 91       	pop	r20
     8e8:	3f 91       	pop	r19
     8ea:	2f 91       	pop	r18
     8ec:	0f 90       	pop	r0
     8ee:	0b be       	out	0x3b, r0	; 59
     8f0:	0f 90       	pop	r0
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	0f 90       	pop	r0
     8f6:	1f 90       	pop	r1
     8f8:	18 95       	reti

000008fa <__vector_26>:
     8fa:	1f 92       	push	r1
     8fc:	0f 92       	push	r0
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	0f 92       	push	r0
     902:	11 24       	eor	r1, r1
     904:	0b b6       	in	r0, 0x3b	; 59
     906:	0f 92       	push	r0
     908:	8f 93       	push	r24
     90a:	9f 93       	push	r25
     90c:	ef 93       	push	r30
     90e:	ff 93       	push	r31
     910:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <UART_TxHead>
     914:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <UART_TxTail>
     918:	98 17       	cp	r25, r24
     91a:	79 f0       	breq	.+30     	; 0x93a <__vector_26+0x40>
     91c:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <UART_TxTail>
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	8f 77       	andi	r24, 0x7F	; 127
     926:	99 27       	eor	r25, r25
     928:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <UART_TxTail>
     92c:	fc 01       	movw	r30, r24
     92e:	e0 51       	subi	r30, 0x10	; 16
     930:	fb 4f       	sbci	r31, 0xFB	; 251
     932:	80 81       	ld	r24, Z
     934:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     938:	05 c0       	rjmp	.+10     	; 0x944 <__vector_26+0x4a>
     93a:	e1 ec       	ldi	r30, 0xC1	; 193
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	8f 7d       	andi	r24, 0xDF	; 223
     942:	80 83       	st	Z, r24
     944:	ff 91       	pop	r31
     946:	ef 91       	pop	r30
     948:	9f 91       	pop	r25
     94a:	8f 91       	pop	r24
     94c:	0f 90       	pop	r0
     94e:	0b be       	out	0x3b, r0	; 59
     950:	0f 90       	pop	r0
     952:	0f be       	out	0x3f, r0	; 63
     954:	0f 90       	pop	r0
     956:	1f 90       	pop	r1
     958:	18 95       	reti

0000095a <uart0_init>:
     95a:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <UART_TxHead>
     95e:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <UART_TxTail>
     962:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <UART_RxHead>
     966:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <UART_RxTail>
     96a:	99 23       	and	r25, r25
     96c:	24 f4       	brge	.+8      	; 0x976 <uart0_init+0x1c>
     96e:	22 e0       	ldi	r18, 0x02	; 2
     970:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     974:	9f 77       	andi	r25, 0x7F	; 127
     976:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     97a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     97e:	88 e9       	ldi	r24, 0x98	; 152
     980:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     984:	86 e0       	ldi	r24, 0x06	; 6
     986:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     98a:	08 95       	ret

0000098c <uart0_getc>:
     98c:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <UART_RxHead>
     990:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <UART_RxTail>
     994:	98 17       	cp	r25, r24
     996:	a1 f0       	breq	.+40     	; 0x9c0 <uart0_getc+0x34>
     998:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <UART_RxTail>
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	8f 77       	andi	r24, 0x7F	; 127
     9a2:	99 27       	eor	r25, r25
     9a4:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <UART_RxTail>
     9a8:	fc 01       	movw	r30, r24
     9aa:	e0 59       	subi	r30, 0x90	; 144
     9ac:	fb 4f       	sbci	r31, 0xFB	; 251
     9ae:	20 81       	ld	r18, Z
     9b0:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <UART_LastRxError>
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	98 2f       	mov	r25, r24
     9b8:	88 27       	eor	r24, r24
     9ba:	82 0f       	add	r24, r18
     9bc:	91 1d       	adc	r25, r1
     9be:	08 95       	ret
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	08 95       	ret

000009c6 <uart0_peek>:
     9c6:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <UART_RxHead>
     9ca:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <UART_RxTail>
     9ce:	98 17       	cp	r25, r24
     9d0:	89 f0       	breq	.+34     	; 0x9f4 <uart0_peek+0x2e>
     9d2:	e0 91 6c 04 	lds	r30, 0x046C	; 0x80046c <UART_RxTail>
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	31 96       	adiw	r30, 0x01	; 1
     9da:	ef 77       	andi	r30, 0x7F	; 127
     9dc:	ff 27       	eor	r31, r31
     9de:	e0 59       	subi	r30, 0x90	; 144
     9e0:	fb 4f       	sbci	r31, 0xFB	; 251
     9e2:	20 81       	ld	r18, Z
     9e4:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <UART_LastRxError>
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	98 2f       	mov	r25, r24
     9ec:	88 27       	eor	r24, r24
     9ee:	82 0f       	add	r24, r18
     9f0:	91 1d       	adc	r25, r1
     9f2:	08 95       	ret
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	08 95       	ret

000009fa <uart0_putc>:
     9fa:	40 91 6f 04 	lds	r20, 0x046F	; 0x80046f <UART_TxHead>
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	4f 5f       	subi	r20, 0xFF	; 255
     a02:	5f 4f       	sbci	r21, 0xFF	; 255
     a04:	4f 77       	andi	r20, 0x7F	; 127
     a06:	55 27       	eor	r21, r21
     a08:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <UART_TxTail>
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	24 17       	cp	r18, r20
     a10:	35 07       	cpc	r19, r21
     a12:	d1 f3       	breq	.-12     	; 0xa08 <uart0_putc+0xe>
     a14:	fa 01       	movw	r30, r20
     a16:	e0 51       	subi	r30, 0x10	; 16
     a18:	fb 4f       	sbci	r31, 0xFB	; 251
     a1a:	80 83       	st	Z, r24
     a1c:	40 93 6f 04 	sts	0x046F, r20	; 0x80046f <UART_TxHead>
     a20:	e1 ec       	ldi	r30, 0xC1	; 193
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	80 62       	ori	r24, 0x20	; 32
     a28:	80 83       	st	Z, r24
     a2a:	08 95       	ret

00000a2c <__vector_54>:
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	0b b6       	in	r0, 0x3b	; 59
     a38:	0f 92       	push	r0
     a3a:	2f 93       	push	r18
     a3c:	3f 93       	push	r19
     a3e:	4f 93       	push	r20
     a40:	5f 93       	push	r21
     a42:	8f 93       	push	r24
     a44:	9f 93       	push	r25
     a46:	ef 93       	push	r30
     a48:	ff 93       	push	r31
     a4a:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
     a4e:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     a52:	28 71       	andi	r18, 0x18	; 24
     a54:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <UART3_RxHead>
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	8f 77       	andi	r24, 0x7F	; 127
     a5e:	99 27       	eor	r25, r25
     a60:	40 91 67 03 	lds	r20, 0x0367	; 0x800367 <UART3_RxTail>
     a64:	50 e0       	ldi	r21, 0x00	; 0
     a66:	48 17       	cp	r20, r24
     a68:	59 07       	cpc	r21, r25
     a6a:	39 f0       	breq	.+14     	; 0xa7a <__vector_54+0x4e>
     a6c:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <UART3_RxHead>
     a70:	fc 01       	movw	r30, r24
     a72:	e5 59       	subi	r30, 0x95	; 149
     a74:	fc 4f       	sbci	r31, 0xFC	; 252
     a76:	30 83       	st	Z, r19
     a78:	01 c0       	rjmp	.+2      	; 0xa7c <__vector_54+0x50>
     a7a:	22 e0       	ldi	r18, 0x02	; 2
     a7c:	20 93 66 03 	sts	0x0366, r18	; 0x800366 <__data_end>
     a80:	ff 91       	pop	r31
     a82:	ef 91       	pop	r30
     a84:	9f 91       	pop	r25
     a86:	8f 91       	pop	r24
     a88:	5f 91       	pop	r21
     a8a:	4f 91       	pop	r20
     a8c:	3f 91       	pop	r19
     a8e:	2f 91       	pop	r18
     a90:	0f 90       	pop	r0
     a92:	0b be       	out	0x3b, r0	; 59
     a94:	0f 90       	pop	r0
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	0f 90       	pop	r0
     a9a:	1f 90       	pop	r1
     a9c:	18 95       	reti

00000a9e <__vector_55>:
     a9e:	1f 92       	push	r1
     aa0:	0f 92       	push	r0
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	0f 92       	push	r0
     aa6:	11 24       	eor	r1, r1
     aa8:	0b b6       	in	r0, 0x3b	; 59
     aaa:	0f 92       	push	r0
     aac:	8f 93       	push	r24
     aae:	9f 93       	push	r25
     ab0:	ef 93       	push	r30
     ab2:	ff 93       	push	r31
     ab4:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <UART3_TxHead>
     ab8:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <UART3_TxTail>
     abc:	98 17       	cp	r25, r24
     abe:	79 f0       	breq	.+30     	; 0xade <__vector_55+0x40>
     ac0:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <UART3_TxTail>
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	8f 77       	andi	r24, 0x7F	; 127
     aca:	99 27       	eor	r25, r25
     acc:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <UART3_TxTail>
     ad0:	fc 01       	movw	r30, r24
     ad2:	e5 51       	subi	r30, 0x15	; 21
     ad4:	fc 4f       	sbci	r31, 0xFC	; 252
     ad6:	80 81       	ld	r24, Z
     ad8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     adc:	05 c0       	rjmp	.+10     	; 0xae8 <__vector_55+0x4a>
     ade:	e1 e3       	ldi	r30, 0x31	; 49
     ae0:	f1 e0       	ldi	r31, 0x01	; 1
     ae2:	80 81       	ld	r24, Z
     ae4:	8f 7d       	andi	r24, 0xDF	; 223
     ae6:	80 83       	st	Z, r24
     ae8:	ff 91       	pop	r31
     aea:	ef 91       	pop	r30
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	0f 90       	pop	r0
     af2:	0b be       	out	0x3b, r0	; 59
     af4:	0f 90       	pop	r0
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	0f 90       	pop	r0
     afa:	1f 90       	pop	r1
     afc:	18 95       	reti

00000afe <uart3_init>:
     afe:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <UART3_TxHead>
     b02:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <UART3_TxTail>
     b06:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <UART3_RxHead>
     b0a:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <UART3_RxTail>
     b0e:	99 23       	and	r25, r25
     b10:	24 f4       	brge	.+8      	; 0xb1a <uart3_init+0x1c>
     b12:	22 e0       	ldi	r18, 0x02	; 2
     b14:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
     b18:	9f 77       	andi	r25, 0x7F	; 127
     b1a:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
     b1e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
     b22:	88 e9       	ldi	r24, 0x98	; 152
     b24:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
     b28:	86 e0       	ldi	r24, 0x06	; 6
     b2a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
     b2e:	08 95       	ret

00000b30 <uart3_putc>:
void uart3_putc(uint8_t data)
{
	uint16_t tmphead;


	tmphead  = (UART3_TxHead + 1) & UART_TX3_BUFFER_MASK;
     b30:	40 91 6a 03 	lds	r20, 0x036A	; 0x80036a <UART3_TxHead>
     b34:	50 e0       	ldi	r21, 0x00	; 0
     b36:	4f 5f       	subi	r20, 0xFF	; 255
     b38:	5f 4f       	sbci	r21, 0xFF	; 255
     b3a:	4f 77       	andi	r20, 0x7F	; 127
     b3c:	55 27       	eor	r21, r21

	while ( tmphead == UART3_TxTail ) {
     b3e:	20 91 69 03 	lds	r18, 0x0369	; 0x800369 <UART3_TxTail>
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	24 17       	cp	r18, r20
     b46:	35 07       	cpc	r19, r21
     b48:	d1 f3       	breq	.-12     	; 0xb3e <uart3_putc+0xe>
		;/* wait for free space in buffer */
	}

	UART3_TxBuf[tmphead] = data;
     b4a:	fa 01       	movw	r30, r20
     b4c:	e5 51       	subi	r30, 0x15	; 21
     b4e:	fc 4f       	sbci	r31, 0xFC	; 252
     b50:	80 83       	st	Z, r24
	UART3_TxHead = tmphead;
     b52:	40 93 6a 03 	sts	0x036A, r20	; 0x80036a <UART3_TxHead>

	/* enable UDRE interrupt */
	UART3_CONTROL    |= _BV(UART3_UDRIE);
     b56:	e1 e3       	ldi	r30, 0x31	; 49
     b58:	f1 e0       	ldi	r31, 0x01	; 1
     b5a:	80 81       	ld	r24, Z
     b5c:	80 62       	ori	r24, 0x20	; 32
     b5e:	80 83       	st	Z, r24
     b60:	08 95       	ret

00000b62 <getMemoryUsed>:
  size_t used;
  FREELIST *fp;
 
// __brkval=0 if nothing has been allocated yet
 
  if(__brkval==0)
     b62:	20 91 f5 05 	lds	r18, 0x05F5	; 0x8005f5 <__brkval>
     b66:	30 91 f6 05 	lds	r19, 0x05F6	; 0x8005f6 <__brkval+0x1>
     b6a:	21 15       	cp	r18, r1
     b6c:	31 05       	cpc	r19, r1
     b6e:	e9 f0       	breq	.+58     	; 0xbaa <getMemoryUsed+0x48>
    return 0;
 
// __brkval moves up from __malloc_heap_start to
// __malloc_heap_end as memory is used
 
  used=__brkval-__malloc_heap_start;
     b70:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__malloc_heap_start>
     b74:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
     b78:	28 1b       	sub	r18, r24
     b7a:	39 0b       	sbc	r19, r25
// compacted with adjacent blocks. This, combined with malloc's
// intelligent picking of candidate blocks drastically reduces
// heap fragmentation. Anyway, since blocks in the free list
// are available to you at no cost we need to take them off.
 
  for(fp=__flp;fp;fp=fp->nx)
     b7c:	e0 91 f7 05 	lds	r30, 0x05F7	; 0x8005f7 <__flp>
     b80:	f0 91 f8 05 	lds	r31, 0x05F8	; 0x8005f8 <__flp+0x1>
     b84:	30 97       	sbiw	r30, 0x00	; 0
     b86:	71 f0       	breq	.+28     	; 0xba4 <getMemoryUsed+0x42>
     b88:	4e ef       	ldi	r20, 0xFE	; 254
     b8a:	5f ef       	ldi	r21, 0xFF	; 255
     b8c:	80 81       	ld	r24, Z
     b8e:	91 81       	ldd	r25, Z+1	; 0x01
     b90:	ba 01       	movw	r22, r20
     b92:	68 1b       	sub	r22, r24
     b94:	79 0b       	sbc	r23, r25
    used-=fp->sz+sizeof(size_t);
     b96:	26 0f       	add	r18, r22
     b98:	37 1f       	adc	r19, r23
// compacted with adjacent blocks. This, combined with malloc's
// intelligent picking of candidate blocks drastically reduces
// heap fragmentation. Anyway, since blocks in the free list
// are available to you at no cost we need to take them off.
 
  for(fp=__flp;fp;fp=fp->nx)
     b9a:	02 80       	ldd	r0, Z+2	; 0x02
     b9c:	f3 81       	ldd	r31, Z+3	; 0x03
     b9e:	e0 2d       	mov	r30, r0
     ba0:	30 97       	sbiw	r30, 0x00	; 0
     ba2:	a1 f7       	brne	.-24     	; 0xb8c <getMemoryUsed+0x2a>
    used-=fp->sz+sizeof(size_t);
 
  return used;
     ba4:	82 2f       	mov	r24, r18
     ba6:	93 2f       	mov	r25, r19
     ba8:	08 95       	ret
  FREELIST *fp;
 
// __brkval=0 if nothing has been allocated yet
 
  if(__brkval==0)
    return 0;
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
 
  for(fp=__flp;fp;fp=fp->nx)
    used-=fp->sz+sizeof(size_t);
 
  return used;
}
     bae:	08 95       	ret

00000bb0 <getFreeMemory>:
/**
 * Get the total free bytes
 */
 
size_t getFreeMemory()
{
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
  return (size_t)AVR_STACK_POINTER_REG-
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__malloc_margin>
     bbc:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__malloc_margin+0x1>
     bc0:	c8 1b       	sub	r28, r24
     bc2:	d9 0b       	sbc	r29, r25
         (size_t)__malloc_margin-
     bc4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__malloc_heap_start>
     bc8:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
     bcc:	c8 1b       	sub	r28, r24
     bce:	d9 0b       	sbc	r29, r25
         (size_t)__malloc_heap_start-
         getMemoryUsed();
     bd0:	c8 df       	rcall	.-112    	; 0xb62 <getMemoryUsed>
}
     bd2:	9e 01       	movw	r18, r28
     bd4:	28 1b       	sub	r18, r24
     bd6:	39 0b       	sbc	r19, r25
     bd8:	c9 01       	movw	r24, r18
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	08 95       	ret

00000be0 <getLargestBlockInFreeList>:
size_t getLargestBlockInFreeList()
{
  FREELIST *fp;
  size_t maxsize=0;
 
  for(fp=__flp;fp;fp=fp->nx)
     be0:	e0 91 f7 05 	lds	r30, 0x05F7	; 0x8005f7 <__flp>
     be4:	f0 91 f8 05 	lds	r31, 0x05F8	; 0x8005f8 <__flp+0x1>
     be8:	30 97       	sbiw	r30, 0x00	; 0
     bea:	71 f0       	breq	.+28     	; 0xc08 <getLargestBlockInFreeList+0x28>
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e0       	ldi	r25, 0x00	; 0
    if(fp->sz>maxsize)
     bf0:	20 81       	ld	r18, Z
     bf2:	31 81       	ldd	r19, Z+1	; 0x01
     bf4:	82 17       	cp	r24, r18
     bf6:	93 07       	cpc	r25, r19
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <getLargestBlockInFreeList+0x1c>
     bfa:	c9 01       	movw	r24, r18
size_t getLargestBlockInFreeList()
{
  FREELIST *fp;
  size_t maxsize=0;
 
  for(fp=__flp;fp;fp=fp->nx)
     bfc:	02 80       	ldd	r0, Z+2	; 0x02
     bfe:	f3 81       	ldd	r31, Z+3	; 0x03
     c00:	e0 2d       	mov	r30, r0
     c02:	30 97       	sbiw	r30, 0x00	; 0
     c04:	a9 f7       	brne	.-22     	; 0xbf0 <getLargestBlockInFreeList+0x10>
     c06:	08 95       	ret
 */
 
size_t getLargestBlockInFreeList()
{
  FREELIST *fp;
  size_t maxsize=0;
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
  for(fp=__flp;fp;fp=fp->nx)
    if(fp->sz>maxsize)
      maxsize=fp->sz;
 
  return maxsize;
}
     c0c:	08 95       	ret

00000c0e <getNumberOfBlocksInFreeList>:
int getNumberOfBlocksInFreeList()
{
  FREELIST *fp;
  int i;
 
  for(i=0,fp=__flp;fp;fp=fp->nx,i++);
     c0e:	e0 91 f7 05 	lds	r30, 0x05F7	; 0x8005f7 <__flp>
     c12:	f0 91 f8 05 	lds	r31, 0x05F8	; 0x8005f8 <__flp+0x1>
     c16:	30 97       	sbiw	r30, 0x00	; 0
     c18:	49 f0       	breq	.+18     	; 0xc2c <getNumberOfBlocksInFreeList+0x1e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	02 80       	ldd	r0, Z+2	; 0x02
     c20:	f3 81       	ldd	r31, Z+3	; 0x03
     c22:	e0 2d       	mov	r30, r0
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	30 97       	sbiw	r30, 0x00	; 0
     c28:	d1 f7       	brne	.-12     	; 0xc1e <getNumberOfBlocksInFreeList+0x10>
     c2a:	08 95       	ret
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
  return i;
}
     c30:	08 95       	ret

00000c32 <getFreeListSize>:
size_t getFreeListSize()
{
  FREELIST *fp;
  size_t size;
 
  for(size=0,fp=__flp;fp;fp=fp->nx,size+=fp->sz+sizeof(size_t));
     c32:	e0 91 f7 05 	lds	r30, 0x05F7	; 0x8005f7 <__flp>
     c36:	f0 91 f8 05 	lds	r31, 0x05F8	; 0x8005f8 <__flp+0x1>
     c3a:	30 97       	sbiw	r30, 0x00	; 0
     c3c:	71 f0       	breq	.+28     	; 0xc5a <getFreeListSize+0x28>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	02 80       	ldd	r0, Z+2	; 0x02
     c44:	f3 81       	ldd	r31, Z+3	; 0x03
     c46:	e0 2d       	mov	r30, r0
     c48:	20 81       	ld	r18, Z
     c4a:	31 81       	ldd	r19, Z+1	; 0x01
     c4c:	2e 5f       	subi	r18, 0xFE	; 254
     c4e:	3f 4f       	sbci	r19, 0xFF	; 255
     c50:	82 0f       	add	r24, r18
     c52:	93 1f       	adc	r25, r19
     c54:	30 97       	sbiw	r30, 0x00	; 0
     c56:	a9 f7       	brne	.-22     	; 0xc42 <getFreeListSize+0x10>
     c58:	08 95       	ret
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
  return size;
}
     c5e:	08 95       	ret

00000c60 <getLargestNonFreeListBlock>:
{
  char *cp,*brkval;
 
// this code is an adapted fragment from malloc() itself
 
  brkval=__brkval == 0 ? __malloc_heap_start : __brkval;
     c60:	20 91 f5 05 	lds	r18, 0x05F5	; 0x8005f5 <__brkval>
     c64:	30 91 f6 05 	lds	r19, 0x05F6	; 0x8005f6 <__brkval+0x1>
     c68:	21 15       	cp	r18, r1
     c6a:	31 05       	cpc	r19, r1
     c6c:	21 f4       	brne	.+8      	; 0xc76 <getLargestNonFreeListBlock+0x16>
     c6e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
     c72:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 
  if((cp=__malloc_heap_end)==NULL)
     c76:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     c7a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	41 f4       	brne	.+16     	; 0xc92 <getLargestNonFreeListBlock+0x32>
    cp=(char *)AVR_STACK_POINTER_REG-__malloc_margin;
     c82:	8d b7       	in	r24, 0x3d	; 61
     c84:	9e b7       	in	r25, 0x3e	; 62
     c86:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
     c8a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
     c8e:	84 1b       	sub	r24, r20
     c90:	95 0b       	sbc	r25, r21
  if(cp<=brkval)
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	18 f4       	brcc	.+6      	; 0xc9e <getLargestNonFreeListBlock+0x3e>
    return 0;
 
  return cp-brkval;
     c98:	82 1b       	sub	r24, r18
     c9a:	93 0b       	sbc	r25, r19
     c9c:	08 95       	ret
  brkval=__brkval == 0 ? __malloc_heap_start : __brkval;
 
  if((cp=__malloc_heap_end)==NULL)
    cp=(char *)AVR_STACK_POINTER_REG-__malloc_margin;
  if(cp<=brkval)
    return 0;
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
 
  return cp-brkval;
     ca2:	08 95       	ret

00000ca4 <getLargestAvailableMemoryBlock>:
 * Get the largest available block that can be successfully
 * allocated by malloc()
 */
 
size_t getLargestAvailableMemoryBlock()
{
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
  size_t a,b;
 
  a=getLargestBlockInFreeList();
     ca8:	9b df       	rcall	.-202    	; 0xbe0 <getLargestBlockInFreeList>
     caa:	ec 01       	movw	r28, r24
  b=getLargestNonFreeListBlock();
     cac:	d9 df       	rcall	.-78     	; 0xc60 <getLargestNonFreeListBlock>
 
  return a>b ? a : b;
     cae:	8c 17       	cp	r24, r28
     cb0:	9d 07       	cpc	r25, r29
     cb2:	08 f4       	brcc	.+2      	; 0xcb6 <getLargestAvailableMemoryBlock+0x12>
     cb4:	ce 01       	movw	r24, r28
}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <lcd_write>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_home()
{
    lcd_command(1 << LCD_HOME);
     cbc:	66 23       	and	r22, r22
     cbe:	31 f0       	breq	.+12     	; 0xccc <lcd_write+0x10>
     cc0:	e2 e0       	ldi	r30, 0x02	; 2
     cc2:	f1 e0       	ldi	r31, 0x01	; 1
     cc4:	90 81       	ld	r25, Z
     cc6:	90 62       	ori	r25, 0x20	; 32
     cc8:	90 83       	st	Z, r25
     cca:	05 c0       	rjmp	.+10     	; 0xcd6 <lcd_write+0x1a>
     ccc:	e2 e0       	ldi	r30, 0x02	; 2
     cce:	f1 e0       	ldi	r31, 0x01	; 1
     cd0:	90 81       	ld	r25, Z
     cd2:	9f 7d       	andi	r25, 0xDF	; 223
     cd4:	90 83       	st	Z, r25
     cd6:	88 23       	and	r24, r24
     cd8:	34 f4       	brge	.+12     	; 0xce6 <lcd_write+0x2a>
     cda:	e2 e0       	ldi	r30, 0x02	; 2
     cdc:	f1 e0       	ldi	r31, 0x01	; 1
     cde:	90 81       	ld	r25, Z
     ce0:	90 61       	ori	r25, 0x10	; 16
     ce2:	90 83       	st	Z, r25
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <lcd_write+0x34>
     ce6:	e2 e0       	ldi	r30, 0x02	; 2
     ce8:	f1 e0       	ldi	r31, 0x01	; 1
     cea:	90 81       	ld	r25, Z
     cec:	9f 7e       	andi	r25, 0xEF	; 239
     cee:	90 83       	st	Z, r25
     cf0:	86 ff       	sbrs	r24, 6
     cf2:	06 c0       	rjmp	.+12     	; 0xd00 <lcd_write+0x44>
     cf4:	e2 e0       	ldi	r30, 0x02	; 2
     cf6:	f1 e0       	ldi	r31, 0x01	; 1
     cf8:	90 81       	ld	r25, Z
     cfa:	98 60       	ori	r25, 0x08	; 8
     cfc:	90 83       	st	Z, r25
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <lcd_write+0x4e>
     d00:	e2 e0       	ldi	r30, 0x02	; 2
     d02:	f1 e0       	ldi	r31, 0x01	; 1
     d04:	90 81       	ld	r25, Z
     d06:	97 7f       	andi	r25, 0xF7	; 247
     d08:	90 83       	st	Z, r25
     d0a:	85 ff       	sbrs	r24, 5
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <lcd_write+0x56>
     d0e:	73 9a       	sbi	0x0e, 3	; 14
     d10:	01 c0       	rjmp	.+2      	; 0xd14 <lcd_write+0x58>
     d12:	73 98       	cbi	0x0e, 3	; 14
     d14:	84 ff       	sbrs	r24, 4
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <lcd_write+0x60>
     d18:	a5 9a       	sbi	0x14, 5	; 20
     d1a:	01 c0       	rjmp	.+2      	; 0xd1e <lcd_write+0x62>
     d1c:	a5 98       	cbi	0x14, 5	; 20
     d1e:	00 c0       	rjmp	.+0      	; 0xd20 <lcd_write+0x64>
     d20:	e2 e0       	ldi	r30, 0x02	; 2
     d22:	f1 e0       	ldi	r31, 0x01	; 1
     d24:	90 81       	ld	r25, Z
     d26:	90 64       	ori	r25, 0x40	; 64
     d28:	90 83       	st	Z, r25
     d2a:	92 e0       	ldi	r25, 0x02	; 2
     d2c:	9a 95       	dec	r25
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <lcd_write+0x70>
     d30:	00 c0       	rjmp	.+0      	; 0xd32 <lcd_write+0x76>
     d32:	90 81       	ld	r25, Z
     d34:	9f 7b       	andi	r25, 0xBF	; 191
     d36:	90 83       	st	Z, r25
     d38:	83 ff       	sbrs	r24, 3
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <lcd_write+0x88>
     d3c:	90 81       	ld	r25, Z
     d3e:	90 61       	ori	r25, 0x10	; 16
     d40:	90 83       	st	Z, r25
     d42:	05 c0       	rjmp	.+10     	; 0xd4e <lcd_write+0x92>
     d44:	e2 e0       	ldi	r30, 0x02	; 2
     d46:	f1 e0       	ldi	r31, 0x01	; 1
     d48:	90 81       	ld	r25, Z
     d4a:	9f 7e       	andi	r25, 0xEF	; 239
     d4c:	90 83       	st	Z, r25
     d4e:	82 ff       	sbrs	r24, 2
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <lcd_write+0xa2>
     d52:	e2 e0       	ldi	r30, 0x02	; 2
     d54:	f1 e0       	ldi	r31, 0x01	; 1
     d56:	90 81       	ld	r25, Z
     d58:	98 60       	ori	r25, 0x08	; 8
     d5a:	90 83       	st	Z, r25
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <lcd_write+0xac>
     d5e:	e2 e0       	ldi	r30, 0x02	; 2
     d60:	f1 e0       	ldi	r31, 0x01	; 1
     d62:	90 81       	ld	r25, Z
     d64:	97 7f       	andi	r25, 0xF7	; 247
     d66:	90 83       	st	Z, r25
     d68:	81 ff       	sbrs	r24, 1
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <lcd_write+0xb4>
     d6c:	73 9a       	sbi	0x0e, 3	; 14
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <lcd_write+0xb6>
     d70:	73 98       	cbi	0x0e, 3	; 14
     d72:	80 ff       	sbrs	r24, 0
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <lcd_write+0xbe>
     d76:	a5 9a       	sbi	0x14, 5	; 20
     d78:	01 c0       	rjmp	.+2      	; 0xd7c <lcd_write+0xc0>
     d7a:	a5 98       	cbi	0x14, 5	; 20
     d7c:	00 c0       	rjmp	.+0      	; 0xd7e <lcd_write+0xc2>
     d7e:	e2 e0       	ldi	r30, 0x02	; 2
     d80:	f1 e0       	ldi	r31, 0x01	; 1
     d82:	90 81       	ld	r25, Z
     d84:	90 64       	ori	r25, 0x40	; 64
     d86:	90 83       	st	Z, r25
     d88:	92 e0       	ldi	r25, 0x02	; 2
     d8a:	9a 95       	dec	r25
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <lcd_write+0xce>
     d8e:	00 c0       	rjmp	.+0      	; 0xd90 <lcd_write+0xd4>
     d90:	90 81       	ld	r25, Z
     d92:	9f 7b       	andi	r25, 0xBF	; 191
     d94:	90 83       	st	Z, r25
     d96:	90 81       	ld	r25, Z
     d98:	90 61       	ori	r25, 0x10	; 16
     d9a:	90 83       	st	Z, r25
     d9c:	90 81       	ld	r25, Z
     d9e:	98 60       	ori	r25, 0x08	; 8
     da0:	90 83       	st	Z, r25
     da2:	73 9a       	sbi	0x0e, 3	; 14
     da4:	a5 9a       	sbi	0x14, 5	; 20
     da6:	61 11       	cpse	r22, r1
     da8:	09 c0       	rjmp	.+18     	; 0xdbc <lcd_write+0x100>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	38 f4       	brcc	.+14     	; 0xdbc <lcd_write+0x100>
     dae:	8f e9       	ldi	r24, 0x9F	; 159
     db0:	99 e1       	ldi	r25, 0x19	; 25
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <lcd_write+0xf6>
     db6:	00 c0       	rjmp	.+0      	; 0xdb8 <lcd_write+0xfc>
     db8:	00 00       	nop
     dba:	08 95       	ret
     dbc:	95 ed       	ldi	r25, 0xD5	; 213
     dbe:	9a 95       	dec	r25
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <lcd_write+0x102>
     dc2:	00 00       	nop
     dc4:	08 95       	ret

00000dc6 <lcd_command>:
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	79 cf       	rjmp	.-270    	; 0xcbc <lcd_write>
     dca:	08 95       	ret

00000dcc <lcd_goto>:
     dcc:	cf 93       	push	r28
     dce:	c8 2f       	mov	r28, r24
     dd0:	87 36       	cpi	r24, 0x67	; 103
     dd2:	50 f0       	brcs	.+20     	; 0xde8 <lcd_goto+0x1c>
     dd4:	26 e2       	ldi	r18, 0x26	; 38
     dd6:	32 e0       	ldi	r19, 0x02	; 2
     dd8:	44 e0       	ldi	r20, 0x04	; 4
     dda:	52 e0       	ldi	r21, 0x02	; 2
     ddc:	69 e3       	ldi	r22, 0x39	; 57
     dde:	72 e0       	ldi	r23, 0x02	; 2
     de0:	86 e5       	ldi	r24, 0x56	; 86
     de2:	92 e0       	ldi	r25, 0x02	; 2
     de4:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__assert>
     de8:	80 e8       	ldi	r24, 0x80	; 128
     dea:	8c 0f       	add	r24, r28
     dec:	ec df       	rcall	.-40     	; 0xdc6 <lcd_command>
     dee:	cf 91       	pop	r28
     df0:	08 95       	ret

00000df2 <lcd_clrscr>:
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	e8 cf       	rjmp	.-48     	; 0xdc6 <lcd_command>
     df6:	08 95       	ret

00000df8 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
    lcd_write(c, 1);
     df8:	61 e0       	ldi	r22, 0x01	; 1
     dfa:	60 cf       	rjmp	.-320    	; 0xcbc <lcd_write>
     dfc:	08 95       	ret

00000dfe <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
    register char c;

    while ((c = *s++)) {
     e02:	ec 01       	movw	r28, r24
     e04:	21 96       	adiw	r28, 0x01	; 1
     e06:	fc 01       	movw	r30, r24
     e08:	80 81       	ld	r24, Z
     e0a:	88 23       	and	r24, r24
     e0c:	21 f0       	breq	.+8      	; 0xe16 <lcd_puts+0x18>
        lcd_putc(c);
     e0e:	f4 df       	rcall	.-24     	; 0xdf8 <lcd_putc>
*************************************************************************/
void lcd_puts(const char *s)
{
    register char c;

    while ((c = *s++)) {
     e10:	89 91       	ld	r24, Y+
     e12:	81 11       	cpse	r24, r1
     e14:	fc cf       	rjmp	.-8      	; 0xe0e <lcd_puts+0x10>
        lcd_putc(c);
    }
}
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
    register char c;

    while ((c = pgm_read_byte(progmem_s++))) {
     e20:	ec 01       	movw	r28, r24
     e22:	21 96       	adiw	r28, 0x01	; 1
     e24:	fc 01       	movw	r30, r24
     e26:	84 91       	lpm	r24, Z
     e28:	88 23       	and	r24, r24
     e2a:	31 f0       	breq	.+12     	; 0xe38 <lcd_puts_P+0x1c>
        lcd_putc(c);
     e2c:	e5 df       	rcall	.-54     	; 0xdf8 <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    register char c;

    while ((c = pgm_read_byte(progmem_s++))) {
     e2e:	fe 01       	movw	r30, r28
     e30:	84 91       	lpm	r24, Z
     e32:	21 96       	adiw	r28, 0x01	; 1
     e34:	81 11       	cpse	r24, r1
     e36:	fa cf       	rjmp	.-12     	; 0xe2c <lcd_puts_P+0x10>
        lcd_putc(c);
    }
}
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <lcd_init>:
        break;
#endif

    default :
#endif
        DDR(LCD_E_PORT) |= _BV(LCD_E_PIN);
     e3e:	e1 e0       	ldi	r30, 0x01	; 1
     e40:	f1 e0       	ldi	r31, 0x01	; 1
     e42:	80 81       	ld	r24, Z
     e44:	80 64       	ori	r24, 0x40	; 64
     e46:	80 83       	st	Z, r24
*************************************************************************/
void lcd_init()
{
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
     e48:	80 81       	ld	r24, Z
     e4a:	80 62       	ori	r24, 0x20	; 32
     e4c:	80 83       	st	Z, r24
#if RW_LINE_IMPLEMENTED==1
    lcd_rw_ddr_high();
#endif
    lcd_db7_ddr_high();
     e4e:	80 81       	ld	r24, Z
     e50:	80 61       	ori	r24, 0x10	; 16
     e52:	80 83       	st	Z, r24
    lcd_db6_ddr_high();
     e54:	80 81       	ld	r24, Z
     e56:	88 60       	ori	r24, 0x08	; 8
     e58:	80 83       	st	Z, r24
    lcd_db5_ddr_high();
     e5a:	6b 9a       	sbi	0x0d, 3	; 13
    lcd_db4_ddr_high();
     e5c:	9d 9a       	sbi	0x13, 5	; 19
        break;
#endif

    default :
#endif
        LCD_E_PORT &= ~_BV(LCD_E_PIN);
     e5e:	e2 e0       	ldi	r30, 0x02	; 2
     e60:	f1 e0       	ldi	r31, 0x01	; 1
     e62:	80 81       	ld	r24, Z
     e64:	8f 7b       	andi	r24, 0xBF	; 191
     e66:	80 83       	st	Z, r24
    lcd_db1_ddr_high();
    lcd_db0_ddr_high();
#endif
    //Set All Control Lines Low
    lcd_e_port_low();
    lcd_rs_port_low();
     e68:	80 81       	ld	r24, Z
     e6a:	8f 7d       	andi	r24, 0xDF	; 223
     e6c:	80 83       	st	Z, r24
#if RW_LINE_IMPLEMENTED==1
    lcd_rw_port_low();
#endif
    //Set All Data Lines High
    lcd_db7_port_high();
     e6e:	80 81       	ld	r24, Z
     e70:	80 61       	ori	r24, 0x10	; 16
     e72:	80 83       	st	Z, r24
    lcd_db6_port_high();
     e74:	80 81       	ld	r24, Z
     e76:	88 60       	ori	r24, 0x08	; 8
     e78:	80 83       	st	Z, r24
    lcd_db5_port_high();
     e7a:	73 9a       	sbi	0x0e, 3	; 14
    lcd_db4_port_high();
     e7c:	a5 9a       	sbi	0x14, 5	; 20
    lcd_db2_port_high();
    lcd_db1_port_high();
    lcd_db0_port_high();
#endif
    //Startup Delay
    Delay_ms(DELAY_RESET);
     e7e:	8f e5       	ldi	r24, 0x5F	; 95
     e80:	9a ee       	ldi	r25, 0xEA	; 234
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <lcd_init+0x44>
     e86:	00 c0       	rjmp	.+0      	; 0xe88 <lcd_init+0x4a>
     e88:	00 00       	nop
    //Initialize Display
    lcd_db7_port_low();
     e8a:	80 81       	ld	r24, Z
     e8c:	8f 7e       	andi	r24, 0xEF	; 239
     e8e:	80 83       	st	Z, r24
    lcd_db6_port_low();
     e90:	80 81       	ld	r24, Z
     e92:	87 7f       	andi	r24, 0xF7	; 247
     e94:	80 83       	st	Z, r24
    Delay_ns(100);
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <lcd_init+0x5a>
        break;
#endif

    default :
#endif
        LCD_E_PORT |= _BV(LCD_E_PIN);
     e98:	80 81       	ld	r24, Z
     e9a:	80 64       	ori	r24, 0x40	; 64
     e9c:	80 83       	st	Z, r24
    //Initialize Display
    lcd_db7_port_low();
    lcd_db6_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	9a 95       	dec	r25
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <lcd_init+0x62>
     ea4:	00 c0       	rjmp	.+0      	; 0xea6 <lcd_init+0x68>
        break;
#endif

    default :
#endif
        LCD_E_PORT &= ~_BV(LCD_E_PIN);
     ea6:	80 81       	ld	r24, Z
     ea8:	8f 7b       	andi	r24, 0xBF	; 191
     eaa:	80 83       	st	Z, r24
    lcd_db6_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();
    Delay_us(4100);
     eac:	8f e0       	ldi	r24, 0x0F	; 15
     eae:	90 e4       	ldi	r25, 0x40	; 64
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <lcd_init+0x72>
     eb4:	00 c0       	rjmp	.+0      	; 0xeb6 <lcd_init+0x78>
     eb6:	00 00       	nop
        break;
#endif

    default :
#endif
        LCD_E_PORT |= _BV(LCD_E_PIN);
     eb8:	80 81       	ld	r24, Z
     eba:	80 64       	ori	r24, 0x40	; 64
     ebc:	80 83       	st	Z, r24
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();
    Delay_us(4100);
    lcd_e_port_high();
    Delay_ns(500);
     ebe:	92 e0       	ldi	r25, 0x02	; 2
     ec0:	9a 95       	dec	r25
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <lcd_init+0x82>
     ec4:	00 c0       	rjmp	.+0      	; 0xec6 <lcd_init+0x88>
        break;
#endif

    default :
#endif
        LCD_E_PORT &= ~_BV(LCD_E_PIN);
     ec6:	80 81       	ld	r24, Z
     ec8:	8f 7b       	andi	r24, 0xBF	; 191
     eca:	80 83       	st	Z, r24
    lcd_e_port_low();
    Delay_us(4100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();
    Delay_us(100);
     ecc:	8f e8       	ldi	r24, 0x8F	; 143
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <lcd_init+0x92>
     ed4:	00 c0       	rjmp	.+0      	; 0xed6 <lcd_init+0x98>
     ed6:	00 00       	nop
        break;
#endif

    default :
#endif
        LCD_E_PORT |= _BV(LCD_E_PIN);
     ed8:	80 81       	ld	r24, Z
     eda:	80 64       	ori	r24, 0x40	; 64
     edc:	80 83       	st	Z, r24
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();
    Delay_us(100);
    lcd_e_port_high();
    Delay_ns(500);
     ede:	92 e0       	ldi	r25, 0x02	; 2
     ee0:	9a 95       	dec	r25
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <lcd_init+0xa2>
     ee4:	00 c0       	rjmp	.+0      	; 0xee6 <lcd_init+0xa8>
        break;
#endif

    default :
#endif
        LCD_E_PORT &= ~_BV(LCD_E_PIN);
     ee6:	80 81       	ld	r24, Z
     ee8:	8f 7b       	andi	r24, 0xBF	; 191
     eea:	80 83       	st	Z, r24
    lcd_e_port_low();
    Delay_us(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();
    Delay_us(40);
     eec:	85 ed       	ldi	r24, 0xD5	; 213
     eee:	8a 95       	dec	r24
     ef0:	f1 f7       	brne	.-4      	; 0xeee <lcd_init+0xb0>
     ef2:	00 00       	nop
    //Init differs between 4-bit and 8-bit from here
#if (LCD_BITS==4)
    lcd_db4_port_low();
     ef4:	a5 98       	cbi	0x14, 5	; 20
    Delay_ns(100);
     ef6:	00 c0       	rjmp	.+0      	; 0xef8 <lcd_init+0xba>
        break;
#endif

    default :
#endif
        LCD_E_PORT |= _BV(LCD_E_PIN);
     ef8:	80 81       	ld	r24, Z
     efa:	80 64       	ori	r24, 0x40	; 64
     efc:	80 83       	st	Z, r24
    //Init differs between 4-bit and 8-bit from here
#if (LCD_BITS==4)
    lcd_db4_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
     efe:	92 e0       	ldi	r25, 0x02	; 2
     f00:	9a 95       	dec	r25
     f02:	f1 f7       	brne	.-4      	; 0xf00 <lcd_init+0xc2>
     f04:	00 c0       	rjmp	.+0      	; 0xf06 <lcd_init+0xc8>
        break;
#endif

    default :
#endif
        LCD_E_PORT &= ~_BV(LCD_E_PIN);
     f06:	80 81       	ld	r24, Z
     f08:	8f 7b       	andi	r24, 0xBF	; 191
     f0a:	80 83       	st	Z, r24
    lcd_db4_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();
    Delay_us(40);
     f0c:	85 ed       	ldi	r24, 0xD5	; 213
     f0e:	8a 95       	dec	r24
     f10:	f1 f7       	brne	.-4      	; 0xf0e <lcd_init+0xd0>
     f12:	00 00       	nop
    lcd_db4_port_low();
     f14:	a5 98       	cbi	0x14, 5	; 20
    Delay_ns(100);
     f16:	00 c0       	rjmp	.+0      	; 0xf18 <lcd_init+0xda>
        break;
#endif

    default :
#endif
        LCD_E_PORT |= _BV(LCD_E_PIN);
     f18:	80 81       	ld	r24, Z
     f1a:	80 64       	ori	r24, 0x40	; 64
     f1c:	80 83       	st	Z, r24
    lcd_e_port_low();
    Delay_us(40);
    lcd_db4_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
     f1e:	92 e0       	ldi	r25, 0x02	; 2
     f20:	9a 95       	dec	r25
     f22:	f1 f7       	brne	.-4      	; 0xf20 <lcd_init+0xe2>
     f24:	00 c0       	rjmp	.+0      	; 0xf26 <lcd_init+0xe8>
        break;
#endif

    default :
#endif
        LCD_E_PORT &= ~_BV(LCD_E_PIN);
     f26:	80 81       	ld	r24, Z
     f28:	8f 7b       	andi	r24, 0xBF	; 191
     f2a:	80 83       	st	Z, r24
    lcd_db4_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();
    Delay_ns(500);
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	8a 95       	dec	r24
     f30:	f1 f7       	brne	.-4      	; 0xf2e <lcd_init+0xf0>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <lcd_init+0xf6>
#if (LCD_DISPLAYS==1)

    if (LCD_DISPLAY_LINES > 1) {
        lcd_db7_port_high();
     f34:	80 81       	ld	r24, Z
     f36:	80 61       	ori	r24, 0x10	; 16
     f38:	80 83       	st	Z, r24
    if (c > 1) {
        lcd_db7_port_high();
    }

#endif
    Delay_ns(100);
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <lcd_init+0xfe>
        break;
#endif

    default :
#endif
        LCD_E_PORT |= _BV(LCD_E_PIN);
     f3c:	80 81       	ld	r24, Z
     f3e:	80 64       	ori	r24, 0x40	; 64
     f40:	80 83       	st	Z, r24
    }

#endif
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	9a 95       	dec	r25
     f46:	f1 f7       	brne	.-4      	; 0xf44 <lcd_init+0x106>
     f48:	00 c0       	rjmp	.+0      	; 0xf4a <lcd_init+0x10c>
        break;
#endif

    default :
#endif
        LCD_E_PORT &= ~_BV(LCD_E_PIN);
     f4a:	80 81       	ld	r24, Z
     f4c:	8f 7b       	andi	r24, 0xBF	; 191
     f4e:	80 83       	st	Z, r24
#endif
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();
    Delay_us(40);
     f50:	85 ed       	ldi	r24, 0xD5	; 213
     f52:	8a 95       	dec	r24
     f54:	f1 f7       	brne	.-4      	; 0xf52 <lcd_init+0x114>
     f56:	00 00       	nop
    Delay_ns(500);
    lcd_e_port_low();
    Delay_us(40);
#endif
    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
     f58:	88 e0       	ldi	r24, 0x08	; 8
     f5a:	35 df       	rcall	.-406    	; 0xdc6 <lcd_command>
    //Display Clear
    lcd_clrscr();
     f5c:	4a df       	rcall	.-364    	; 0xdf2 <lcd_clrscr>
    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
     f5e:	86 e0       	ldi	r24, 0x06	; 6
     f60:	32 df       	rcall	.-412    	; 0xdc6 <lcd_command>
    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
     f62:	8c e0       	ldi	r24, 0x0C	; 12
     f64:	30 cf       	rjmp	.-416    	; 0xdc6 <lcd_command>
     f66:	08 95       	ret

00000f68 <lcd_clr>:
Clear characters at position until length
Input:    start position and lentgh
Returns:  none
*************************************************************************/
void lcd_clr(uint8_t pos, uint8_t len)
{
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
    for (int i = 0; i < len; i++) {
     f72:	06 2f       	mov	r16, r22
     f74:	10 e0       	ldi	r17, 0x00	; 0
     f76:	10 16       	cp	r1, r16
     f78:	11 06       	cpc	r1, r17
     f7a:	64 f4       	brge	.+24     	; 0xf94 <lcd_clr+0x2c>
     f7c:	f8 2e       	mov	r15, r24
     f7e:	c0 e0       	ldi	r28, 0x00	; 0
     f80:	d0 e0       	ldi	r29, 0x00	; 0
        lcd_goto(pos + i);
     f82:	8c 2f       	mov	r24, r28
     f84:	8f 0d       	add	r24, r15
     f86:	22 df       	rcall	.-444    	; 0xdcc <lcd_goto>
        lcd_putc(' ');
     f88:	80 e2       	ldi	r24, 0x20	; 32
     f8a:	36 df       	rcall	.-404    	; 0xdf8 <lcd_putc>
Input:    start position and lentgh
Returns:  none
*************************************************************************/
void lcd_clr(uint8_t pos, uint8_t len)
{
    for (int i = 0; i < len; i++) {
     f8c:	21 96       	adiw	r28, 0x01	; 1
     f8e:	c0 17       	cp	r28, r16
     f90:	d1 07       	cpc	r29, r17
     f92:	b9 f7       	brne	.-18     	; 0xf82 <lcd_clr+0x1a>
        lcd_goto(pos + i);
        lcd_putc(' ');
    }
}
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	ff 90       	pop	r15
     f9e:	08 95       	ret

00000fa0 <terminal_reset_cursor>:
}

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
	pThis->get_completion = get_completion;
     fa0:	ef 92       	push	r14
     fa2:	ff 92       	push	r15
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	60 97       	sbiw	r28, 0x10	; 16
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
     fbc:	8c 01       	movw	r16, r24
     fbe:	1f 92       	push	r1
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	8f 93       	push	r24
     fc4:	1f 92       	push	r1
     fc6:	88 e6       	ldi	r24, 0x68	; 104
     fc8:	8f 93       	push	r24
     fca:	8f e5       	ldi	r24, 0x5F	; 95
     fcc:	92 e0       	ldi	r25, 0x02	; 2
     fce:	9f 93       	push	r25
     fd0:	8f 93       	push	r24
     fd2:	1f 92       	push	r1
     fd4:	80 e1       	ldi	r24, 0x10	; 16
     fd6:	8f 93       	push	r24
     fd8:	ce 01       	movw	r24, r28
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	7c 01       	movw	r14, r24
     fde:	9f 93       	push	r25
     fe0:	8f 93       	push	r24
     fe2:	0e 94 12 19 	call	0x3224	; 0x3224 <snprintf>
     fe6:	f8 01       	movw	r30, r16
     fe8:	e1 59       	subi	r30, 0x91	; 145
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	01 90       	ld	r0, Z+
     fee:	f0 81       	ld	r31, Z
     ff0:	e0 2d       	mov	r30, r0
     ff2:	c7 01       	movw	r24, r14
     ff4:	19 95       	eicall
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	60 96       	adiw	r28, 0x10	; 16
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	ff 90       	pop	r15
    1016:	ef 90       	pop	r14
    1018:	08 95       	ret

0000101a <terminal_move_cursor>:
    101a:	0f 93       	push	r16
    101c:	1f 93       	push	r17
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	60 97       	sbiw	r28, 0x10	; 16
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	8c 01       	movw	r16, r24
    1034:	fe 01       	movw	r30, r28
    1036:	31 96       	adiw	r30, 0x01	; 1
    1038:	80 e1       	ldi	r24, 0x10	; 16
    103a:	df 01       	movw	r26, r30
    103c:	1d 92       	st	X+, r1
    103e:	8a 95       	dec	r24
    1040:	e9 f7       	brne	.-6      	; 0x103c <terminal_move_cursor+0x22>
    1042:	16 16       	cp	r1, r22
    1044:	17 06       	cpc	r1, r23
    1046:	9c f4       	brge	.+38     	; 0x106e <terminal_move_cursor+0x54>
    1048:	7f 93       	push	r23
    104a:	6f 93       	push	r22
    104c:	84 e6       	ldi	r24, 0x64	; 100
    104e:	92 e0       	ldi	r25, 0x02	; 2
    1050:	9f 93       	push	r25
    1052:	8f 93       	push	r24
    1054:	1f 92       	push	r1
    1056:	80 e1       	ldi	r24, 0x10	; 16
    1058:	8f 93       	push	r24
    105a:	ff 93       	push	r31
    105c:	ef 93       	push	r30
    105e:	0e 94 12 19 	call	0x3224	; 0x3224 <snprintf>
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	19 c0       	rjmp	.+50     	; 0x10a0 <terminal_move_cursor+0x86>
    106e:	77 23       	and	r23, r23
    1070:	bc f4       	brge	.+46     	; 0x10a0 <terminal_move_cursor+0x86>
    1072:	71 95       	neg	r23
    1074:	61 95       	neg	r22
    1076:	71 09       	sbc	r23, r1
    1078:	7f 93       	push	r23
    107a:	6f 93       	push	r22
    107c:	8a e6       	ldi	r24, 0x6A	; 106
    107e:	92 e0       	ldi	r25, 0x02	; 2
    1080:	9f 93       	push	r25
    1082:	8f 93       	push	r24
    1084:	1f 92       	push	r1
    1086:	80 e1       	ldi	r24, 0x10	; 16
    1088:	8f 93       	push	r24
    108a:	ce 01       	movw	r24, r28
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	9f 93       	push	r25
    1090:	8f 93       	push	r24
    1092:	0e 94 12 19 	call	0x3224	; 0x3224 <snprintf>
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	f8 01       	movw	r30, r16
    10a2:	e1 59       	subi	r30, 0x91	; 145
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	01 90       	ld	r0, Z+
    10a8:	f0 81       	ld	r31, Z
    10aa:	e0 2d       	mov	r30, r0
    10ac:	ce 01       	movw	r24, r28
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	19 95       	eicall
    10b2:	60 96       	adiw	r28, 0x10	; 16
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	08 95       	ret

000010c8 <terminal_print_line>:
    10c8:	5f 92       	push	r5
    10ca:	6f 92       	push	r6
    10cc:	7f 92       	push	r7
    10ce:	8f 92       	push	r8
    10d0:	9f 92       	push	r9
    10d2:	af 92       	push	r10
    10d4:	bf 92       	push	r11
    10d6:	cf 92       	push	r12
    10d8:	df 92       	push	r13
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	1f 92       	push	r1
    10e8:	1f 92       	push	r1
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	4c 01       	movw	r8, r24
    10f0:	8b 01       	movw	r16, r22
    10f2:	3a 01       	movw	r6, r20
    10f4:	fc 01       	movw	r30, r24
    10f6:	e1 59       	subi	r30, 0x91	; 145
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	01 90       	ld	r0, Z+
    10fc:	f0 81       	ld	r31, Z
    10fe:	e0 2d       	mov	r30, r0
    1100:	80 e7       	ldi	r24, 0x70	; 112
    1102:	92 e0       	ldi	r25, 0x02	; 2
    1104:	19 95       	eicall
    1106:	19 82       	std	Y+1, r1	; 0x01
    1108:	1a 82       	std	Y+2, r1	; 0x02
    110a:	f4 01       	movw	r30, r8
    110c:	e9 59       	subi	r30, 0x99	; 153
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	80 81       	ld	r24, Z
    1112:	91 81       	ldd	r25, Z+1	; 0x01
    1114:	08 17       	cp	r16, r24
    1116:	19 07       	cpc	r17, r25
    1118:	24 f5       	brge	.+72     	; 0x1162 <terminal_print_line+0x9a>
    111a:	78 01       	movw	r14, r16
    111c:	82 e0       	ldi	r24, 0x02	; 2
    111e:	e8 0e       	add	r14, r24
    1120:	f1 1c       	adc	r15, r1
    1122:	e8 0c       	add	r14, r8
    1124:	f9 1c       	adc	r15, r9
    1126:	68 94       	set
    1128:	55 24       	eor	r5, r5
    112a:	55 f8       	bld	r5, 5
    112c:	54 01       	movw	r10, r8
    112e:	af e6       	ldi	r26, 0x6F	; 111
    1130:	aa 0e       	add	r10, r26
    1132:	b1 1c       	adc	r11, r1
    1134:	6f 01       	movw	r12, r30
    1136:	f7 01       	movw	r30, r14
    1138:	81 91       	ld	r24, Z+
    113a:	7f 01       	movw	r14, r30
    113c:	88 23       	and	r24, r24
    113e:	11 f0       	breq	.+4      	; 0x1144 <terminal_print_line+0x7c>
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <terminal_print_line+0x7e>
    1144:	59 82       	std	Y+1, r5	; 0x01
    1146:	d5 01       	movw	r26, r10
    1148:	ed 91       	ld	r30, X+
    114a:	fc 91       	ld	r31, X
    114c:	ce 01       	movw	r24, r28
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	19 95       	eicall
    1152:	0f 5f       	subi	r16, 0xFF	; 255
    1154:	1f 4f       	sbci	r17, 0xFF	; 255
    1156:	f6 01       	movw	r30, r12
    1158:	80 81       	ld	r24, Z
    115a:	91 81       	ldd	r25, Z+1	; 0x01
    115c:	08 17       	cp	r16, r24
    115e:	19 07       	cpc	r17, r25
    1160:	54 f3       	brlt	.-44     	; 0x1136 <terminal_print_line+0x6e>
    1162:	c4 01       	movw	r24, r8
    1164:	1d df       	rcall	.-454    	; 0xfa0 <terminal_reset_cursor>
    1166:	b3 01       	movw	r22, r6
    1168:	c4 01       	movw	r24, r8
    116a:	57 df       	rcall	.-338    	; 0x101a <terminal_move_cursor>
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	ef 90       	pop	r14
    117c:	df 90       	pop	r13
    117e:	cf 90       	pop	r12
    1180:	bf 90       	pop	r11
    1182:	af 90       	pop	r10
    1184:	9f 90       	pop	r9
    1186:	8f 90       	pop	r8
    1188:	7f 90       	pop	r7
    118a:	6f 90       	pop	r6
    118c:	5f 90       	pop	r5
    118e:	08 95       	ret

00001190 <microrl_backspace>:
    1190:	ef 92       	push	r14
    1192:	ff 92       	push	r15
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	fc 01       	movw	r30, r24
    119e:	e7 59       	subi	r30, 0x97	; 151
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	20 81       	ld	r18, Z
    11a4:	31 81       	ldd	r19, Z+1	; 0x01
    11a6:	12 16       	cp	r1, r18
    11a8:	13 06       	cpc	r1, r19
    11aa:	94 f5       	brge	.+100    	; 0x1210 <microrl_backspace+0x80>
    11ac:	ec 01       	movw	r28, r24
    11ae:	36 96       	adiw	r30, 0x06	; 6
    11b0:	01 90       	ld	r0, Z+
    11b2:	f0 81       	ld	r31, Z
    11b4:	e0 2d       	mov	r30, r0
    11b6:	84 e7       	ldi	r24, 0x74	; 116
    11b8:	92 e0       	ldi	r25, 0x02	; 2
    11ba:	19 95       	eicall
    11bc:	7e 01       	movw	r14, r28
    11be:	89 e6       	ldi	r24, 0x69	; 105
    11c0:	e8 0e       	add	r14, r24
    11c2:	f1 1c       	adc	r15, r1
    11c4:	f7 01       	movw	r30, r14
    11c6:	80 81       	ld	r24, Z
    11c8:	91 81       	ldd	r25, Z+1	; 0x01
    11ca:	8e 01       	movw	r16, r28
    11cc:	09 59       	subi	r16, 0x99	; 153
    11ce:	1f 4f       	sbci	r17, 0xFF	; 255
    11d0:	f8 01       	movw	r30, r16
    11d2:	40 81       	ld	r20, Z
    11d4:	51 81       	ldd	r21, Z+1	; 0x01
    11d6:	48 1b       	sub	r20, r24
    11d8:	59 0b       	sbc	r21, r25
    11da:	4f 5f       	subi	r20, 0xFF	; 255
    11dc:	5f 4f       	sbci	r21, 0xFF	; 255
    11de:	bc 01       	movw	r22, r24
    11e0:	6e 5f       	subi	r22, 0xFE	; 254
    11e2:	7f 4f       	sbci	r23, 0xFF	; 255
    11e4:	6c 0f       	add	r22, r28
    11e6:	7d 1f       	adc	r23, r29
    11e8:	01 96       	adiw	r24, 0x01	; 1
    11ea:	8c 0f       	add	r24, r28
    11ec:	9d 1f       	adc	r25, r29
    11ee:	0e 94 49 18 	call	0x3092	; 0x3092 <memmove>
    11f2:	f7 01       	movw	r30, r14
    11f4:	80 81       	ld	r24, Z
    11f6:	91 81       	ldd	r25, Z+1	; 0x01
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	91 83       	std	Z+1, r25	; 0x01
    11fc:	80 83       	st	Z, r24
    11fe:	f8 01       	movw	r30, r16
    1200:	80 81       	ld	r24, Z
    1202:	91 81       	ldd	r25, Z+1	; 0x01
    1204:	c8 0f       	add	r28, r24
    1206:	d9 1f       	adc	r29, r25
    1208:	1a 82       	std	Y+2, r1	; 0x02
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	91 83       	std	Z+1, r25	; 0x01
    120e:	80 83       	st	Z, r24
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	ff 90       	pop	r15
    121a:	ef 90       	pop	r14
    121c:	08 95       	ret

0000121e <microrl_init>:
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	dc 01       	movw	r26, r24
    1224:	fc 01       	movw	r30, r24
    1226:	32 96       	adiw	r30, 0x02	; 2
    1228:	85 e6       	ldi	r24, 0x65	; 101
    122a:	ef 01       	movw	r28, r30
    122c:	19 92       	st	Y+, r1
    122e:	8a 95       	dec	r24
    1230:	e9 f7       	brne	.-6      	; 0x122c <microrl_init+0xe>
    1232:	eb 59       	subi	r30, 0x9B	; 155
    1234:	ff 4f       	sbci	r31, 0xFF	; 255
    1236:	11 82       	std	Z+1, r1	; 0x01
    1238:	10 82       	st	Z, r1
    123a:	32 96       	adiw	r30, 0x02	; 2
    123c:	11 82       	std	Z+1, r1	; 0x01
    123e:	10 82       	st	Z, r1
    1240:	32 96       	adiw	r30, 0x02	; 2
    1242:	11 82       	std	Z+1, r1	; 0x01
    1244:	10 82       	st	Z, r1
    1246:	32 96       	adiw	r30, 0x02	; 2
    1248:	11 82       	std	Z+1, r1	; 0x01
    124a:	10 82       	st	Z, r1
    124c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <prompt_default>
    1250:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <prompt_default+0x1>
    1254:	11 96       	adiw	r26, 0x01	; 1
    1256:	9c 93       	st	X, r25
    1258:	8e 93       	st	-X, r24
    125a:	a1 59       	subi	r26, 0x91	; 145
    125c:	bf 4f       	sbci	r27, 0xFF	; 255
    125e:	6d 93       	st	X+, r22
    1260:	7c 93       	st	X, r23
    1262:	fb 01       	movw	r30, r22
    1264:	19 95       	eicall
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <microrl_set_execute_callback>:
}

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
	pThis->execute = execute;
    126c:	fc 01       	movw	r30, r24
    126e:	e5 59       	subi	r30, 0x95	; 149
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	71 83       	std	Z+1, r23	; 0x01
    1274:	60 83       	st	Z, r22
    1276:	08 95       	ret

00001278 <new_line_handler>:
	} 
}
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	60 97       	sbiw	r28, 0x10	; 16
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
    1294:	8c 01       	movw	r16, r24
}

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
	pThis->print (ENDL);
    1296:	fc 01       	movw	r30, r24
    1298:	e1 59       	subi	r30, 0x91	; 145
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	01 90       	ld	r0, Z+
    129e:	f0 81       	ld	r31, Z
    12a0:	e0 2d       	mov	r30, r0
    12a2:	8c e7       	ldi	r24, 0x7C	; 124
    12a4:	92 e0       	ldi	r25, 0x02	; 2
    12a6:	19 95       	eicall
	terminal_newline (pThis);
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
    12a8:	f8 01       	movw	r30, r16
    12aa:	e9 59       	subi	r30, 0x99	; 153
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	40 81       	ld	r20, Z
    12b0:	51 81       	ldd	r21, Z+1	; 0x01
//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
	int i = 0;
	int ind = 0;
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0

//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
	int i = 0;
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	06 c0       	rjmp	.+12     	; 0x12c8 <new_line_handler+0x50>
	int ind = 0;
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
			ind++;
    12bc:	2f 5f       	subi	r18, 0xFF	; 255
    12be:	3f 4f       	sbci	r19, 0xFF	; 255
    12c0:	03 c0       	rjmp	.+6      	; 0x12c8 <new_line_handler+0x50>
		}
		if (!(ind < limit)) return i;
		tkn_arr[i++] = pThis->cmdline + ind;
    12c2:	bd 01       	movw	r22, r26
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <new_line_handler+0x50>
    12c6:	bd 01       	movw	r22, r26
{
	int i = 0;
	int ind = 0;
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
    12c8:	f8 01       	movw	r30, r16
    12ca:	e2 0f       	add	r30, r18
    12cc:	f3 1f       	adc	r31, r19
    12ce:	82 81       	ldd	r24, Z+2	; 0x02
    12d0:	81 11       	cpse	r24, r1
    12d2:	05 c0       	rjmp	.+10     	; 0x12de <new_line_handler+0x66>
    12d4:	24 17       	cp	r18, r20
    12d6:	35 07       	cpc	r19, r21
    12d8:	8c f3       	brlt	.-30     	; 0x12bc <new_line_handler+0x44>
    12da:	db 01       	movw	r26, r22
    12dc:	30 c0       	rjmp	.+96     	; 0x133e <new_line_handler+0xc6>
			ind++;
		}
		if (!(ind < limit)) return i;
    12de:	24 17       	cp	r18, r20
    12e0:	35 07       	cpc	r19, r21
    12e2:	64 f5       	brge	.+88     	; 0x133c <new_line_handler+0xc4>
		tkn_arr[i++] = pThis->cmdline + ind;
    12e4:	db 01       	movw	r26, r22
    12e6:	11 96       	adiw	r26, 0x01	; 1
    12e8:	66 0f       	add	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	8c 0f       	add	r24, r28
    12f2:	9d 1f       	adc	r25, r29
    12f4:	68 0f       	add	r22, r24
    12f6:	79 1f       	adc	r23, r25
    12f8:	c9 01       	movw	r24, r18
    12fa:	02 96       	adiw	r24, 0x02	; 2
    12fc:	80 0f       	add	r24, r16
    12fe:	91 1f       	adc	r25, r17
    1300:	fb 01       	movw	r30, r22
    1302:	91 83       	std	Z+1, r25	; 0x01
    1304:	80 83       	st	Z, r24
		if (i >= _COMMAND_TOKEN_NMB) {
    1306:	a8 30       	cpi	r26, 0x08	; 8
    1308:	b1 05       	cpc	r27, r1
    130a:	ec f4       	brge	.+58     	; 0x1346 <new_line_handler+0xce>
			return -1;
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
    130c:	c8 01       	movw	r24, r16
    130e:	82 0f       	add	r24, r18
    1310:	93 1f       	adc	r25, r19
    1312:	fc 01       	movw	r30, r24
    1314:	82 81       	ldd	r24, Z+2	; 0x02
    1316:	88 23       	and	r24, r24
    1318:	a1 f2       	breq	.-88     	; 0x12c2 <new_line_handler+0x4a>
    131a:	f9 01       	movw	r30, r18
    131c:	33 96       	adiw	r30, 0x03	; 3
    131e:	e0 0f       	add	r30, r16
    1320:	f1 1f       	adc	r31, r17
			ind++;
    1322:	2f 5f       	subi	r18, 0xFF	; 255
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
		tkn_arr[i++] = pThis->cmdline + ind;
		if (i >= _COMMAND_TOKEN_NMB) {
			return -1;
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
    1326:	91 91       	ld	r25, Z+
    1328:	99 23       	and	r25, r25
    132a:	21 f0       	breq	.+8      	; 0x1334 <new_line_handler+0xbc>
    132c:	24 17       	cp	r18, r20
    132e:	35 07       	cpc	r19, r21
    1330:	c4 f3       	brlt	.-16     	; 0x1322 <new_line_handler+0xaa>
    1332:	05 c0       	rjmp	.+10     	; 0x133e <new_line_handler+0xc6>
			ind++;
		}
		if (!(ind < limit)) return i;
    1334:	24 17       	cp	r18, r20
    1336:	35 07       	cpc	r19, r21
    1338:	34 f2       	brlt	.-116    	; 0x12c6 <new_line_handler+0x4e>
    133a:	01 c0       	rjmp	.+2      	; 0x133e <new_line_handler+0xc6>
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
			ind++;
		}
		if (!(ind < limit)) return i;
    133c:	db 01       	movw	r26, r22
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
	if (status == -1){
    133e:	af 3f       	cpi	r26, 0xFF	; 255
    1340:	ff ef       	ldi	r31, 0xFF	; 255
    1342:	bf 07       	cpc	r27, r31
    1344:	89 f4       	brne	.+34     	; 0x1368 <new_line_handler+0xf0>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
    1346:	78 01       	movw	r14, r16
    1348:	8f e6       	ldi	r24, 0x6F	; 111
    134a:	e8 0e       	add	r14, r24
    134c:	f1 1c       	adc	r15, r1
    134e:	d7 01       	movw	r26, r14
    1350:	ed 91       	ld	r30, X+
    1352:	fc 91       	ld	r31, X
    1354:	8e e7       	ldi	r24, 0x7E	; 126
    1356:	92 e0       	ldi	r25, 0x02	; 2
    1358:	19 95       	eicall
		pThis->print (ENDL);
    135a:	d7 01       	movw	r26, r14
    135c:	ed 91       	ld	r30, X+
    135e:	fc 91       	ld	r31, X
    1360:	8c e7       	ldi	r24, 0x7C	; 124
    1362:	92 e0       	ldi	r25, 0x02	; 2
    1364:	19 95       	eicall
    1366:	10 c0       	rjmp	.+32     	; 0x1388 <new_line_handler+0x110>
	}
	if ((status > 0) && (pThis->execute != NULL))
    1368:	1a 16       	cp	r1, r26
    136a:	1b 06       	cpc	r1, r27
    136c:	6c f4       	brge	.+26     	; 0x1388 <new_line_handler+0x110>
    136e:	f8 01       	movw	r30, r16
    1370:	e5 59       	subi	r30, 0x95	; 149
    1372:	ff 4f       	sbci	r31, 0xFF	; 255
    1374:	01 90       	ld	r0, Z+
    1376:	f0 81       	ld	r31, Z
    1378:	e0 2d       	mov	r30, r0
    137a:	30 97       	sbiw	r30, 0x00	; 0
    137c:	29 f0       	breq	.+10     	; 0x1388 <new_line_handler+0x110>
		pThis->execute (status, tkn_arr);
    137e:	be 01       	movw	r22, r28
    1380:	6f 5f       	subi	r22, 0xFF	; 255
    1382:	7f 4f       	sbci	r23, 0xFF	; 255
    1384:	cd 01       	movw	r24, r26
    1386:	19 95       	eicall


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
	pThis->print (pThis->prompt_str);
    1388:	f8 01       	movw	r30, r16
    138a:	e1 59       	subi	r30, 0x91	; 145
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	01 90       	ld	r0, Z+
    1390:	f0 81       	ld	r31, Z
    1392:	e0 2d       	mov	r30, r0
    1394:	d8 01       	movw	r26, r16
    1396:	8d 91       	ld	r24, X+
    1398:	9c 91       	ld	r25, X
    139a:	19 95       	eicall
		pThis->print (ENDL);
	}
	if ((status > 0) && (pThis->execute != NULL))
		pThis->execute (status, tkn_arr);
	print_prompt (pThis);
	pThis->cmdlen = 0;
    139c:	f8 01       	movw	r30, r16
    139e:	e9 59       	subi	r30, 0x99	; 153
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	11 82       	std	Z+1, r1	; 0x01
    13a4:	10 82       	st	Z, r1
	pThis->cursor = 0;
    13a6:	32 96       	adiw	r30, 0x02	; 2
    13a8:	11 82       	std	Z+1, r1	; 0x01
    13aa:	10 82       	st	Z, r1
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
    13ac:	e7 56       	subi	r30, 0x67	; 103
    13ae:	f1 09       	sbc	r31, r1
    13b0:	85 e6       	ldi	r24, 0x65	; 101
    13b2:	df 01       	movw	r26, r30
    13b4:	1d 92       	st	X+, r1
    13b6:	8a 95       	dec	r24
    13b8:	e9 f7       	brne	.-6      	; 0x13b4 <new_line_handler+0x13c>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
#endif
}
    13ba:	60 96       	adiw	r28, 0x10	; 16
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	ff 90       	pop	r15
    13d0:	ef 90       	pop	r14
    13d2:	08 95       	ret

000013d4 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
    13d4:	cf 92       	push	r12
    13d6:	df 92       	push	r13
    13d8:	ef 92       	push	r14
    13da:	ff 92       	push	r15
    13dc:	0f 93       	push	r16
    13de:	1f 93       	push	r17
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	1f 92       	push	r1
    13e6:	1f 92       	push	r1
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	8c 01       	movw	r16, r24
    13ee:	7a 83       	std	Y+2, r23	; 0x02
    13f0:	69 83       	std	Y+1, r22	; 0x01
	if (pThis->escape) {
		if (escape_process(pThis, ch))
			pThis->escape = 0;
	} else {
#endif
		switch (ch) {
    13f2:	26 2f       	mov	r18, r22
    13f4:	37 2f       	mov	r19, r23
    13f6:	f9 01       	movw	r30, r18
    13f8:	31 97       	sbiw	r30, 0x01	; 1
    13fa:	ef 37       	cpi	r30, 0x7F	; 127
    13fc:	f1 05       	cpc	r31, r1
    13fe:	08 f0       	brcs	.+2      	; 0x1402 <microrl_insert_char+0x2e>
    1400:	91 c0       	rjmp	.+290    	; 0x1524 <microrl_insert_char+0x150>
    1402:	88 27       	eor	r24, r24
    1404:	ee 58       	subi	r30, 0x8E	; 142
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	8f 4f       	sbci	r24, 0xFF	; 255
    140a:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__tablejump2__>
				pThis->escape = 1;
#endif
			break;
			//-----------------------------------------------------
			case KEY_NAK: // ^U
					while (pThis->cursor > 0) {
    140e:	f8 01       	movw	r30, r16
    1410:	e7 59       	subi	r30, 0x97	; 151
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	40 81       	ld	r20, Z
    1416:	51 81       	ldd	r21, Z+1	; 0x01
    1418:	14 16       	cp	r1, r20
    141a:	15 06       	cpc	r1, r21
    141c:	24 f0       	brlt	.+8      	; 0x1426 <microrl_insert_char+0x52>
    141e:	0f c0       	rjmp	.+30     	; 0x143e <microrl_insert_char+0x6a>
#endif
		switch (ch) {
			//-----------------------------------------------------
#ifdef _ENDL_CR
			case KEY_CR:
				new_line_handler(pThis);
    1420:	c8 01       	movw	r24, r16
    1422:	2a df       	rcall	.-428    	; 0x1278 <new_line_handler>
			break;
    1424:	d5 c0       	rjmp	.+426    	; 0x15d0 <microrl_insert_char+0x1fc>
				pThis->escape = 1;
#endif
			break;
			//-----------------------------------------------------
			case KEY_NAK: // ^U
					while (pThis->cursor > 0) {
    1426:	78 01       	movw	r14, r16
    1428:	89 e6       	ldi	r24, 0x69	; 105
    142a:	e8 0e       	add	r14, r24
    142c:	f1 1c       	adc	r15, r1
					microrl_backspace (pThis);
    142e:	c8 01       	movw	r24, r16
    1430:	af de       	rcall	.-674    	; 0x1190 <microrl_backspace>
				pThis->escape = 1;
#endif
			break;
			//-----------------------------------------------------
			case KEY_NAK: // ^U
					while (pThis->cursor > 0) {
    1432:	d7 01       	movw	r26, r14
    1434:	4d 91       	ld	r20, X+
    1436:	5c 91       	ld	r21, X
    1438:	14 16       	cp	r1, r20
    143a:	15 06       	cpc	r1, r21
    143c:	c4 f3       	brlt	.-16     	; 0x142e <microrl_insert_char+0x5a>
					microrl_backspace (pThis);
				}
				terminal_print_line (pThis, 0, pThis->cursor);
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	c8 01       	movw	r24, r16
    1444:	41 de       	rcall	.-894    	; 0x10c8 <terminal_print_line>
			break;
    1446:	c4 c0       	rjmp	.+392    	; 0x15d0 <microrl_insert_char+0x1fc>
			//-----------------------------------------------------
			case KEY_VT:  // ^K
				pThis->print ("\033[K");
    1448:	f8 01       	movw	r30, r16
    144a:	e1 59       	subi	r30, 0x91	; 145
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	01 90       	ld	r0, Z+
    1450:	f0 81       	ld	r31, Z
    1452:	e0 2d       	mov	r30, r0
    1454:	80 e7       	ldi	r24, 0x70	; 112
    1456:	92 e0       	ldi	r25, 0x02	; 2
    1458:	19 95       	eicall
				pThis->cmdlen = pThis->cursor;
    145a:	f8 01       	movw	r30, r16
    145c:	e9 59       	subi	r30, 0x99	; 153
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	d8 01       	movw	r26, r16
    1462:	a7 59       	subi	r26, 0x97	; 151
    1464:	bf 4f       	sbci	r27, 0xFF	; 255
    1466:	8d 91       	ld	r24, X+
    1468:	9c 91       	ld	r25, X
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	80 83       	st	Z, r24
			break;
    146e:	b0 c0       	rjmp	.+352    	; 0x15d0 <microrl_insert_char+0x1fc>
			//-----------------------------------------------------
			case KEY_ENQ: // ^E
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
    1470:	68 01       	movw	r12, r16
    1472:	b7 e6       	ldi	r27, 0x67	; 103
    1474:	cb 0e       	add	r12, r27
    1476:	d1 1c       	adc	r13, r1
    1478:	78 01       	movw	r14, r16
    147a:	e9 e6       	ldi	r30, 0x69	; 105
    147c:	ee 0e       	add	r14, r30
    147e:	f1 1c       	adc	r15, r1
    1480:	d6 01       	movw	r26, r12
    1482:	6d 91       	ld	r22, X+
    1484:	7c 91       	ld	r23, X
    1486:	f7 01       	movw	r30, r14
    1488:	80 81       	ld	r24, Z
    148a:	91 81       	ldd	r25, Z+1	; 0x01
    148c:	68 1b       	sub	r22, r24
    148e:	79 0b       	sbc	r23, r25
    1490:	c8 01       	movw	r24, r16
    1492:	c3 dd       	rcall	.-1146   	; 0x101a <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
    1494:	d6 01       	movw	r26, r12
    1496:	8d 91       	ld	r24, X+
    1498:	9c 91       	ld	r25, X
    149a:	f7 01       	movw	r30, r14
    149c:	91 83       	std	Z+1, r25	; 0x01
    149e:	80 83       	st	Z, r24
			break;
    14a0:	97 c0       	rjmp	.+302    	; 0x15d0 <microrl_insert_char+0x1fc>
			//-----------------------------------------------------
			case KEY_SOH: // ^A
				terminal_reset_cursor (pThis);
    14a2:	c8 01       	movw	r24, r16
    14a4:	7d dd       	rcall	.-1286   	; 0xfa0 <terminal_reset_cursor>
				pThis->cursor = 0;
    14a6:	f8 01       	movw	r30, r16
    14a8:	e7 59       	subi	r30, 0x97	; 151
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	11 82       	std	Z+1, r1	; 0x01
    14ae:	10 82       	st	Z, r1
			break;
    14b0:	8f c0       	rjmp	.+286    	; 0x15d0 <microrl_insert_char+0x1fc>
			//-----------------------------------------------------
			case KEY_ACK: // ^F
			if (pThis->cursor < pThis->cmdlen) {
    14b2:	f8 01       	movw	r30, r16
    14b4:	e7 59       	subi	r30, 0x97	; 151
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	20 81       	ld	r18, Z
    14ba:	31 81       	ldd	r19, Z+1	; 0x01
    14bc:	32 97       	sbiw	r30, 0x02	; 2
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	28 17       	cp	r18, r24
    14c4:	39 07       	cpc	r19, r25
    14c6:	0c f0       	brlt	.+2      	; 0x14ca <microrl_insert_char+0xf6>
    14c8:	83 c0       	rjmp	.+262    	; 0x15d0 <microrl_insert_char+0x1fc>
				terminal_move_cursor (pThis, 1);
    14ca:	61 e0       	ldi	r22, 0x01	; 1
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	c8 01       	movw	r24, r16
    14d0:	a4 dd       	rcall	.-1208   	; 0x101a <terminal_move_cursor>
				pThis->cursor++;
    14d2:	f8 01       	movw	r30, r16
    14d4:	e7 59       	subi	r30, 0x97	; 151
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	80 81       	ld	r24, Z
    14da:	91 81       	ldd	r25, Z+1	; 0x01
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	91 83       	std	Z+1, r25	; 0x01
    14e0:	80 83       	st	Z, r24
    14e2:	76 c0       	rjmp	.+236    	; 0x15d0 <microrl_insert_char+0x1fc>
			}
			break;
			//-----------------------------------------------------
			case KEY_STX: // ^B
			if (pThis->cursor) {
    14e4:	f8 01       	movw	r30, r16
    14e6:	e7 59       	subi	r30, 0x97	; 151
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	89 2b       	or	r24, r25
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <microrl_insert_char+0x120>
    14f2:	6e c0       	rjmp	.+220    	; 0x15d0 <microrl_insert_char+0x1fc>
				terminal_move_cursor (pThis, -1);
    14f4:	6f ef       	ldi	r22, 0xFF	; 255
    14f6:	7f ef       	ldi	r23, 0xFF	; 255
    14f8:	c8 01       	movw	r24, r16
    14fa:	8f dd       	rcall	.-1250   	; 0x101a <terminal_move_cursor>
				pThis->cursor--;
    14fc:	f8 01       	movw	r30, r16
    14fe:	e7 59       	subi	r30, 0x97	; 151
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	80 81       	ld	r24, Z
    1504:	91 81       	ldd	r25, Z+1	; 0x01
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	91 83       	std	Z+1, r25	; 0x01
    150a:	80 83       	st	Z, r24
    150c:	61 c0       	rjmp	.+194    	; 0x15d0 <microrl_insert_char+0x1fc>
#endif
			break;
			//-----------------------------------------------------
			case KEY_DEL: // Backspace
			case KEY_BS: // ^U
				microrl_backspace (pThis);
    150e:	c8 01       	movw	r24, r16
    1510:	3f de       	rcall	.-898    	; 0x1190 <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
    1512:	f8 01       	movw	r30, r16
    1514:	e7 59       	subi	r30, 0x97	; 151
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	60 81       	ld	r22, Z
    151a:	71 81       	ldd	r23, Z+1	; 0x01
    151c:	ab 01       	movw	r20, r22
    151e:	c8 01       	movw	r24, r16
    1520:	d3 dd       	rcall	.-1114   	; 0x10c8 <terminal_print_line>
			break;
    1522:	56 c0       	rjmp	.+172    	; 0x15d0 <microrl_insert_char+0x1fc>
				pThis->sigint();
			break;
#endif
			//-----------------------------------------------------
			default:
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
    1524:	20 32       	cpi	r18, 0x20	; 32
    1526:	31 05       	cpc	r19, r1
    1528:	41 f4       	brne	.+16     	; 0x153a <microrl_insert_char+0x166>
    152a:	f8 01       	movw	r30, r16
    152c:	e9 59       	subi	r30, 0x99	; 153
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	80 81       	ld	r24, Z
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	89 2b       	or	r24, r25
    1536:	29 f4       	brne	.+10     	; 0x1542 <microrl_insert_char+0x16e>
    1538:	4b c0       	rjmp	.+150    	; 0x15d0 <microrl_insert_char+0x1fc>
    153a:	20 32       	cpi	r18, 0x20	; 32
    153c:	31 05       	cpc	r19, r1
    153e:	0c f4       	brge	.+2      	; 0x1542 <microrl_insert_char+0x16e>
    1540:	47 c0       	rjmp	.+142    	; 0x15d0 <microrl_insert_char+0x1fc>
//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
    1542:	f8 01       	movw	r30, r16
    1544:	e9 59       	subi	r30, 0x99	; 153
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	40 81       	ld	r20, Z
    154a:	51 81       	ldd	r21, Z+1	; 0x01
    154c:	ca 01       	movw	r24, r20
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	85 36       	cpi	r24, 0x65	; 101
    1552:	91 05       	cpc	r25, r1
    1554:	ec f5       	brge	.+122    	; 0x15d0 <microrl_insert_char+0x1fc>
		memmove (pThis->cmdline + pThis->cursor + len,
						 pThis->cmdline + pThis->cursor,
						 pThis->cmdlen - pThis->cursor);
    1556:	78 01       	movw	r14, r16
    1558:	f9 e6       	ldi	r31, 0x69	; 105
    155a:	ef 0e       	add	r14, r31
    155c:	f1 1c       	adc	r15, r1
    155e:	d7 01       	movw	r26, r14
    1560:	8d 91       	ld	r24, X+
    1562:	9c 91       	ld	r25, X
    1564:	48 1b       	sub	r20, r24
    1566:	59 0b       	sbc	r21, r25
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
		memmove (pThis->cmdline + pThis->cursor + len,
    1568:	bc 01       	movw	r22, r24
    156a:	6e 5f       	subi	r22, 0xFE	; 254
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	60 0f       	add	r22, r16
    1570:	71 1f       	adc	r23, r17
    1572:	03 96       	adiw	r24, 0x03	; 3
    1574:	80 0f       	add	r24, r16
    1576:	91 1f       	adc	r25, r17
    1578:	0e 94 49 18 	call	0x3092	; 0x3092 <memmove>
						 pThis->cmdline + pThis->cursor,
						 pThis->cmdlen - pThis->cursor);
		for (i = 0; i < len; i++) {
			pThis->cmdline [pThis->cursor + i] = text [i];
    157c:	d7 01       	movw	r26, r14
    157e:	ed 91       	ld	r30, X+
    1580:	fc 91       	ld	r31, X
    1582:	89 81       	ldd	r24, Y+1	; 0x01
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
    1584:	80 32       	cpi	r24, 0x20	; 32
    1586:	21 f0       	breq	.+8      	; 0x1590 <microrl_insert_char+0x1bc>
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
		memmove (pThis->cmdline + pThis->cursor + len,
						 pThis->cmdline + pThis->cursor,
						 pThis->cmdlen - pThis->cursor);
		for (i = 0; i < len; i++) {
			pThis->cmdline [pThis->cursor + i] = text [i];
    1588:	e0 0f       	add	r30, r16
    158a:	f1 1f       	adc	r31, r17
    158c:	82 83       	std	Z+2, r24	; 0x02
    158e:	03 c0       	rjmp	.+6      	; 0x1596 <microrl_insert_char+0x1c2>
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
				pThis->cmdline [pThis->cursor + i] = 0;
    1590:	e0 0f       	add	r30, r16
    1592:	f1 1f       	adc	r31, r17
    1594:	12 82       	std	Z+2, r1	; 0x02
			}
		}
		pThis->cursor += len;
    1596:	f8 01       	movw	r30, r16
    1598:	e7 59       	subi	r30, 0x97	; 151
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	80 81       	ld	r24, Z
    159e:	91 81       	ldd	r25, Z+1	; 0x01
    15a0:	01 96       	adiw	r24, 0x01	; 1
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	80 83       	st	Z, r24
		pThis->cmdlen += len;
    15a6:	d8 01       	movw	r26, r16
    15a8:	a9 59       	subi	r26, 0x99	; 153
    15aa:	bf 4f       	sbci	r27, 0xFF	; 255
    15ac:	8d 91       	ld	r24, X+
    15ae:	9c 91       	ld	r25, X
    15b0:	11 97       	sbiw	r26, 0x01	; 1
    15b2:	01 96       	adiw	r24, 0x01	; 1
    15b4:	8d 93       	st	X+, r24
    15b6:	9c 93       	st	X, r25
		pThis->cmdline [pThis->cmdlen] = '\0';
    15b8:	d8 01       	movw	r26, r16
    15ba:	a8 0f       	add	r26, r24
    15bc:	b9 1f       	adc	r27, r25
    15be:	12 96       	adiw	r26, 0x02	; 2
    15c0:	1c 92       	st	X, r1
			//-----------------------------------------------------
			default:
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
				break;
			if (microrl_insert_text (pThis, (char*)&ch, 1))
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
    15c2:	40 81       	ld	r20, Z
    15c4:	51 81       	ldd	r21, Z+1	; 0x01
    15c6:	ba 01       	movw	r22, r20
    15c8:	61 50       	subi	r22, 0x01	; 1
    15ca:	71 09       	sbc	r23, r1
    15cc:	c8 01       	movw	r24, r16
    15ce:	7c dd       	rcall	.-1288   	; 0x10c8 <terminal_print_line>
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	1f 91       	pop	r17
    15da:	0f 91       	pop	r16
    15dc:	ff 90       	pop	r15
    15de:	ef 90       	pop	r14
    15e0:	df 90       	pop	r13
    15e2:	cf 90       	pop	r12
    15e4:	08 95       	ret

000015e6 <MFRC522_init>:
	if (result != STATUS_OK) {
		return result;
	}

	return STATUS_OK;
}
    15e6:	20 9a       	sbi	0x04, 0	; 4
    15e8:	28 9a       	sbi	0x05, 0	; 5
    15ea:	ea e0       	ldi	r30, 0x0A	; 10
    15ec:	f1 e0       	ldi	r31, 0x01	; 1
    15ee:	80 81       	ld	r24, Z
    15f0:	81 60       	ori	r24, 0x01	; 1
    15f2:	80 83       	st	Z, r24
    15f4:	eb e0       	ldi	r30, 0x0B	; 11
    15f6:	f1 e0       	ldi	r31, 0x01	; 1
    15f8:	80 81       	ld	r24, Z
    15fa:	81 60       	ori	r24, 0x01	; 1
    15fc:	80 83       	st	Z, r24
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	56 c4       	rjmp	.+2220   	; 0x1eae <spi_init>
    1602:	08 95       	ret

00001604 <PCD_WriteRegister>:
    1604:	cf 93       	push	r28
    1606:	c6 2f       	mov	r28, r22
    1608:	28 98       	cbi	0x05, 0	; 5
    160a:	8e 77       	andi	r24, 0x7E	; 126
    160c:	5f d4       	rcall	.+2238   	; 0x1ecc <spi_rw>
    160e:	8c 2f       	mov	r24, r28
    1610:	5d d4       	rcall	.+2234   	; 0x1ecc <spi_rw>
    1612:	28 9a       	sbi	0x05, 0	; 5
    1614:	cf 91       	pop	r28
    1616:	08 95       	ret

00001618 <PCD_WriteRegister2>:
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	16 2f       	mov	r17, r22
    1626:	7a 01       	movw	r14, r20
    1628:	28 98       	cbi	0x05, 0	; 5
    162a:	8e 77       	andi	r24, 0x7E	; 126
    162c:	4f d4       	rcall	.+2206   	; 0x1ecc <spi_rw>
    162e:	11 23       	and	r17, r17
    1630:	69 f0       	breq	.+26     	; 0x164c <PCD_WriteRegister2+0x34>
    1632:	e7 01       	movw	r28, r14
    1634:	11 50       	subi	r17, 0x01	; 1
    1636:	01 2f       	mov	r16, r17
    1638:	10 e0       	ldi	r17, 0x00	; 0
    163a:	0f 5f       	subi	r16, 0xFF	; 255
    163c:	1f 4f       	sbci	r17, 0xFF	; 255
    163e:	0e 0d       	add	r16, r14
    1640:	1f 1d       	adc	r17, r15
    1642:	89 91       	ld	r24, Y+
    1644:	43 d4       	rcall	.+2182   	; 0x1ecc <spi_rw>
    1646:	c0 17       	cp	r28, r16
    1648:	d1 07       	cpc	r29, r17
    164a:	d9 f7       	brne	.-10     	; 0x1642 <PCD_WriteRegister2+0x2a>
    164c:	28 9a       	sbi	0x05, 0	; 5
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	08 95       	ret

0000165c <PCD_ReadRegister>:
    165c:	28 98       	cbi	0x05, 0	; 5
    165e:	8e 77       	andi	r24, 0x7E	; 126
    1660:	80 68       	ori	r24, 0x80	; 128
    1662:	34 d4       	rcall	.+2152   	; 0x1ecc <spi_rw>
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	32 d4       	rcall	.+2148   	; 0x1ecc <spi_rw>
    1668:	28 9a       	sbi	0x05, 0	; 5
    166a:	08 95       	ret

0000166c <PCD_ReadRegister2>:
    166c:	7f 92       	push	r7
    166e:	8f 92       	push	r8
    1670:	9f 92       	push	r9
    1672:	af 92       	push	r10
    1674:	bf 92       	push	r11
    1676:	cf 92       	push	r12
    1678:	df 92       	push	r13
    167a:	ef 92       	push	r14
    167c:	ff 92       	push	r15
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	66 23       	and	r22, r22
    1688:	09 f4       	brne	.+2      	; 0x168c <PCD_ReadRegister2+0x20>
    168a:	44 c0       	rjmp	.+136    	; 0x1714 <PCD_ReadRegister2+0xa8>
    168c:	e2 2e       	mov	r14, r18
    168e:	6a 01       	movw	r12, r20
    1690:	8e 77       	andi	r24, 0x7E	; 126
    1692:	80 68       	ori	r24, 0x80	; 128
    1694:	f8 2e       	mov	r15, r24
    1696:	28 98       	cbi	0x05, 0	; 5
    1698:	df ef       	ldi	r29, 0xFF	; 255
    169a:	d6 0f       	add	r29, r22
    169c:	17 d4       	rcall	.+2094   	; 0x1ecc <spi_rw>
    169e:	dd 23       	and	r29, r29
    16a0:	89 f1       	breq	.+98     	; 0x1704 <PCD_ReadRegister2+0x98>
    16a2:	86 01       	movw	r16, r12
    16a4:	c0 e0       	ldi	r28, 0x00	; 0
    16a6:	91 2c       	mov	r9, r1
    16a8:	8e 2c       	mov	r8, r14
    16aa:	aa 24       	eor	r10, r10
    16ac:	a3 94       	inc	r10
    16ae:	b1 2c       	mov	r11, r1
    16b0:	c1 11       	cpse	r28, r1
    16b2:	1f c0       	rjmp	.+62     	; 0x16f2 <PCD_ReadRegister2+0x86>
    16b4:	ee 20       	and	r14, r14
    16b6:	e9 f0       	breq	.+58     	; 0x16f2 <PCD_ReadRegister2+0x86>
    16b8:	87 e0       	ldi	r24, 0x07	; 7
    16ba:	8e 15       	cp	r24, r14
    16bc:	70 f0       	brcs	.+28     	; 0x16da <PCD_ReadRegister2+0x6e>
    16be:	88 2d       	mov	r24, r8
    16c0:	79 2c       	mov	r7, r9
    16c2:	95 01       	movw	r18, r10
    16c4:	08 2e       	mov	r0, r24
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <PCD_ReadRegister2+0x60>
    16c8:	22 0f       	add	r18, r18
    16ca:	33 1f       	adc	r19, r19
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <PCD_ReadRegister2+0x5c>
    16d0:	72 2a       	or	r7, r18
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	88 30       	cpi	r24, 0x08	; 8
    16d6:	a9 f7       	brne	.-22     	; 0x16c2 <PCD_ReadRegister2+0x56>
    16d8:	01 c0       	rjmp	.+2      	; 0x16dc <PCD_ReadRegister2+0x70>
    16da:	79 2c       	mov	r7, r9
    16dc:	8f 2d       	mov	r24, r15
    16de:	f6 d3       	rcall	.+2028   	; 0x1ecc <spi_rw>
    16e0:	27 2d       	mov	r18, r7
    16e2:	20 95       	com	r18
    16e4:	f6 01       	movw	r30, r12
    16e6:	90 81       	ld	r25, Z
    16e8:	92 23       	and	r25, r18
    16ea:	87 21       	and	r24, r7
    16ec:	89 2b       	or	r24, r25
    16ee:	80 83       	st	Z, r24
    16f0:	04 c0       	rjmp	.+8      	; 0x16fa <PCD_ReadRegister2+0x8e>
    16f2:	8f 2d       	mov	r24, r15
    16f4:	eb d3       	rcall	.+2006   	; 0x1ecc <spi_rw>
    16f6:	f8 01       	movw	r30, r16
    16f8:	80 83       	st	Z, r24
    16fa:	cf 5f       	subi	r28, 0xFF	; 255
    16fc:	0f 5f       	subi	r16, 0xFF	; 255
    16fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1700:	dc 13       	cpse	r29, r28
    1702:	d6 cf       	rjmp	.-84     	; 0x16b0 <PCD_ReadRegister2+0x44>
    1704:	c6 01       	movw	r24, r12
    1706:	8d 0f       	add	r24, r29
    1708:	91 1d       	adc	r25, r1
    170a:	ec 01       	movw	r28, r24
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	de d3       	rcall	.+1980   	; 0x1ecc <spi_rw>
    1710:	88 83       	st	Y, r24
    1712:	28 9a       	sbi	0x05, 0	; 5
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	df 90       	pop	r13
    1722:	cf 90       	pop	r12
    1724:	bf 90       	pop	r11
    1726:	af 90       	pop	r10
    1728:	9f 90       	pop	r9
    172a:	8f 90       	pop	r8
    172c:	7f 90       	pop	r7
    172e:	08 95       	ret

00001730 <PCD_SetRegisterBitMask>:
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	d8 2f       	mov	r29, r24
    1736:	c6 2f       	mov	r28, r22
    1738:	91 df       	rcall	.-222    	; 0x165c <PCD_ReadRegister>
    173a:	68 2f       	mov	r22, r24
    173c:	6c 2b       	or	r22, r28
    173e:	8d 2f       	mov	r24, r29
    1740:	61 df       	rcall	.-318    	; 0x1604 <PCD_WriteRegister>
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	08 95       	ret

00001748 <PCD_ClearRegisterBitMask>:
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	d8 2f       	mov	r29, r24
    174e:	c6 2f       	mov	r28, r22
    1750:	85 df       	rcall	.-246    	; 0x165c <PCD_ReadRegister>
    1752:	c0 95       	com	r28
    1754:	68 2f       	mov	r22, r24
    1756:	6c 23       	and	r22, r28
    1758:	8d 2f       	mov	r24, r29
    175a:	54 df       	rcall	.-344    	; 0x1604 <PCD_WriteRegister>
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	08 95       	ret

00001762 <PCD_CalculateCRC>:
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	7c 01       	movw	r14, r24
    1770:	c6 2f       	mov	r28, r22
    1772:	8a 01       	movw	r16, r20
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	82 e0       	ldi	r24, 0x02	; 2
    1778:	45 df       	rcall	.-374    	; 0x1604 <PCD_WriteRegister>
    177a:	64 e0       	ldi	r22, 0x04	; 4
    177c:	8a e0       	ldi	r24, 0x0A	; 10
    177e:	42 df       	rcall	.-380    	; 0x1604 <PCD_WriteRegister>
    1780:	60 e8       	ldi	r22, 0x80	; 128
    1782:	84 e1       	ldi	r24, 0x14	; 20
    1784:	d5 df       	rcall	.-86     	; 0x1730 <PCD_SetRegisterBitMask>
    1786:	a7 01       	movw	r20, r14
    1788:	6c 2f       	mov	r22, r28
    178a:	82 e1       	ldi	r24, 0x12	; 18
    178c:	45 df       	rcall	.-374    	; 0x1618 <PCD_WriteRegister2>
    178e:	63 e0       	ldi	r22, 0x03	; 3
    1790:	82 e0       	ldi	r24, 0x02	; 2
    1792:	38 df       	rcall	.-400    	; 0x1604 <PCD_WriteRegister>
    1794:	c8 e8       	ldi	r28, 0x88	; 136
    1796:	d3 e1       	ldi	r29, 0x13	; 19
    1798:	8a e0       	ldi	r24, 0x0A	; 10
    179a:	60 df       	rcall	.-320    	; 0x165c <PCD_ReadRegister>
    179c:	82 fd       	sbrc	r24, 2
    179e:	03 c0       	rjmp	.+6      	; 0x17a6 <PCD_CalculateCRC+0x44>
    17a0:	21 97       	sbiw	r28, 0x01	; 1
    17a2:	d1 f7       	brne	.-12     	; 0x1798 <PCD_CalculateCRC+0x36>
    17a4:	0d c0       	rjmp	.+26     	; 0x17c0 <PCD_CalculateCRC+0x5e>
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	82 e0       	ldi	r24, 0x02	; 2
    17aa:	2c df       	rcall	.-424    	; 0x1604 <PCD_WriteRegister>
    17ac:	84 e4       	ldi	r24, 0x44	; 68
    17ae:	56 df       	rcall	.-340    	; 0x165c <PCD_ReadRegister>
    17b0:	f8 01       	movw	r30, r16
    17b2:	80 83       	st	Z, r24
    17b4:	82 e4       	ldi	r24, 0x42	; 66
    17b6:	52 df       	rcall	.-348    	; 0x165c <PCD_ReadRegister>
    17b8:	f8 01       	movw	r30, r16
    17ba:	81 83       	std	Z+1, r24	; 0x01
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <PCD_CalculateCRC+0x60>
    17c0:	84 e0       	ldi	r24, 0x04	; 4
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	ff 90       	pop	r15
    17cc:	ef 90       	pop	r14
    17ce:	08 95       	ret

000017d0 <PCD_Reset>:
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	6f e0       	ldi	r22, 0x0F	; 15
    17d6:	82 e0       	ldi	r24, 0x02	; 2
    17d8:	15 df       	rcall	.-470    	; 0x1604 <PCD_WriteRegister>
    17da:	83 ed       	ldi	r24, 0xD3	; 211
    17dc:	90 e3       	ldi	r25, 0x30	; 48
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <PCD_Reset+0xe>
    17e2:	00 c0       	rjmp	.+0      	; 0x17e4 <PCD_Reset+0x14>
    17e4:	00 00       	nop
    17e6:	c8 e8       	ldi	r28, 0x88	; 136
    17e8:	d3 e1       	ldi	r29, 0x13	; 19
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <PCD_Reset+0x20>
    17ec:	21 97       	sbiw	r28, 0x01	; 1
    17ee:	31 f0       	breq	.+12     	; 0x17fc <PCD_Reset+0x2c>
    17f0:	82 e0       	ldi	r24, 0x02	; 2
    17f2:	34 df       	rcall	.-408    	; 0x165c <PCD_ReadRegister>
    17f4:	84 fd       	sbrc	r24, 4
    17f6:	fa cf       	rjmp	.-12     	; 0x17ec <PCD_Reset+0x1c>
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	01 c0       	rjmp	.+2      	; 0x17fe <PCD_Reset+0x2e>
    17fc:	84 e0       	ldi	r24, 0x04	; 4
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	08 95       	ret

00001804 <PCD_AntennaOn>:
    1804:	88 e2       	ldi	r24, 0x28	; 40
    1806:	2a df       	rcall	.-428    	; 0x165c <PCD_ReadRegister>
    1808:	98 2f       	mov	r25, r24
    180a:	93 70       	andi	r25, 0x03	; 3
    180c:	93 30       	cpi	r25, 0x03	; 3
    180e:	21 f0       	breq	.+8      	; 0x1818 <PCD_AntennaOn+0x14>
    1810:	68 2f       	mov	r22, r24
    1812:	63 60       	ori	r22, 0x03	; 3
    1814:	88 e2       	ldi	r24, 0x28	; 40
    1816:	f6 ce       	rjmp	.-532    	; 0x1604 <PCD_WriteRegister>
    1818:	08 95       	ret

0000181a <PCD_Init>:
    181a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    181e:	80 fd       	sbrc	r24, 0
    1820:	0c c0       	rjmp	.+24     	; 0x183a <PCD_Init+0x20>
    1822:	eb e0       	ldi	r30, 0x0B	; 11
    1824:	f1 e0       	ldi	r31, 0x01	; 1
    1826:	80 81       	ld	r24, Z
    1828:	81 60       	ori	r24, 0x01	; 1
    182a:	80 83       	st	Z, r24
    182c:	83 ed       	ldi	r24, 0xD3	; 211
    182e:	90 e3       	ldi	r25, 0x30	; 48
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <PCD_Init+0x16>
    1834:	00 c0       	rjmp	.+0      	; 0x1836 <PCD_Init+0x1c>
    1836:	00 00       	nop
    1838:	03 c0       	rjmp	.+6      	; 0x1840 <PCD_Init+0x26>
    183a:	ca df       	rcall	.-108    	; 0x17d0 <PCD_Reset>
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	a9 f4       	brne	.+42     	; 0x186a <PCD_Init+0x50>
    1840:	60 e8       	ldi	r22, 0x80	; 128
    1842:	84 e5       	ldi	r24, 0x54	; 84
    1844:	df de       	rcall	.-578    	; 0x1604 <PCD_WriteRegister>
    1846:	69 ea       	ldi	r22, 0xA9	; 169
    1848:	86 e5       	ldi	r24, 0x56	; 86
    184a:	dc de       	rcall	.-584    	; 0x1604 <PCD_WriteRegister>
    184c:	63 e0       	ldi	r22, 0x03	; 3
    184e:	88 e5       	ldi	r24, 0x58	; 88
    1850:	d9 de       	rcall	.-590    	; 0x1604 <PCD_WriteRegister>
    1852:	68 ee       	ldi	r22, 0xE8	; 232
    1854:	8a e5       	ldi	r24, 0x5A	; 90
    1856:	d6 de       	rcall	.-596    	; 0x1604 <PCD_WriteRegister>
    1858:	60 e4       	ldi	r22, 0x40	; 64
    185a:	8a e2       	ldi	r24, 0x2A	; 42
    185c:	d3 de       	rcall	.-602    	; 0x1604 <PCD_WriteRegister>
    185e:	6d e3       	ldi	r22, 0x3D	; 61
    1860:	82 e2       	ldi	r24, 0x22	; 34
    1862:	d0 de       	rcall	.-608    	; 0x1604 <PCD_WriteRegister>
    1864:	cf df       	rcall	.-98     	; 0x1804 <PCD_AntennaOn>
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	08 95       	ret
    186a:	84 e0       	ldi	r24, 0x04	; 4
    186c:	08 95       	ret

0000186e <PCD_CommunicateWithPICC>:
    186e:	4f 92       	push	r4
    1870:	5f 92       	push	r5
    1872:	6f 92       	push	r6
    1874:	7f 92       	push	r7
    1876:	8f 92       	push	r8
    1878:	9f 92       	push	r9
    187a:	af 92       	push	r10
    187c:	bf 92       	push	r11
    187e:	cf 92       	push	r12
    1880:	df 92       	push	r13
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	1f 92       	push	r1
    1890:	1f 92       	push	r1
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	98 2e       	mov	r9, r24
    1898:	b6 2e       	mov	r11, r22
    189a:	2a 01       	movw	r4, r20
    189c:	72 2e       	mov	r7, r18
    189e:	c1 14       	cp	r12, r1
    18a0:	d1 04       	cpc	r13, r1
    18a2:	19 f0       	breq	.+6      	; 0x18aa <PCD_CommunicateWithPICC+0x3c>
    18a4:	f6 01       	movw	r30, r12
    18a6:	60 80       	ld	r6, Z
    18a8:	01 c0       	rjmp	.+2      	; 0x18ac <PCD_CommunicateWithPICC+0x3e>
    18aa:	61 2c       	mov	r6, r1
    18ac:	f0 e1       	ldi	r31, 0x10	; 16
    18ae:	af 9e       	mul	r10, r31
    18b0:	60 0c       	add	r6, r0
    18b2:	11 24       	eor	r1, r1
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	a5 de       	rcall	.-694    	; 0x1604 <PCD_WriteRegister>
    18ba:	6f e7       	ldi	r22, 0x7F	; 127
    18bc:	88 e0       	ldi	r24, 0x08	; 8
    18be:	a2 de       	rcall	.-700    	; 0x1604 <PCD_WriteRegister>
    18c0:	60 e8       	ldi	r22, 0x80	; 128
    18c2:	84 e1       	ldi	r24, 0x14	; 20
    18c4:	35 df       	rcall	.-406    	; 0x1730 <PCD_SetRegisterBitMask>
    18c6:	a2 01       	movw	r20, r4
    18c8:	67 2d       	mov	r22, r7
    18ca:	82 e1       	ldi	r24, 0x12	; 18
    18cc:	a5 de       	rcall	.-694    	; 0x1618 <PCD_WriteRegister2>
    18ce:	66 2d       	mov	r22, r6
    18d0:	8a e1       	ldi	r24, 0x1A	; 26
    18d2:	98 de       	rcall	.-720    	; 0x1604 <PCD_WriteRegister>
    18d4:	69 2d       	mov	r22, r9
    18d6:	82 e0       	ldi	r24, 0x02	; 2
    18d8:	95 de       	rcall	.-726    	; 0x1604 <PCD_WriteRegister>
    18da:	8c e0       	ldi	r24, 0x0C	; 12
    18dc:	98 12       	cpse	r9, r24
    18de:	03 c0       	rjmp	.+6      	; 0x18e6 <PCD_CommunicateWithPICC+0x78>
    18e0:	60 e8       	ldi	r22, 0x80	; 128
    18e2:	8a e1       	ldi	r24, 0x1A	; 26
    18e4:	25 df       	rcall	.-438    	; 0x1730 <PCD_SetRegisterBitMask>
    18e6:	0f 2e       	mov	r0, r31
    18e8:	f0 ed       	ldi	r31, 0xD0	; 208
    18ea:	4f 2e       	mov	r4, r31
    18ec:	f7 e0       	ldi	r31, 0x07	; 7
    18ee:	5f 2e       	mov	r5, r31
    18f0:	f0 2d       	mov	r31, r0
    18f2:	88 e0       	ldi	r24, 0x08	; 8
    18f4:	b3 de       	rcall	.-666    	; 0x165c <PCD_ReadRegister>
    18f6:	98 2f       	mov	r25, r24
    18f8:	9b 21       	and	r25, r11
    18fa:	39 f4       	brne	.+14     	; 0x190a <PCD_CommunicateWithPICC+0x9c>
    18fc:	80 fd       	sbrc	r24, 0
    18fe:	6a c0       	rjmp	.+212    	; 0x19d4 <PCD_CommunicateWithPICC+0x166>
    1900:	e1 e0       	ldi	r30, 0x01	; 1
    1902:	4e 1a       	sub	r4, r30
    1904:	51 08       	sbc	r5, r1
    1906:	a9 f7       	brne	.-22     	; 0x18f2 <PCD_CommunicateWithPICC+0x84>
    1908:	67 c0       	rjmp	.+206    	; 0x19d8 <PCD_CommunicateWithPICC+0x16a>
    190a:	8c e0       	ldi	r24, 0x0C	; 12
    190c:	a7 de       	rcall	.-690    	; 0x165c <PCD_ReadRegister>
    190e:	b8 2e       	mov	r11, r24
    1910:	83 71       	andi	r24, 0x13	; 19
    1912:	09 f0       	breq	.+2      	; 0x1916 <PCD_CommunicateWithPICC+0xa8>
    1914:	63 c0       	rjmp	.+198    	; 0x19dc <PCD_CommunicateWithPICC+0x16e>
    1916:	01 15       	cp	r16, r1
    1918:	11 05       	cpc	r17, r1
    191a:	d1 f0       	breq	.+52     	; 0x1950 <PCD_CommunicateWithPICC+0xe2>
    191c:	e1 14       	cp	r14, r1
    191e:	f1 04       	cpc	r15, r1
    1920:	b9 f0       	breq	.+46     	; 0x1950 <PCD_CommunicateWithPICC+0xe2>
    1922:	84 e1       	ldi	r24, 0x14	; 20
    1924:	9b de       	rcall	.-714    	; 0x165c <PCD_ReadRegister>
    1926:	f7 01       	movw	r30, r14
    1928:	90 81       	ld	r25, Z
    192a:	98 17       	cp	r25, r24
    192c:	08 f4       	brcc	.+2      	; 0x1930 <PCD_CommunicateWithPICC+0xc2>
    192e:	58 c0       	rjmp	.+176    	; 0x19e0 <PCD_CommunicateWithPICC+0x172>
    1930:	80 83       	st	Z, r24
    1932:	2a 2d       	mov	r18, r10
    1934:	a8 01       	movw	r20, r16
    1936:	68 2f       	mov	r22, r24
    1938:	82 e1       	ldi	r24, 0x12	; 18
    193a:	98 de       	rcall	.-720    	; 0x166c <PCD_ReadRegister2>
    193c:	88 e1       	ldi	r24, 0x18	; 24
    193e:	8e de       	rcall	.-740    	; 0x165c <PCD_ReadRegister>
    1940:	87 70       	andi	r24, 0x07	; 7
    1942:	c1 14       	cp	r12, r1
    1944:	d1 04       	cpc	r13, r1
    1946:	09 f4       	brne	.+2      	; 0x194a <PCD_CommunicateWithPICC+0xdc>
    1948:	57 c0       	rjmp	.+174    	; 0x19f8 <PCD_CommunicateWithPICC+0x18a>
    194a:	f6 01       	movw	r30, r12
    194c:	80 83       	st	Z, r24
    194e:	54 c0       	rjmp	.+168    	; 0x19f8 <PCD_CommunicateWithPICC+0x18a>
    1950:	b3 fc       	sbrc	r11, 3
    1952:	48 c0       	rjmp	.+144    	; 0x19e4 <PCD_CommunicateWithPICC+0x176>
    1954:	01 15       	cp	r16, r1
    1956:	11 05       	cpc	r17, r1
    1958:	09 f4       	brne	.+2      	; 0x195c <PCD_CommunicateWithPICC+0xee>
    195a:	46 c0       	rjmp	.+140    	; 0x19e8 <PCD_CommunicateWithPICC+0x17a>
    195c:	e1 14       	cp	r14, r1
    195e:	f1 04       	cpc	r15, r1
    1960:	09 f4       	brne	.+2      	; 0x1964 <PCD_CommunicateWithPICC+0xf6>
    1962:	44 c0       	rjmp	.+136    	; 0x19ec <PCD_CommunicateWithPICC+0x17e>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	88 20       	and	r8, r8
    1968:	09 f4       	brne	.+2      	; 0x196c <PCD_CommunicateWithPICC+0xfe>
    196a:	42 c0       	rjmp	.+132    	; 0x19f0 <PCD_CommunicateWithPICC+0x182>
    196c:	f7 01       	movw	r30, r14
    196e:	90 81       	ld	r25, Z
    1970:	91 30       	cpi	r25, 0x01	; 1
    1972:	21 f4       	brne	.+8      	; 0x197c <PCD_CommunicateWithPICC+0x10e>
    1974:	84 30       	cpi	r24, 0x04	; 4
    1976:	21 f1       	breq	.+72     	; 0x19c0 <PCD_CommunicateWithPICC+0x152>
    1978:	88 e0       	ldi	r24, 0x08	; 8
    197a:	41 c0       	rjmp	.+130    	; 0x19fe <PCD_CommunicateWithPICC+0x190>
    197c:	92 30       	cpi	r25, 0x02	; 2
    197e:	10 f1       	brcs	.+68     	; 0x19c4 <PCD_CommunicateWithPICC+0x156>
    1980:	81 11       	cpse	r24, r1
    1982:	22 c0       	rjmp	.+68     	; 0x19c8 <PCD_CommunicateWithPICC+0x15a>
    1984:	6e ef       	ldi	r22, 0xFE	; 254
    1986:	69 0f       	add	r22, r25
    1988:	ae 01       	movw	r20, r28
    198a:	4f 5f       	subi	r20, 0xFF	; 255
    198c:	5f 4f       	sbci	r21, 0xFF	; 255
    198e:	c8 01       	movw	r24, r16
    1990:	e8 de       	rcall	.-560    	; 0x1762 <PCD_CalculateCRC>
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	a1 f5       	brne	.+104    	; 0x19fe <PCD_CommunicateWithPICC+0x190>
    1996:	f7 01       	movw	r30, r14
    1998:	80 81       	ld	r24, Z
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	f8 01       	movw	r30, r16
    199e:	e8 0f       	add	r30, r24
    19a0:	f9 1f       	adc	r31, r25
    19a2:	32 97       	sbiw	r30, 0x02	; 2
    19a4:	30 81       	ld	r19, Z
    19a6:	29 81       	ldd	r18, Y+1	; 0x01
    19a8:	32 13       	cpse	r19, r18
    19aa:	10 c0       	rjmp	.+32     	; 0x19cc <PCD_CommunicateWithPICC+0x15e>
    19ac:	80 0f       	add	r24, r16
    19ae:	91 1f       	adc	r25, r17
    19b0:	fc 01       	movw	r30, r24
    19b2:	31 97       	sbiw	r30, 0x01	; 1
    19b4:	90 81       	ld	r25, Z
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	98 13       	cpse	r25, r24
    19ba:	0a c0       	rjmp	.+20     	; 0x19d0 <PCD_CommunicateWithPICC+0x162>
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	1f c0       	rjmp	.+62     	; 0x19fe <PCD_CommunicateWithPICC+0x190>
    19c0:	89 e0       	ldi	r24, 0x09	; 9
    19c2:	1d c0       	rjmp	.+58     	; 0x19fe <PCD_CommunicateWithPICC+0x190>
    19c4:	88 e0       	ldi	r24, 0x08	; 8
    19c6:	1b c0       	rjmp	.+54     	; 0x19fe <PCD_CommunicateWithPICC+0x190>
    19c8:	88 e0       	ldi	r24, 0x08	; 8
    19ca:	19 c0       	rjmp	.+50     	; 0x19fe <PCD_CommunicateWithPICC+0x190>
    19cc:	88 e0       	ldi	r24, 0x08	; 8
    19ce:	17 c0       	rjmp	.+46     	; 0x19fe <PCD_CommunicateWithPICC+0x190>
    19d0:	88 e0       	ldi	r24, 0x08	; 8
    19d2:	15 c0       	rjmp	.+42     	; 0x19fe <PCD_CommunicateWithPICC+0x190>
    19d4:	84 e0       	ldi	r24, 0x04	; 4
    19d6:	13 c0       	rjmp	.+38     	; 0x19fe <PCD_CommunicateWithPICC+0x190>
    19d8:	84 e0       	ldi	r24, 0x04	; 4
    19da:	11 c0       	rjmp	.+34     	; 0x19fe <PCD_CommunicateWithPICC+0x190>
    19dc:	82 e0       	ldi	r24, 0x02	; 2
    19de:	0f c0       	rjmp	.+30     	; 0x19fe <PCD_CommunicateWithPICC+0x190>
    19e0:	85 e0       	ldi	r24, 0x05	; 5
    19e2:	0d c0       	rjmp	.+26     	; 0x19fe <PCD_CommunicateWithPICC+0x190>
    19e4:	83 e0       	ldi	r24, 0x03	; 3
    19e6:	0b c0       	rjmp	.+22     	; 0x19fe <PCD_CommunicateWithPICC+0x190>
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	09 c0       	rjmp	.+18     	; 0x19fe <PCD_CommunicateWithPICC+0x190>
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	07 c0       	rjmp	.+14     	; 0x19fe <PCD_CommunicateWithPICC+0x190>
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	05 c0       	rjmp	.+10     	; 0x19fe <PCD_CommunicateWithPICC+0x190>
    19f4:	83 e0       	ldi	r24, 0x03	; 3
    19f6:	03 c0       	rjmp	.+6      	; 0x19fe <PCD_CommunicateWithPICC+0x190>
    19f8:	b3 fc       	sbrc	r11, 3
    19fa:	fc cf       	rjmp	.-8      	; 0x19f4 <PCD_CommunicateWithPICC+0x186>
    19fc:	b4 cf       	rjmp	.-152    	; 0x1966 <PCD_CommunicateWithPICC+0xf8>
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	ef 90       	pop	r14
    1a0e:	df 90       	pop	r13
    1a10:	cf 90       	pop	r12
    1a12:	bf 90       	pop	r11
    1a14:	af 90       	pop	r10
    1a16:	9f 90       	pop	r9
    1a18:	8f 90       	pop	r8
    1a1a:	7f 90       	pop	r7
    1a1c:	6f 90       	pop	r6
    1a1e:	5f 90       	pop	r5
    1a20:	4f 90       	pop	r4
    1a22:	08 95       	ret

00001a24 <PCD_TransceiveData>:
    1a24:	8f 92       	push	r8
    1a26:	af 92       	push	r10
    1a28:	cf 92       	push	r12
    1a2a:	df 92       	push	r13
    1a2c:	ef 92       	push	r14
    1a2e:	ff 92       	push	r15
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	8c 2c       	mov	r8, r12
    1a36:	ae 2c       	mov	r10, r14
    1a38:	68 01       	movw	r12, r16
    1a3a:	79 01       	movw	r14, r18
    1a3c:	8a 01       	movw	r16, r20
    1a3e:	26 2f       	mov	r18, r22
    1a40:	ac 01       	movw	r20, r24
    1a42:	60 e3       	ldi	r22, 0x30	; 48
    1a44:	8c e0       	ldi	r24, 0x0C	; 12
    1a46:	13 df       	rcall	.-474    	; 0x186e <PCD_CommunicateWithPICC>
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	ff 90       	pop	r15
    1a4e:	ef 90       	pop	r14
    1a50:	df 90       	pop	r13
    1a52:	cf 90       	pop	r12
    1a54:	af 90       	pop	r10
    1a56:	8f 90       	pop	r8
    1a58:	08 95       	ret

00001a5a <PICC_REQA_or_WUPA>:
    1a5a:	8f 92       	push	r8
    1a5c:	9f 92       	push	r9
    1a5e:	af 92       	push	r10
    1a60:	bf 92       	push	r11
    1a62:	cf 92       	push	r12
    1a64:	ef 92       	push	r14
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	1f 92       	push	r1
    1a70:	1f 92       	push	r1
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	8a 83       	std	Y+2, r24	; 0x02
    1a78:	61 15       	cp	r22, r1
    1a7a:	71 05       	cpc	r23, r1
    1a7c:	09 f1       	breq	.+66     	; 0x1ac0 <PICC_REQA_or_WUPA+0x66>
    1a7e:	fa 01       	movw	r30, r20
    1a80:	80 81       	ld	r24, Z
    1a82:	82 30       	cpi	r24, 0x02	; 2
    1a84:	f8 f0       	brcs	.+62     	; 0x1ac4 <PICC_REQA_or_WUPA+0x6a>
    1a86:	4a 01       	movw	r8, r20
    1a88:	5b 01       	movw	r10, r22
    1a8a:	60 e8       	ldi	r22, 0x80	; 128
    1a8c:	8c e1       	ldi	r24, 0x1C	; 28
    1a8e:	5c de       	rcall	.-840    	; 0x1748 <PCD_ClearRegisterBitMask>
    1a90:	87 e0       	ldi	r24, 0x07	; 7
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	c1 2c       	mov	r12, r1
    1a96:	e1 2c       	mov	r14, r1
    1a98:	8e 01       	movw	r16, r28
    1a9a:	0f 5f       	subi	r16, 0xFF	; 255
    1a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9e:	94 01       	movw	r18, r8
    1aa0:	a5 01       	movw	r20, r10
    1aa2:	61 e0       	ldi	r22, 0x01	; 1
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	02 96       	adiw	r24, 0x02	; 2
    1aa8:	bd df       	rcall	.-134    	; 0x1a24 <PCD_TransceiveData>
    1aaa:	81 30       	cpi	r24, 0x01	; 1
    1aac:	71 f4       	brne	.+28     	; 0x1aca <PICC_REQA_or_WUPA+0x70>
    1aae:	f4 01       	movw	r30, r8
    1ab0:	80 81       	ld	r24, Z
    1ab2:	82 30       	cpi	r24, 0x02	; 2
    1ab4:	49 f4       	brne	.+18     	; 0x1ac8 <PICC_REQA_or_WUPA+0x6e>
    1ab6:	99 81       	ldd	r25, Y+1	; 0x01
    1ab8:	91 11       	cpse	r25, r1
    1aba:	07 c0       	rjmp	.+14     	; 0x1aca <PICC_REQA_or_WUPA+0x70>
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	05 c0       	rjmp	.+10     	; 0x1aca <PICC_REQA_or_WUPA+0x70>
    1ac0:	85 e0       	ldi	r24, 0x05	; 5
    1ac2:	03 c0       	rjmp	.+6      	; 0x1aca <PICC_REQA_or_WUPA+0x70>
    1ac4:	85 e0       	ldi	r24, 0x05	; 5
    1ac6:	01 c0       	rjmp	.+2      	; 0x1aca <PICC_REQA_or_WUPA+0x70>
    1ac8:	82 e0       	ldi	r24, 0x02	; 2
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	1f 91       	pop	r17
    1ad4:	0f 91       	pop	r16
    1ad6:	ef 90       	pop	r14
    1ad8:	cf 90       	pop	r12
    1ada:	bf 90       	pop	r11
    1adc:	af 90       	pop	r10
    1ade:	9f 90       	pop	r9
    1ae0:	8f 90       	pop	r8
    1ae2:	08 95       	ret

00001ae4 <PICC_RequestA>:
    1ae4:	ab 01       	movw	r20, r22
    1ae6:	bc 01       	movw	r22, r24
    1ae8:	86 e2       	ldi	r24, 0x26	; 38
    1aea:	b7 cf       	rjmp	.-146    	; 0x1a5a <PICC_REQA_or_WUPA>
    1aec:	08 95       	ret

00001aee <PICC_Select>:
    1aee:	2f 92       	push	r2
    1af0:	3f 92       	push	r3
    1af2:	4f 92       	push	r4
    1af4:	5f 92       	push	r5
    1af6:	6f 92       	push	r6
    1af8:	7f 92       	push	r7
    1afa:	8f 92       	push	r8
    1afc:	9f 92       	push	r9
    1afe:	af 92       	push	r10
    1b00:	bf 92       	push	r11
    1b02:	cf 92       	push	r12
    1b04:	df 92       	push	r13
    1b06:	ef 92       	push	r14
    1b08:	ff 92       	push	r15
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	62 97       	sbiw	r28, 0x12	; 18
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	61 35       	cpi	r22, 0x51	; 81
    1b24:	08 f0       	brcs	.+2      	; 0x1b28 <PICC_Select+0x3a>
    1b26:	55 c1       	rjmp	.+682    	; 0x1dd2 <PICC_Select+0x2e4>
    1b28:	69 8b       	std	Y+17, r22	; 0x11
    1b2a:	9d 87       	std	Y+13, r25	; 0x0d
    1b2c:	8c 87       	std	Y+12, r24	; 0x0c
    1b2e:	60 e8       	ldi	r22, 0x80	; 128
    1b30:	8c e1       	ldi	r24, 0x1C	; 28
    1b32:	0a de       	rcall	.-1004   	; 0x1748 <PCD_ClearRegisterBitMask>
    1b34:	29 89       	ldd	r18, Y+17	; 0x11
    1b36:	20 53       	subi	r18, 0x30	; 48
    1b38:	28 8b       	std	Y+16, r18	; 0x10
    1b3a:	92 2f       	mov	r25, r18
    1b3c:	97 70       	andi	r25, 0x07	; 7
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <PICC_Select+0x56>
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	98 89       	ldd	r25, Y+16	; 0x10
    1b46:	96 95       	lsr	r25
    1b48:	96 95       	lsr	r25
    1b4a:	96 95       	lsr	r25
    1b4c:	89 0f       	add	r24, r25
    1b4e:	8a 8b       	std	Y+18, r24	; 0x12
    1b50:	31 e0       	ldi	r19, 0x01	; 1
    1b52:	3f 87       	std	Y+15, r19	; 0x0f
    1b54:	ae 01       	movw	r20, r28
    1b56:	4f 5f       	subi	r20, 0xFF	; 255
    1b58:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5a:	2a 01       	movw	r4, r20
    1b5c:	24 2e       	mov	r2, r20
    1b5e:	85 2c       	mov	r8, r5
    1b60:	5f 85       	ldd	r21, Y+15	; 0x0f
    1b62:	52 30       	cpi	r21, 0x02	; 2
    1b64:	a9 f0       	breq	.+42     	; 0x1b90 <PICC_Select+0xa2>
    1b66:	53 30       	cpi	r21, 0x03	; 3
    1b68:	21 f1       	breq	.+72     	; 0x1bb2 <PICC_Select+0xc4>
    1b6a:	51 30       	cpi	r21, 0x01	; 1
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <PICC_Select+0x82>
    1b6e:	33 c1       	rjmp	.+614    	; 0x1dd6 <PICC_Select+0x2e8>
    1b70:	83 e9       	ldi	r24, 0x93	; 147
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	89 89       	ldd	r24, Y+17	; 0x11
    1b76:	88 23       	and	r24, r24
    1b78:	41 f0       	breq	.+16     	; 0x1b8a <PICC_Select+0x9c>
    1b7a:	31 e0       	ldi	r19, 0x01	; 1
    1b7c:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b7e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b80:	80 81       	ld	r24, Z
    1b82:	85 30       	cpi	r24, 0x05	; 5
    1b84:	18 f4       	brcc	.+6      	; 0x1b8c <PICC_Select+0x9e>
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	01 c0       	rjmp	.+2      	; 0x1b8c <PICC_Select+0x9e>
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	1e 86       	std	Y+14, r1	; 0x0e
    1b8e:	1a c0       	rjmp	.+52     	; 0x1bc4 <PICC_Select+0xd6>
    1b90:	85 e9       	ldi	r24, 0x95	; 149
    1b92:	89 83       	std	Y+1, r24	; 0x01
    1b94:	f9 89       	ldd	r31, Y+17	; 0x11
    1b96:	ff 23       	and	r31, r31
    1b98:	41 f0       	breq	.+16     	; 0x1baa <PICC_Select+0xbc>
    1b9a:	31 e0       	ldi	r19, 0x01	; 1
    1b9c:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b9e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ba0:	80 81       	ld	r24, Z
    1ba2:	88 30       	cpi	r24, 0x08	; 8
    1ba4:	18 f4       	brcc	.+6      	; 0x1bac <PICC_Select+0xbe>
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	01 c0       	rjmp	.+2      	; 0x1bac <PICC_Select+0xbe>
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	f3 e0       	ldi	r31, 0x03	; 3
    1bae:	fe 87       	std	Y+14, r31	; 0x0e
    1bb0:	09 c0       	rjmp	.+18     	; 0x1bc4 <PICC_Select+0xd6>
    1bb2:	87 e9       	ldi	r24, 0x97	; 151
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    1bb6:	2a 89       	ldd	r18, Y+18	; 0x12
    1bb8:	21 11       	cpse	r18, r1
    1bba:	1d c0       	rjmp	.+58     	; 0x1bf6 <PICC_Select+0x108>
    1bbc:	f8 88       	ldd	r15, Y+16	; 0x10
    1bbe:	36 e0       	ldi	r19, 0x06	; 6
    1bc0:	3e 87       	std	Y+14, r19	; 0x0e
    1bc2:	23 c1       	rjmp	.+582    	; 0x1e0a <PICC_Select+0x31c>
    1bc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bc6:	88 0f       	add	r24, r24
    1bc8:	88 0f       	add	r24, r24
    1bca:	88 0f       	add	r24, r24
    1bcc:	f9 88       	ldd	r15, Y+17	; 0x11
    1bce:	f8 1a       	sub	r15, r24
    1bd0:	33 23       	and	r19, r19
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <PICC_Select+0xe8>
    1bd4:	0e c1       	rjmp	.+540    	; 0x1df2 <PICC_Select+0x304>
    1bd6:	88 e8       	ldi	r24, 0x88	; 136
    1bd8:	8b 83       	std	Y+3, r24	; 0x03
    1bda:	91 e0       	ldi	r25, 0x01	; 1
    1bdc:	8f 2d       	mov	r24, r15
    1bde:	87 70       	andi	r24, 0x07	; 7
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <PICC_Select+0xf6>
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	8f 2d       	mov	r24, r15
    1be6:	86 95       	lsr	r24
    1be8:	86 95       	lsr	r24
    1bea:	86 95       	lsr	r24
    1bec:	98 0f       	add	r25, r24
    1bee:	31 f1       	breq	.+76     	; 0x1c3c <PICC_Select+0x14e>
    1bf0:	83 e0       	ldi	r24, 0x03	; 3
    1bf2:	23 e0       	ldi	r18, 0x03	; 3
    1bf4:	0a c0       	rjmp	.+20     	; 0x1c0a <PICC_Select+0x11c>
    1bf6:	9a 89       	ldd	r25, Y+18	; 0x12
    1bf8:	f8 88       	ldd	r15, Y+16	; 0x10
    1bfa:	46 e0       	ldi	r20, 0x06	; 6
    1bfc:	4e 87       	std	Y+14, r20	; 0x0e
    1bfe:	82 e0       	ldi	r24, 0x02	; 2
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	24 e0       	ldi	r18, 0x04	; 4
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <PICC_Select+0x11c>
    1c06:	82 e0       	ldi	r24, 0x02	; 2
    1c08:	24 e0       	ldi	r18, 0x04	; 4
    1c0a:	29 17       	cp	r18, r25
    1c0c:	08 f4       	brcc	.+2      	; 0x1c10 <PICC_Select+0x122>
    1c0e:	92 2f       	mov	r25, r18
    1c10:	99 23       	and	r25, r25
    1c12:	89 f0       	breq	.+34     	; 0x1c36 <PICC_Select+0x148>
    1c14:	5e 85       	ldd	r21, Y+14	; 0x0e
    1c16:	e5 2f       	mov	r30, r21
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	31 96       	adiw	r30, 0x01	; 1
    1c1c:	4c 85       	ldd	r20, Y+12	; 0x0c
    1c1e:	5d 85       	ldd	r21, Y+13	; 0x0d
    1c20:	e4 0f       	add	r30, r20
    1c22:	f5 1f       	adc	r31, r21
    1c24:	98 0f       	add	r25, r24
    1c26:	21 91       	ld	r18, Z+
    1c28:	d2 01       	movw	r26, r4
    1c2a:	a8 0f       	add	r26, r24
    1c2c:	b1 1d       	adc	r27, r1
    1c2e:	2c 93       	st	X, r18
    1c30:	8f 5f       	subi	r24, 0xFF	; 255
    1c32:	89 13       	cpse	r24, r25
    1c34:	f8 cf       	rjmp	.-16     	; 0x1c26 <PICC_Select+0x138>
    1c36:	33 23       	and	r19, r19
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <PICC_Select+0x14e>
    1c3a:	e7 c0       	rjmp	.+462    	; 0x1e0a <PICC_Select+0x31c>
    1c3c:	58 e0       	ldi	r21, 0x08	; 8
    1c3e:	f5 0e       	add	r15, r21
    1c40:	e4 c0       	rjmp	.+456    	; 0x1e0a <PICC_Select+0x31c>
    1c42:	8f e1       	ldi	r24, 0x1F	; 31
    1c44:	8f 15       	cp	r24, r15
    1c46:	f0 f4       	brcc	.+60     	; 0x1c84 <PICC_Select+0x196>
    1c48:	3a 82       	std	Y+2, r3	; 0x02
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	89 27       	eor	r24, r25
    1c50:	9d 81       	ldd	r25, Y+5	; 0x05
    1c52:	89 27       	eor	r24, r25
    1c54:	9e 81       	ldd	r25, Y+6	; 0x06
    1c56:	89 27       	eor	r24, r25
    1c58:	8f 83       	std	Y+7, r24	; 0x07
    1c5a:	ae 01       	movw	r20, r28
    1c5c:	48 5f       	subi	r20, 0xF8	; 248
    1c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c60:	67 2d       	mov	r22, r7
    1c62:	82 2d       	mov	r24, r2
    1c64:	98 2d       	mov	r25, r8
    1c66:	7d dd       	rcall	.-1286   	; 0x1762 <PCD_CalculateCRC>
    1c68:	81 30       	cpi	r24, 0x01	; 1
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <PICC_Select+0x180>
    1c6c:	e6 c0       	rjmp	.+460    	; 0x1e3a <PICC_Select+0x34c>
    1c6e:	9a 86       	std	Y+10, r9	; 0x0a
    1c70:	93 e0       	ldi	r25, 0x03	; 3
    1c72:	9b 87       	std	Y+11, r25	; 0x0b
    1c74:	fe 01       	movw	r30, r28
    1c76:	37 96       	adiw	r30, 0x07	; 7
    1c78:	5f 01       	movw	r10, r30
    1c7a:	0f 2e       	mov	r0, r31
    1c7c:	f9 e0       	ldi	r31, 0x09	; 9
    1c7e:	df 2e       	mov	r13, r31
    1c80:	f0 2d       	mov	r31, r0
    1c82:	1a c0       	rjmp	.+52     	; 0x1cb8 <PICC_Select+0x1ca>
    1c84:	9f 2d       	mov	r25, r15
    1c86:	97 70       	andi	r25, 0x07	; 7
    1c88:	9a 87       	std	Y+10, r25	; 0x0a
    1c8a:	2f 2d       	mov	r18, r15
    1c8c:	26 95       	lsr	r18
    1c8e:	26 95       	lsr	r18
    1c90:	26 95       	lsr	r18
    1c92:	82 e0       	ldi	r24, 0x02	; 2
    1c94:	82 0f       	add	r24, r18
    1c96:	39 2f       	mov	r19, r25
    1c98:	f0 e1       	ldi	r31, 0x10	; 16
    1c9a:	8f 9f       	mul	r24, r31
    1c9c:	30 0d       	add	r19, r0
    1c9e:	11 24       	eor	r1, r1
    1ca0:	3a 83       	std	Y+2, r19	; 0x02
    1ca2:	d6 2c       	mov	r13, r6
    1ca4:	91 11       	cpse	r25, r1
    1ca6:	01 c0       	rjmp	.+2      	; 0x1caa <PICC_Select+0x1bc>
    1ca8:	d9 2c       	mov	r13, r9
    1caa:	d8 0e       	add	r13, r24
    1cac:	52 01       	movw	r10, r4
    1cae:	a8 0e       	add	r10, r24
    1cb0:	b1 1c       	adc	r11, r1
    1cb2:	87 2d       	mov	r24, r7
    1cb4:	82 1b       	sub	r24, r18
    1cb6:	8b 87       	std	Y+11, r24	; 0x0b
    1cb8:	ea 84       	ldd	r14, Y+10	; 0x0a
    1cba:	6e 2d       	mov	r22, r14
    1cbc:	62 95       	swap	r22
    1cbe:	60 7f       	andi	r22, 0xF0	; 240
    1cc0:	6e 0d       	add	r22, r14
    1cc2:	8a e1       	ldi	r24, 0x1A	; 26
    1cc4:	9f dc       	rcall	.-1730   	; 0x1604 <PCD_WriteRegister>
    1cc6:	c9 2c       	mov	r12, r9
    1cc8:	8e 01       	movw	r16, r28
    1cca:	06 5f       	subi	r16, 0xF6	; 246
    1ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cce:	9e 01       	movw	r18, r28
    1cd0:	25 5f       	subi	r18, 0xF5	; 245
    1cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd4:	a5 01       	movw	r20, r10
    1cd6:	6d 2d       	mov	r22, r13
    1cd8:	82 2d       	mov	r24, r2
    1cda:	98 2d       	mov	r25, r8
    1cdc:	a3 de       	rcall	.-698    	; 0x1a24 <PCD_TransceiveData>
    1cde:	83 30       	cpi	r24, 0x03	; 3
    1ce0:	99 f5       	brne	.+102    	; 0x1d48 <PICC_Select+0x25a>
    1ce2:	8c e1       	ldi	r24, 0x1C	; 28
    1ce4:	bb dc       	rcall	.-1674   	; 0x165c <PCD_ReadRegister>
    1ce6:	85 fd       	sbrc	r24, 5
    1ce8:	78 c0       	rjmp	.+240    	; 0x1dda <PICC_Select+0x2ec>
    1cea:	8f 71       	andi	r24, 0x1F	; 31
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <PICC_Select+0x202>
    1cee:	80 e2       	ldi	r24, 0x20	; 32
    1cf0:	f8 16       	cp	r15, r24
    1cf2:	08 f0       	brcs	.+2      	; 0x1cf6 <PICC_Select+0x208>
    1cf4:	74 c0       	rjmp	.+232    	; 0x1dde <PICC_Select+0x2f0>
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	21 50       	subi	r18, 0x01	; 1
    1cfc:	31 09       	sbc	r19, r1
    1cfe:	27 70       	andi	r18, 0x07	; 7
    1d00:	30 78       	andi	r19, 0x80	; 128
    1d02:	33 23       	and	r19, r19
    1d04:	34 f4       	brge	.+12     	; 0x1d12 <PICC_Select+0x224>
    1d06:	21 50       	subi	r18, 0x01	; 1
    1d08:	31 09       	sbc	r19, r1
    1d0a:	28 6f       	ori	r18, 0xF8	; 248
    1d0c:	3f 6f       	ori	r19, 0xFF	; 255
    1d0e:	2f 5f       	subi	r18, 0xFF	; 255
    1d10:	3f 4f       	sbci	r19, 0xFF	; 255
    1d12:	98 2f       	mov	r25, r24
    1d14:	96 95       	lsr	r25
    1d16:	96 95       	lsr	r25
    1d18:	96 95       	lsr	r25
    1d1a:	31 e0       	ldi	r19, 0x01	; 1
    1d1c:	39 0f       	add	r19, r25
    1d1e:	96 2d       	mov	r25, r6
    1d20:	21 11       	cpse	r18, r1
    1d22:	01 c0       	rjmp	.+2      	; 0x1d26 <PICC_Select+0x238>
    1d24:	99 2d       	mov	r25, r9
    1d26:	93 0f       	add	r25, r19
    1d28:	f2 01       	movw	r30, r4
    1d2a:	e9 0f       	add	r30, r25
    1d2c:	f1 1d       	adc	r31, r1
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <PICC_Select+0x24a>
    1d34:	44 0f       	add	r20, r20
    1d36:	55 1f       	adc	r21, r21
    1d38:	2a 95       	dec	r18
    1d3a:	e2 f7       	brpl	.-8      	; 0x1d34 <PICC_Select+0x246>
    1d3c:	9a 01       	movw	r18, r20
    1d3e:	90 81       	ld	r25, Z
    1d40:	29 2b       	or	r18, r25
    1d42:	20 83       	st	Z, r18
    1d44:	f8 2e       	mov	r15, r24
    1d46:	7d cf       	rjmp	.-262    	; 0x1c42 <PICC_Select+0x154>
    1d48:	81 30       	cpi	r24, 0x01	; 1
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <PICC_Select+0x260>
    1d4c:	76 c0       	rjmp	.+236    	; 0x1e3a <PICC_Select+0x34c>
    1d4e:	5f e1       	ldi	r21, 0x1F	; 31
    1d50:	5f 15       	cp	r21, r15
    1d52:	20 f0       	brcs	.+8      	; 0x1d5c <PICC_Select+0x26e>
    1d54:	68 94       	set
    1d56:	ff 24       	eor	r15, r15
    1d58:	f5 f8       	bld	r15, 5
    1d5a:	73 cf       	rjmp	.-282    	; 0x1c42 <PICC_Select+0x154>
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	88 38       	cpi	r24, 0x88	; 136
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <PICC_Select+0x276>
    1d62:	5f c0       	rjmp	.+190    	; 0x1e22 <PICC_Select+0x334>
    1d64:	82 e0       	ldi	r24, 0x02	; 2
    1d66:	94 e0       	ldi	r25, 0x04	; 4
    1d68:	5e c0       	rjmp	.+188    	; 0x1e26 <PICC_Select+0x338>
    1d6a:	d2 01       	movw	r26, r4
    1d6c:	a8 0f       	add	r26, r24
    1d6e:	b1 1d       	adc	r27, r1
    1d70:	2c 91       	ld	r18, X
    1d72:	21 93       	st	Z+, r18
    1d74:	8f 5f       	subi	r24, 0xFF	; 255
    1d76:	89 13       	cpse	r24, r25
    1d78:	f8 cf       	rjmp	.-16     	; 0x1d6a <PICC_Select+0x27c>
    1d7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d7c:	83 30       	cpi	r24, 0x03	; 3
    1d7e:	89 f5       	brne	.+98     	; 0x1de2 <PICC_Select+0x2f4>
    1d80:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d82:	81 11       	cpse	r24, r1
    1d84:	30 c0       	rjmp	.+96     	; 0x1de6 <PICC_Select+0x2f8>
    1d86:	ae 01       	movw	r20, r28
    1d88:	4d 5f       	subi	r20, 0xFD	; 253
    1d8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d8c:	61 e0       	ldi	r22, 0x01	; 1
    1d8e:	c5 01       	movw	r24, r10
    1d90:	e8 dc       	rcall	.-1584   	; 0x1762 <PCD_CalculateCRC>
    1d92:	81 30       	cpi	r24, 0x01	; 1
    1d94:	09 f0       	breq	.+2      	; 0x1d98 <PICC_Select+0x2aa>
    1d96:	51 c0       	rjmp	.+162    	; 0x1e3a <PICC_Select+0x34c>
    1d98:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9a:	f5 01       	movw	r30, r10
    1d9c:	81 81       	ldd	r24, Z+1	; 0x01
    1d9e:	98 13       	cpse	r25, r24
    1da0:	24 c0       	rjmp	.+72     	; 0x1dea <PICC_Select+0x2fc>
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	98 13       	cpse	r25, r24
    1da8:	22 c0       	rjmp	.+68     	; 0x1dee <PICC_Select+0x300>
    1daa:	80 81       	ld	r24, Z
    1dac:	82 ff       	sbrs	r24, 2
    1dae:	04 c0       	rjmp	.+8      	; 0x1db8 <PICC_Select+0x2ca>
    1db0:	ff 85       	ldd	r31, Y+15	; 0x0f
    1db2:	ff 5f       	subi	r31, 0xFF	; 255
    1db4:	ff 87       	std	Y+15, r31	; 0x0f
    1db6:	d4 ce       	rjmp	.-600    	; 0x1b60 <PICC_Select+0x72>
    1db8:	ec 85       	ldd	r30, Y+12	; 0x0c
    1dba:	fd 85       	ldd	r31, Y+13	; 0x0d
    1dbc:	83 87       	std	Z+11, r24	; 0x0b
    1dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc0:	88 0f       	add	r24, r24
    1dc2:	ff 85       	ldd	r31, Y+15	; 0x0f
    1dc4:	8f 0f       	add	r24, r31
    1dc6:	8f 5f       	subi	r24, 0xFF	; 255
    1dc8:	ec 85       	ldd	r30, Y+12	; 0x0c
    1dca:	fd 85       	ldd	r31, Y+13	; 0x0d
    1dcc:	80 83       	st	Z, r24
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	34 c0       	rjmp	.+104    	; 0x1e3a <PICC_Select+0x34c>
    1dd2:	87 e0       	ldi	r24, 0x07	; 7
    1dd4:	32 c0       	rjmp	.+100    	; 0x1e3a <PICC_Select+0x34c>
    1dd6:	86 e0       	ldi	r24, 0x06	; 6
    1dd8:	30 c0       	rjmp	.+96     	; 0x1e3a <PICC_Select+0x34c>
    1dda:	83 e0       	ldi	r24, 0x03	; 3
    1ddc:	2e c0       	rjmp	.+92     	; 0x1e3a <PICC_Select+0x34c>
    1dde:	86 e0       	ldi	r24, 0x06	; 6
    1de0:	2c c0       	rjmp	.+88     	; 0x1e3a <PICC_Select+0x34c>
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	2a c0       	rjmp	.+84     	; 0x1e3a <PICC_Select+0x34c>
    1de6:	82 e0       	ldi	r24, 0x02	; 2
    1de8:	28 c0       	rjmp	.+80     	; 0x1e3a <PICC_Select+0x34c>
    1dea:	88 e0       	ldi	r24, 0x08	; 8
    1dec:	26 c0       	rjmp	.+76     	; 0x1e3a <PICC_Select+0x34c>
    1dee:	88 e0       	ldi	r24, 0x08	; 8
    1df0:	24 c0       	rjmp	.+72     	; 0x1e3a <PICC_Select+0x34c>
    1df2:	91 e0       	ldi	r25, 0x01	; 1
    1df4:	8f 2d       	mov	r24, r15
    1df6:	87 70       	andi	r24, 0x07	; 7
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <PICC_Select+0x30e>
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	8f 2d       	mov	r24, r15
    1dfe:	86 95       	lsr	r24
    1e00:	86 95       	lsr	r24
    1e02:	86 95       	lsr	r24
    1e04:	98 0f       	add	r25, r24
    1e06:	09 f0       	breq	.+2      	; 0x1e0a <PICC_Select+0x31c>
    1e08:	fe ce       	rjmp	.-516    	; 0x1c06 <PICC_Select+0x118>
    1e0a:	66 24       	eor	r6, r6
    1e0c:	63 94       	inc	r6
    1e0e:	0f 2e       	mov	r0, r31
    1e10:	f7 e0       	ldi	r31, 0x07	; 7
    1e12:	7f 2e       	mov	r7, r31
    1e14:	f0 2d       	mov	r31, r0
    1e16:	91 2c       	mov	r9, r1
    1e18:	0f 2e       	mov	r0, r31
    1e1a:	f0 e7       	ldi	r31, 0x70	; 112
    1e1c:	3f 2e       	mov	r3, r31
    1e1e:	f0 2d       	mov	r31, r0
    1e20:	10 cf       	rjmp	.-480    	; 0x1c42 <PICC_Select+0x154>
    1e22:	83 e0       	ldi	r24, 0x03	; 3
    1e24:	93 e0       	ldi	r25, 0x03	; 3
    1e26:	2e 85       	ldd	r18, Y+14	; 0x0e
    1e28:	e2 2f       	mov	r30, r18
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	31 96       	adiw	r30, 0x01	; 1
    1e2e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1e30:	5d 85       	ldd	r21, Y+13	; 0x0d
    1e32:	e4 0f       	add	r30, r20
    1e34:	f5 1f       	adc	r31, r21
    1e36:	98 0f       	add	r25, r24
    1e38:	98 cf       	rjmp	.-208    	; 0x1d6a <PICC_Select+0x27c>
    1e3a:	62 96       	adiw	r28, 0x12	; 18
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	cd bf       	out	0x3d, r28	; 61
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	ff 90       	pop	r15
    1e50:	ef 90       	pop	r14
    1e52:	df 90       	pop	r13
    1e54:	cf 90       	pop	r12
    1e56:	bf 90       	pop	r11
    1e58:	af 90       	pop	r10
    1e5a:	9f 90       	pop	r9
    1e5c:	8f 90       	pop	r8
    1e5e:	7f 90       	pop	r7
    1e60:	6f 90       	pop	r6
    1e62:	5f 90       	pop	r5
    1e64:	4f 90       	pop	r4
    1e66:	3f 90       	pop	r3
    1e68:	2f 90       	pop	r2
    1e6a:	08 95       	ret

00001e6c <PICC_IsNewCardPresent>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 *
 * @return bool
 */
bool PICC_IsNewCardPresent() {
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <PICC_IsNewCardPresent+0x6>
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    1e76:	82 e0       	ldi	r24, 0x02	; 2
    1e78:	8b 83       	std	Y+3, r24	; 0x03
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
    1e7a:	be 01       	movw	r22, r28
    1e7c:	6d 5f       	subi	r22, 0xFD	; 253
    1e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e80:	ce 01       	movw	r24, r28
    1e82:	01 96       	adiw	r24, 0x01	; 1
    1e84:	2f de       	rcall	.-930    	; 0x1ae4 <PICC_RequestA>
	return (result == STATUS_OK || result == STATUS_COLLISION);
    1e86:	98 2f       	mov	r25, r24
    1e88:	9d 7f       	andi	r25, 0xFD	; 253
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	91 30       	cpi	r25, 0x01	; 1
    1e8e:	09 f0       	breq	.+2      	; 0x1e92 <PICC_IsNewCardPresent+0x26>
    1e90:	80 e0       	ldi	r24, 0x00	; 0
}
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	08 95       	ret

00001e9e <PICC_ReadCardSerial>:
 * The read UID is available in the class variable uid.
 *
 * @return bool
 */
bool PICC_ReadCardSerial(Uid* uid) {
	byte result = PICC_Select(uid, 0);
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	26 de       	rcall	.-948    	; 0x1aee <PICC_Select>
	return (result == STATUS_OK);
    1ea2:	91 e0       	ldi	r25, 0x01	; 1
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <PICC_ReadCardSerial+0xc>
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
}
    1eaa:	89 2f       	mov	r24, r25
    1eac:	08 95       	ret

00001eae <spi_init>:
words and MSB first.
@param[in]	fdiv		Baudrate prescaler, F_CPU dependent
*/
void spi_init(uint8_t fdiv)
{
	if( SPCR0 & _BV(SPE0) ) return;
    1eae:	0c b4       	in	r0, 0x2c	; 44
    1eb0:	06 fc       	sbrc	r0, 6
    1eb2:	0b c0       	rjmp	.+22     	; 0x1eca <spi_init+0x1c>
	#ifdef SPI_USE_CMT
	spi_mutex.ac = 0;
	#endif

	// make SCK, MOSI pins outputs and MISO an input
	SCK_DDR |= _BV(SCK_BIT);
    1eb4:	21 9a       	sbi	0x04, 1	; 4
	MOSI_DDR |= _BV(MOSI_BIT);
    1eb6:	22 9a       	sbi	0x04, 2	; 4
	MISO_DDR &= ~_BV(MISO_BIT);
    1eb8:	23 98       	cbi	0x04, 3	; 4

	// init SPI, MSB first, SCK low when idle
	SPCR0 = _BV(SPE0) | _BV(MSTR0) | (fdiv & 3);
    1eba:	98 2f       	mov	r25, r24
    1ebc:	93 70       	andi	r25, 0x03	; 3
    1ebe:	90 65       	ori	r25, 0x50	; 80
    1ec0:	9c bd       	out	0x2c, r25	; 44
	SPSR0 = (fdiv >> 2) & 1;
    1ec2:	82 fb       	bst	r24, 2
    1ec4:	88 27       	eor	r24, r24
    1ec6:	80 f9       	bld	r24, 0
    1ec8:	8d bd       	out	0x2d, r24	; 45
    1eca:	08 95       	ret

00001ecc <spi_rw>:
{
	#ifdef SPI_USE_CMT
	cmt_acquire(&spi_mutex);
	#endif

	SPCR0 |= _BV(MSTR0);
    1ecc:	9c b5       	in	r25, 0x2c	; 44
    1ece:	90 61       	ori	r25, 0x10	; 16
    1ed0:	9c bd       	out	0x2c, r25	; 44
	SPDR0 = d;
    1ed2:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR0 & _BV(SPIF0)) ) {
    1ed4:	0d b4       	in	r0, 0x2d	; 45
    1ed6:	07 fe       	sbrs	r0, 7
    1ed8:	fd cf       	rjmp	.-6      	; 0x1ed4 <spi_rw+0x8>
		#ifdef SPI_USE_CMT
		cmt_delay_ticks(0);
		#endif
	}
	d = SPDR0;
    1eda:	8e b5       	in	r24, 0x2e	; 46
	#ifdef SPI_USE_CMT
	cmt_release(&spi_mutex);
	#endif

	return d;
}
    1edc:	08 95       	ret

00001ede <__vector_24>:
// ------------------------------------------------------------------
// INTERRUPTS
// ------------------------------------------------------------------

ISR(SPI_STC_vect)
{
    1ede:	1f 92       	push	r1
    1ee0:	0f 92       	push	r0
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	0f 92       	push	r0
    1ee6:	11 24       	eor	r1, r1
//
}
    1ee8:	0f 90       	pop	r0
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	0f 90       	pop	r0
    1eee:	1f 90       	pop	r1
    1ef0:	18 95       	reti

00001ef2 <cli_print_help>:
    }
}

/*Summary: prints out list of CLI implemented commands, by iterating in Lookup list cli_cmd_t */
void cli_print_help(const char *const *argv)
{
    1ef2:	cf 92       	push	r12
    1ef4:	df 92       	push	r13
    1ef6:	ef 92       	push	r14
    1ef8:	ff 92       	push	r15
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    (void) argv;
    printf_P(PSTR("\n"));
    1f02:	89 e5       	ldi	r24, 0x59	; 89
    1f04:	94 e0       	ldi	r25, 0x04	; 4
    1f06:	9f 93       	push	r25
    1f08:	8f 93       	push	r24
    1f0a:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <printf_P>
    printf_P(PSTR(CLI_HELP_MSG));
    1f0e:	82 e4       	ldi	r24, 0x42	; 66
    1f10:	94 e0       	ldi	r25, 0x04	; 4
    1f12:	9f 93       	push	r25
    1f14:	8f 93       	push	r24
    1f16:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <printf_P>
    1f1a:	ce ea       	ldi	r28, 0xAE	; 174
    1f1c:	d2 e0       	ldi	r29, 0x02	; 2
    1f1e:	0f 2e       	mov	r0, r31
    1f20:	fd ee       	ldi	r31, 0xED	; 237
    1f22:	cf 2e       	mov	r12, r31
    1f24:	f2 e0       	ldi	r31, 0x02	; 2
    1f26:	df 2e       	mov	r13, r31
    1f28:	f0 2d       	mov	r31, r0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0

    for (uint8_t i = 0; i < NUM_ELEMS(cli_cmds); i++)
    {
        printf_P(cli_cmds[i].cmd);
        printf_P(PSTR(" : "));
    1f32:	0f 2e       	mov	r0, r31
    1f34:	fe e3       	ldi	r31, 0x3E	; 62
    1f36:	ef 2e       	mov	r14, r31
    1f38:	f4 e0       	ldi	r31, 0x04	; 4
    1f3a:	ff 2e       	mov	r15, r31
    1f3c:	f0 2d       	mov	r31, r0
        printf_P(cli_cmds[i].help);
        printf_P(PSTR("\n"));
    1f3e:	0c e3       	ldi	r16, 0x3C	; 60
    1f40:	14 e0       	ldi	r17, 0x04	; 4
    printf_P(PSTR("\n"));
    printf_P(PSTR(CLI_HELP_MSG));

    for (uint8_t i = 0; i < NUM_ELEMS(cli_cmds); i++)
    {
        printf_P(cli_cmds[i].cmd);
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	8f 93       	push	r24
    1f46:	88 81       	ld	r24, Y
    1f48:	8f 93       	push	r24
    1f4a:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <printf_P>
        printf_P(PSTR(" : "));
    1f4e:	ff 92       	push	r15
    1f50:	ef 92       	push	r14
    1f52:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <printf_P>
        printf_P(cli_cmds[i].help);
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	8f 93       	push	r24
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	8f 93       	push	r24
    1f5e:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <printf_P>
        printf_P(PSTR("\n"));
    1f62:	1f 93       	push	r17
    1f64:	0f 93       	push	r16
    1f66:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <printf_P>
    1f6a:	27 96       	adiw	r28, 0x07	; 7
{
    (void) argv;
    printf_P(PSTR("\n"));
    printf_P(PSTR(CLI_HELP_MSG));

    for (uint8_t i = 0; i < NUM_ELEMS(cli_cmds); i++)
    1f6c:	8d b7       	in	r24, 0x3d	; 61
    1f6e:	9e b7       	in	r25, 0x3e	; 62
    1f70:	08 96       	adiw	r24, 0x08	; 8
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	9e bf       	out	0x3e, r25	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	8d bf       	out	0x3d, r24	; 61
    1f7c:	cc 15       	cp	r28, r12
    1f7e:	dd 05       	cpc	r29, r13
    1f80:	01 f7       	brne	.-64     	; 0x1f42 <cli_print_help+0x50>
        printf_P(cli_cmds[i].cmd);
        printf_P(PSTR(" : "));
        printf_P(cli_cmds[i].help);
        printf_P(PSTR("\n"));
    }
}
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	1f 91       	pop	r17
    1f88:	0f 91       	pop	r16
    1f8a:	ff 90       	pop	r15
    1f8c:	ef 90       	pop	r14
    1f8e:	df 90       	pop	r13
    1f90:	cf 90       	pop	r12
    1f92:	08 95       	ret

00001f94 <cli_print_ascii_tbls>:
    print_version (stdout);
}

/*Summary: Prints ASCII tables to console*/
void cli_print_ascii_tbls(const char *const *argv)
{
    1f94:	0f 93       	push	r16
    1f96:	1f 93       	push	r17
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	c0 58       	subi	r28, 0x80	; 128
    1fa2:	d1 09       	sbc	r29, r1
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    (void) argv;
    putc('\n', stdout);
    1fae:	09 ef       	ldi	r16, 0xF9	; 249
    1fb0:	15 e0       	ldi	r17, 0x05	; 5
    1fb2:	f8 01       	movw	r30, r16
    1fb4:	62 81       	ldd	r22, Z+2	; 0x02
    1fb6:	73 81       	ldd	r23, Z+3	; 0x03
    1fb8:	8a e0       	ldi	r24, 0x0A	; 10
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	0e 94 a0 18 	call	0x3140	; 0x3140 <fputc>
    //Print ASCII table
    print_ascii_tbl(stdout);
    1fc0:	f8 01       	movw	r30, r16
    1fc2:	82 81       	ldd	r24, Z+2	; 0x02
    1fc4:	93 81       	ldd	r25, Z+3	; 0x03
    1fc6:	10 d4       	rcall	.+2080   	; 0x27e8 <print_ascii_tbl>
    1fc8:	9e 01       	movw	r18, r28
    1fca:	2f 5f       	subi	r18, 0xFF	; 255
    1fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fce:	ae 01       	movw	r20, r28
    1fd0:	4f 57       	subi	r20, 0x7F	; 127
    1fd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd4:	f9 01       	movw	r30, r18
    1fd6:	8e 2f       	mov	r24, r30
    1fd8:	82 1b       	sub	r24, r18
    unsigned char charArray[128];

    for (unsigned char i = 0; i < sizeof(charArray); i++)
    {
        charArray[i] = i;
    1fda:	81 93       	st	Z+, r24
    putc('\n', stdout);
    //Print ASCII table
    print_ascii_tbl(stdout);
    unsigned char charArray[128];

    for (unsigned char i = 0; i < sizeof(charArray); i++)
    1fdc:	e4 17       	cp	r30, r20
    1fde:	f5 07       	cpc	r31, r21
    1fe0:	d1 f7       	brne	.-12     	; 0x1fd6 <cli_print_ascii_tbls+0x42>
    {
        charArray[i] = i;
    }

    print_for_human(stdout, charArray, 128);
    1fe2:	40 e8       	ldi	r20, 0x80	; 128
    1fe4:	50 e0       	ldi	r21, 0x00	; 0
    1fe6:	be 01       	movw	r22, r28
    1fe8:	6f 5f       	subi	r22, 0xFF	; 255
    1fea:	7f 4f       	sbci	r23, 0xFF	; 255
    1fec:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <__iob+0x2>
    1ff0:	90 91 fc 05 	lds	r25, 0x05FC	; 0x8005fc <__iob+0x3>
    1ff4:	2a d4       	rcall	.+2132   	; 0x284a <print_for_human>
}
    1ff6:	c0 58       	subi	r28, 0x80	; 128
    1ff8:	df 4f       	sbci	r29, 0xFF	; 255
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	df 91       	pop	r29
    2006:	cf 91       	pop	r28
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	08 95       	ret

0000200e <cli_handle_month>:


/*Summary: function compares string received from CLI input(second argument) with strings in Lookup list months, and if found,
prints relevant months names to console and to LCD.*/
void cli_handle_month(const char *const *argv)
{
    200e:	af 92       	push	r10
    2010:	bf 92       	push	r11
    2012:	cf 92       	push	r12
    2014:	df 92       	push	r13
    2016:	ef 92       	push	r14
    2018:	ff 92       	push	r15
    201a:	0f 93       	push	r16
    201c:	1f 93       	push	r17
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	7c 01       	movw	r14, r24
    putc('\n', stdout);
    2024:	60 91 fb 05 	lds	r22, 0x05FB	; 0x8005fb <__iob+0x2>
    2028:	70 91 fc 05 	lds	r23, 0x05FC	; 0x8005fc <__iob+0x3>
    202c:	8a e0       	ldi	r24, 0x0A	; 10
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	0e 94 a0 18 	call	0x3140	; 0x3140 <fputc>
    // Clear second line of display. Then goto beginning of line on display
    lcd_clr(0X40, 16);
    2034:	60 e1       	ldi	r22, 0x10	; 16
    2036:	80 e4       	ldi	r24, 0x40	; 64
    2038:	0e 94 b4 07 	call	0xf68	; 0xf68 <lcd_clr>
    lcd_goto(0x40);
    203c:	80 e4       	ldi	r24, 0x40	; 64
    203e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <lcd_goto>
    2042:	cc ee       	ldi	r28, 0xEC	; 236
    2044:	d5 e0       	ldi	r29, 0x05	; 5
    2046:	08 ef       	ldi	r16, 0xF8	; 248
    2048:	15 e0       	ldi	r17, 0x05	; 5
    // Compare the counted input chars with same amount of chars in strings in months[] and in case of success output month to LCD.
    for (int i = 0; i < 6; i++)
    {
        if (!strncmp_P(argv[1], (PGM_P)pgm_read_word(&months[i]), strlen(argv[1])))
        {
            fprintf_P(stdout, PSTR("%S\n"), (PGM_P)pgm_read_word(&months[i]));
    204a:	0f 2e       	mov	r0, r31
    204c:	fb eb       	ldi	r31, 0xBB	; 187
    204e:	af 2e       	mov	r10, r31
    2050:	f3 e0       	ldi	r31, 0x03	; 3
    2052:	bf 2e       	mov	r11, r31
    2054:	f0 2d       	mov	r31, r0
    2056:	0f 2e       	mov	r0, r31
    2058:	f9 ef       	ldi	r31, 0xF9	; 249
    205a:	cf 2e       	mov	r12, r31
    205c:	f5 e0       	ldi	r31, 0x05	; 5
    205e:	df 2e       	mov	r13, r31
    2060:	f0 2d       	mov	r31, r0
    lcd_goto(0x40);

    // Compare the counted input chars with same amount of chars in strings in months[] and in case of success output month to LCD.
    for (int i = 0; i < 6; i++)
    {
        if (!strncmp_P(argv[1], (PGM_P)pgm_read_word(&months[i]), strlen(argv[1])))
    2062:	f7 01       	movw	r30, r14
    2064:	82 81       	ldd	r24, Z+2	; 0x02
    2066:	93 81       	ldd	r25, Z+3	; 0x03
    2068:	fc 01       	movw	r30, r24
    206a:	01 90       	ld	r0, Z+
    206c:	00 20       	and	r0, r0
    206e:	e9 f7       	brne	.-6      	; 0x206a <cli_handle_month+0x5c>
    2070:	31 97       	sbiw	r30, 0x01	; 1
    2072:	af 01       	movw	r20, r30
    2074:	48 1b       	sub	r20, r24
    2076:	59 0b       	sbc	r21, r25
    2078:	fe 01       	movw	r30, r28
    207a:	65 91       	lpm	r22, Z+
    207c:	74 91       	lpm	r23, Z
    207e:	e5 d7       	rcall	.+4042   	; 0x304a <strncmp_P>
    2080:	89 2b       	or	r24, r25
    2082:	e1 f4       	brne	.+56     	; 0x20bc <cli_handle_month+0xae>
        {
            fprintf_P(stdout, PSTR("%S\n"), (PGM_P)pgm_read_word(&months[i]));
    2084:	fe 01       	movw	r30, r28
    2086:	85 91       	lpm	r24, Z+
    2088:	94 91       	lpm	r25, Z
    208a:	9f 93       	push	r25
    208c:	8f 93       	push	r24
    208e:	bf 92       	push	r11
    2090:	af 92       	push	r10
    2092:	f6 01       	movw	r30, r12
    2094:	83 81       	ldd	r24, Z+3	; 0x03
    2096:	8f 93       	push	r24
    2098:	82 81       	ldd	r24, Z+2	; 0x02
    209a:	8f 93       	push	r24
    209c:	0e 94 84 18 	call	0x3108	; 0x3108 <fprintf_P>
            // Output month(s) to display
            lcd_puts_P((PGM_P)pgm_read_word(&months[i]));
    20a0:	fe 01       	movw	r30, r28
    20a2:	85 91       	lpm	r24, Z+
    20a4:	94 91       	lpm	r25, Z
    20a6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <lcd_puts_P>
            lcd_putc(' '); //Put space between months, if more than 1 matches
    20aa:	80 e2       	ldi	r24, 0x20	; 32
    20ac:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <lcd_putc>
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	22 96       	adiw	r28, 0x02	; 2
    // Clear second line of display. Then goto beginning of line on display
    lcd_clr(0X40, 16);
    lcd_goto(0x40);

    // Compare the counted input chars with same amount of chars in strings in months[] and in case of success output month to LCD.
    for (int i = 0; i < 6; i++)
    20be:	c0 17       	cp	r28, r16
    20c0:	d1 07       	cpc	r29, r17
    20c2:	79 f6       	brne	.-98     	; 0x2062 <cli_handle_month+0x54>
            // Output month(s) to display
            lcd_puts_P((PGM_P)pgm_read_word(&months[i]));
            lcd_putc(' '); //Put space between months, if more than 1 matches
        }
    }
}
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	1f 91       	pop	r17
    20ca:	0f 91       	pop	r16
    20cc:	ff 90       	pop	r15
    20ce:	ef 90       	pop	r14
    20d0:	df 90       	pop	r13
    20d2:	cf 90       	pop	r12
    20d4:	bf 90       	pop	r11
    20d6:	af 90       	pop	r10
    20d8:	08 95       	ret

000020da <cli_rfid_read>:
}


/*Summary: methods polls the RFID reader, and if card detected, prints information of card to console*/
void cli_rfid_read(const char *const *argv)
{
    20da:	ef 92       	push	r14
    20dc:	ff 92       	push	r15
    20de:	1f 93       	push	r17
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	2c 97       	sbiw	r28, 0x0c	; 12
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    (void) argv;
    Uid uid;
    Uid *uid_ptr = &uid;
    if (PICC_IsNewCardPresent())
    20f4:	bb de       	rcall	.-650    	; 0x1e6c <PICC_IsNewCardPresent>
    20f6:	88 23       	and	r24, r24
    20f8:	09 f4       	brne	.+2      	; 0x20fc <cli_rfid_read+0x22>
    20fa:	4e c0       	rjmp	.+156    	; 0x2198 <cli_rfid_read+0xbe>
    {
        printf(CARD_SELECTED_MSG);
    20fc:	86 e9       	ldi	r24, 0x96	; 150
    20fe:	92 e0       	ldi	r25, 0x02	; 2
    2100:	9f 93       	push	r25
    2102:	8f 93       	push	r24
    2104:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <printf>
        PICC_ReadCardSerial(uid_ptr);
    2108:	ce 01       	movw	r24, r28
    210a:	01 96       	adiw	r24, 0x01	; 1
    210c:	c8 de       	rcall	.-624    	; 0x1e9e <PICC_ReadCardSerial>
        printf_P(PSTR(CARD_UID_SIZE_MSG), uid.size);
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	1f 92       	push	r1
    2112:	8f 93       	push	r24
    2114:	89 e3       	ldi	r24, 0x39	; 57
    2116:	93 e0       	ldi	r25, 0x03	; 3
    2118:	9f 93       	push	r25
    211a:	8f 93       	push	r24
    211c:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <printf_P>
        printf_P(PSTR(CARD_UID_SAK_MSG), uid.sak);
    2120:	8c 85       	ldd	r24, Y+12	; 0x0c
    2122:	1f 92       	push	r1
    2124:	8f 93       	push	r24
    2126:	88 e2       	ldi	r24, 0x28	; 40
    2128:	93 e0       	ldi	r25, 0x03	; 3
    212a:	9f 93       	push	r25
    212c:	8f 93       	push	r24
    212e:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <printf_P>
        printf_P(PSTR(CARD_UID_MSG));
    2132:	8d e1       	ldi	r24, 0x1D	; 29
    2134:	93 e0       	ldi	r25, 0x03	; 3
    2136:	9f 93       	push	r25
    2138:	8f 93       	push	r24
    213a:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <printf_P>

        for (uint8_t i = 0; i < uid.size; i++)
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	88 23       	and	r24, r24
    214c:	e1 f0       	breq	.+56     	; 0x2186 <cli_rfid_read+0xac>
    214e:	10 e0       	ldi	r17, 0x00	; 0
        {
            printf("%02X", uid.uidByte[i]);
    2150:	0f 2e       	mov	r0, r31
    2152:	f6 ea       	ldi	r31, 0xA6	; 166
    2154:	ef 2e       	mov	r14, r31
    2156:	f2 e0       	ldi	r31, 0x02	; 2
    2158:	ff 2e       	mov	r15, r31
    215a:	f0 2d       	mov	r31, r0
    215c:	e2 e0       	ldi	r30, 0x02	; 2
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	ec 0f       	add	r30, r28
    2162:	fd 1f       	adc	r31, r29
    2164:	e1 0f       	add	r30, r17
    2166:	f1 1d       	adc	r31, r1
    2168:	80 81       	ld	r24, Z
    216a:	1f 92       	push	r1
    216c:	8f 93       	push	r24
    216e:	ff 92       	push	r15
    2170:	ef 92       	push	r14
    2172:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <printf>
        PICC_ReadCardSerial(uid_ptr);
        printf_P(PSTR(CARD_UID_SIZE_MSG), uid.size);
        printf_P(PSTR(CARD_UID_SAK_MSG), uid.sak);
        printf_P(PSTR(CARD_UID_MSG));

        for (uint8_t i = 0; i < uid.size; i++)
    2176:	1f 5f       	subi	r17, 0xFF	; 255
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	18 17       	cp	r17, r24
    2184:	58 f3       	brcs	.-42     	; 0x215c <cli_rfid_read+0x82>
        {
            printf("%02X", uid.uidByte[i]);
        }

        printf_P(PSTR("\n"));
    2186:	8b e1       	ldi	r24, 0x1B	; 27
    2188:	93 e0       	ldi	r25, 0x03	; 3
    218a:	9f 93       	push	r25
    218c:	8f 93       	push	r24
    218e:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <printf_P>
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	08 c0       	rjmp	.+16     	; 0x21a8 <cli_rfid_read+0xce>
    }
    else
    {
        printf_P((PSTR(CARD_UNABLE_TO_SELECT_MSG)));
    2198:	82 e0       	ldi	r24, 0x02	; 2
    219a:	93 e0       	ldi	r25, 0x03	; 3
    219c:	9f 93       	push	r25
    219e:	8f 93       	push	r24
    21a0:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <printf_P>
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    }
}
    21a8:	2c 96       	adiw	r28, 0x0c	; 12
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	1f 91       	pop	r17
    21ba:	ff 90       	pop	r15
    21bc:	ef 90       	pop	r14
    21be:	08 95       	ret

000021c0 <cli_rfid_add>:


/*Summary: function polls the RFID reader constantly, and if card detected, stores card UID and UID size to card_t struct instance. 
  User is copied from CLI input. Validation of UID and add a new user happen in method rfid_add_user.*/
void cli_rfid_add(const char *const *argv)
{
    21c0:	ef 92       	push	r14
    21c2:	ff 92       	push	r15
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	6b 97       	sbiw	r28, 0x1b	; 27
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	8c 01       	movw	r16, r24
    (void) argv;
    Uid uid;
    card_t card;
    if (PICC_IsNewCardPresent())
    21de:	46 de       	rcall	.-884    	; 0x1e6c <PICC_IsNewCardPresent>
    21e0:	88 23       	and	r24, r24
    21e2:	11 f1       	breq	.+68     	; 0x2228 <__stack+0x29>
    {
        PICC_ReadCardSerial(&uid);
    21e4:	ce 01       	movw	r24, r28
    21e6:	01 96       	adiw	r24, 0x01	; 1
    21e8:	5a de       	rcall	.-844    	; 0x1e9e <PICC_ReadCardSerial>
        card.uid_size = uid.size;
    21ea:	49 81       	ldd	r20, Y+1	; 0x01
    21ec:	4d 87       	std	Y+13, r20	; 0x0d
        memcpy(&card.uid, &uid.uidByte, uid.size);
    21ee:	50 e0       	ldi	r21, 0x00	; 0
    21f0:	be 01       	movw	r22, r28
    21f2:	6e 5f       	subi	r22, 0xFE	; 254
    21f4:	7f 4f       	sbci	r23, 0xFF	; 255
    21f6:	ce 01       	movw	r24, r28
    21f8:	0e 96       	adiw	r24, 0x0e	; 14
    21fa:	42 d7       	rcall	.+3716   	; 0x3080 <memcpy>
        char *user = malloc(strlen(argv[1]) + 1);
    21fc:	f8 01       	movw	r30, r16
    21fe:	e2 80       	ldd	r14, Z+2	; 0x02
    2200:	f3 80       	ldd	r15, Z+3	; 0x03
    2202:	f7 01       	movw	r30, r14
    2204:	01 90       	ld	r0, Z+
    2206:	00 20       	and	r0, r0
    2208:	e9 f7       	brne	.-6      	; 0x2204 <__stack+0x5>
    220a:	cf 01       	movw	r24, r30
    220c:	8e 19       	sub	r24, r14
    220e:	9f 09       	sbc	r25, r15
    2210:	e2 d5       	rcall	.+3012   	; 0x2dd6 <malloc>
    2212:	8c 01       	movw	r16, r24
        strcpy(user, argv[1]);
    2214:	b7 01       	movw	r22, r14
    2216:	62 d7       	rcall	.+3780   	; 0x30dc <strcpy>
        card.user = user;
    2218:	19 8f       	std	Y+25, r17	; 0x19
    221a:	08 8f       	std	Y+24, r16	; 0x18
        rfid_add_card(&card);
    221c:	ce 01       	movw	r24, r28
    221e:	0d 96       	adiw	r24, 0x0d	; 13
    2220:	2f d4       	rcall	.+2142   	; 0x2a80 <rfid_add_card>
        free(user);
    2222:	c8 01       	movw	r24, r16
    2224:	6d d6       	rcall	.+3290   	; 0x2f00 <free>
    2226:	07 c0       	rjmp	.+14     	; 0x2236 <__stack+0x37>
    }
    else
    {
        printf_P(PSTR(CARD_UNABLE_TO_SELECT_MSG));
    2228:	89 ee       	ldi	r24, 0xE9	; 233
    222a:	92 e0       	ldi	r25, 0x02	; 2
    222c:	9f 93       	push	r25
    222e:	8f 93       	push	r24
    2230:	d2 d7       	rcall	.+4004   	; 0x31d6 <printf_P>
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    }
}
    2236:	6b 96       	adiw	r28, 0x1b	; 27
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	ff 90       	pop	r15
    224c:	ef 90       	pop	r14
    224e:	08 95       	ret

00002250 <cli_rfid_remove>:

/*Summary: read input from console and call frid_remove_card_by_uid function, sending argument copied from CLI 2nd word(argv[1]) input*/
void cli_rfid_remove(const char *const *argv)
{
    (void) argv;
    rfid_remove_card_by_uid(argv[1]);
    2250:	fc 01       	movw	r30, r24
    2252:	82 81       	ldd	r24, Z+2	; 0x02
    2254:	93 81       	ldd	r25, Z+3	; 0x03
    2256:	7b c4       	rjmp	.+2294   	; 0x2b4e <rfid_remove_card_by_uid>
    2258:	08 95       	ret

0000225a <cli_rfid_print>:

/*Summary: read input from console and call cli_rfid_print function, sending argument copied from CLI 2nd word(argv[1]) input*/
void cli_rfid_print(const char *const *argv)
{
    (void) argv;
    rfid_print_card_list();
    225a:	b3 c3       	rjmp	.+1894   	; 0x29c2 <rfid_print_card_list>
    225c:	08 95       	ret

0000225e <cli_mem_stat>:
}


/*Summary: prints to console memory usage statistics and dynamics, using methods from "library andy_brown_memdebug"*/
void cli_mem_stat(const char *const *argv)
{
    225e:	0f 93       	push	r16
    2260:	1f 93       	push	r17
    2262:	cf 93       	push	r28
    2264:	df 93       	push	r29
    2266:	1f 92       	push	r1
    2268:	1f 92       	push	r1
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    (void) argv;
    extern int __heap_start, *__brkval;
    int v;
    int space;
    static int prev_space;
    space = (int) &v - (__brkval == 0 ? (int) & __heap_start : (int) __brkval);
    226e:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <__brkval>
    2272:	90 91 f6 05 	lds	r25, 0x05F6	; 0x8005f6 <__brkval+0x1>
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	11 f4       	brne	.+4      	; 0x227e <cli_mem_stat+0x20>
    227a:	8f ef       	ldi	r24, 0xFF	; 255
    227c:	95 e0       	ldi	r25, 0x05	; 5
    227e:	8e 01       	movw	r16, r28
    2280:	0f 5f       	subi	r16, 0xFF	; 255
    2282:	1f 4f       	sbci	r17, 0xFF	; 255
    2284:	08 1b       	sub	r16, r24
    2286:	19 0b       	sbc	r17, r25
    printf_P(PSTR(MEM_HEAPSTAT_MSG));
    2288:	87 ed       	ldi	r24, 0xD7	; 215
    228a:	92 e0       	ldi	r25, 0x02	; 2
    228c:	9f 93       	push	r25
    228e:	8f 93       	push	r24
    2290:	a2 d7       	rcall	.+3908   	; 0x31d6 <printf_P>
    printf_P(PSTR(MEM_USEDMEM_MSG), getMemoryUsed());
    2292:	0e 94 b1 05 	call	0xb62	; 0xb62 <getMemoryUsed>
    2296:	9f 93       	push	r25
    2298:	8f 93       	push	r24
    229a:	8d ec       	ldi	r24, 0xCD	; 205
    229c:	92 e0       	ldi	r25, 0x02	; 2
    229e:	9f 93       	push	r25
    22a0:	8f 93       	push	r24
    22a2:	99 d7       	rcall	.+3890   	; 0x31d6 <printf_P>
    printf_P(PSTR(MEM_FREEMEM_MSG), getFreeMemory());
    22a4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getFreeMemory>
    22a8:	9f 93       	push	r25
    22aa:	8f 93       	push	r24
    22ac:	83 ec       	ldi	r24, 0xC3	; 195
    22ae:	92 e0       	ldi	r25, 0x02	; 2
    22b0:	9f 93       	push	r25
    22b2:	8f 93       	push	r24
    22b4:	90 d7       	rcall	.+3872   	; 0x31d6 <printf_P>
    printf_P(PSTR(MEM_SPACE_HEAP_STACK_MSG));
    22b6:	83 ea       	ldi	r24, 0xA3	; 163
    22b8:	92 e0       	ldi	r25, 0x02	; 2
    22ba:	9f 93       	push	r25
    22bc:	8f 93       	push	r24
    22be:	8b d7       	rcall	.+3862   	; 0x31d6 <printf_P>
    printf_P(PSTR(MEM_SPACE_CURRENT_MSG), space);
    22c0:	1f 93       	push	r17
    22c2:	0f 93       	push	r16
    22c4:	86 e9       	ldi	r24, 0x96	; 150
    22c6:	92 e0       	ldi	r25, 0x02	; 2
    22c8:	9f 93       	push	r25
    22ca:	8f 93       	push	r24
    22cc:	84 d7       	rcall	.+3848   	; 0x31d6 <printf_P>
    printf_P(PSTR(MEM_SPACE_PREV_MSG), prev_space);
    22ce:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <prev_space.2668+0x1>
    22d2:	8f 93       	push	r24
    22d4:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <prev_space.2668>
    22d8:	8f 93       	push	r24
    22da:	89 e8       	ldi	r24, 0x89	; 137
    22dc:	92 e0       	ldi	r25, 0x02	; 2
    22de:	9f 93       	push	r25
    22e0:	8f 93       	push	r24
    22e2:	79 d7       	rcall	.+3826   	; 0x31d6 <printf_P>
    printf_P(PSTR(MEM_SPACE_CHANGE_MSG), space - prev_space);
    22e4:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <prev_space.2668>
    22e8:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <prev_space.2668+0x1>
    22ec:	98 01       	movw	r18, r16
    22ee:	28 1b       	sub	r18, r24
    22f0:	39 0b       	sbc	r19, r25
    22f2:	c9 01       	movw	r24, r18
    22f4:	9f 93       	push	r25
    22f6:	2f 93       	push	r18
    22f8:	8c e7       	ldi	r24, 0x7C	; 124
    22fa:	92 e0       	ldi	r25, 0x02	; 2
    22fc:	9f 93       	push	r25
    22fe:	8f 93       	push	r24
    2300:	6a d7       	rcall	.+3796   	; 0x31d6 <printf_P>
    printf_P(PSTR(MEM_FREELIST_MSG));
    2302:	81 e7       	ldi	r24, 0x71	; 113
    2304:	92 e0       	ldi	r25, 0x02	; 2
    2306:	9f 93       	push	r25
    2308:	8f 93       	push	r24
    230a:	65 d7       	rcall	.+3786   	; 0x31d6 <printf_P>
    printf_P(PSTR(MEM_FREELIST_SIZE_MSG), getFreeListSize());
    230c:	0e 94 19 06 	call	0xc32	; 0xc32 <getFreeListSize>
    2310:	9f 93       	push	r25
    2312:	8f 93       	push	r24
    2314:	8e e5       	ldi	r24, 0x5E	; 94
    2316:	92 e0       	ldi	r25, 0x02	; 2
    2318:	9f 93       	push	r25
    231a:	8f 93       	push	r24
    231c:	5c d7       	rcall	.+3768   	; 0x31d6 <printf_P>
    printf_P(PSTR(MEM_FREELIST_BLOCKS_MSG),
    231e:	0e 94 07 06 	call	0xc0e	; 0xc0e <getNumberOfBlocksInFreeList>
    2322:	9f 93       	push	r25
    2324:	8f 93       	push	r24
    2326:	8f e3       	ldi	r24, 0x3F	; 63
    2328:	92 e0       	ldi	r25, 0x02	; 2
    232a:	9f 93       	push	r25
    232c:	8f 93       	push	r24
    232e:	53 d7       	rcall	.+3750   	; 0x31d6 <printf_P>
    getNumberOfBlocksInFreeList());
    printf_P(PSTR(MEM_LARGEST_BLOCK_MSG), getLargestBlockInFreeList());
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getLargestBlockInFreeList>
    233e:	9f 93       	push	r25
    2340:	8f 93       	push	r24
    2342:	80 e2       	ldi	r24, 0x20	; 32
    2344:	92 e0       	ldi	r25, 0x02	; 2
    2346:	9f 93       	push	r25
    2348:	8f 93       	push	r24
    234a:	45 d7       	rcall	.+3722   	; 0x31d6 <printf_P>
    printf_P(PSTR(MEM_LARGEST_FL_BLOCK_MSG),
    234c:	0e 94 52 06 	call	0xca4	; 0xca4 <getLargestAvailableMemoryBlock>
    2350:	9f 93       	push	r25
    2352:	8f 93       	push	r24
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	92 e0       	ldi	r25, 0x02	; 2
    2358:	9f 93       	push	r25
    235a:	8f 93       	push	r24
    235c:	3c d7       	rcall	.+3704   	; 0x31d6 <printf_P>
    getLargestAvailableMemoryBlock());
    printf_P(PSTR(MEM_LARGEST_ALL_BLOCK_MSG), getLargestNonFreeListBlock());
    235e:	0e 94 30 06 	call	0xc60	; 0xc60 <getLargestNonFreeListBlock>
    2362:	9f 93       	push	r25
    2364:	8f 93       	push	r24
    2366:	82 ee       	ldi	r24, 0xE2	; 226
    2368:	91 e0       	ldi	r25, 0x01	; 1
    236a:	9f 93       	push	r25
    236c:	8f 93       	push	r24
    236e:	33 d7       	rcall	.+3686   	; 0x31d6 <printf_P>
    prev_space = space;
    2370:	10 93 71 05 	sts	0x0571, r17	; 0x800571 <prev_space.2668+0x1>
    2374:	00 93 70 05 	sts	0x0570, r16	; 0x800570 <prev_space.2668>
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
}
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	1f 91       	pop	r17
    238c:	0f 91       	pop	r16
    238e:	08 95       	ret

00002390 <cli_print>:
};


void cli_print(const char *str)
{
    printf("%s", str);
    2390:	9f 93       	push	r25
    2392:	8f 93       	push	r24
    2394:	8b ea       	ldi	r24, 0xAB	; 171
    2396:	92 e0       	ldi	r25, 0x02	; 2
    2398:	9f 93       	push	r25
    239a:	8f 93       	push	r24
    239c:	09 d7       	rcall	.+3602   	; 0x31b0 <printf>
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	08 95       	ret

000023a8 <cli_get_char>:
}

/*Summary: non-blocking method receives input from CLI*/
char cli_get_char(void)
{
    if (uart0_peek() != UART_NO_DATA)
    23a8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <uart0_peek>
    23ac:	81 15       	cp	r24, r1
    23ae:	91 40       	sbci	r25, 0x01	; 1
    23b0:	19 f0       	breq	.+6      	; 0x23b8 <cli_get_char+0x10>
    {
        return uart0_getc() & UART_STATUS_MASK;
    23b2:	0c 94 c6 04 	jmp	0x98c	; 0x98c <uart0_getc>
    23b6:	08 95       	ret
    }
    else
    {
        return 0x00;
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    23ba:	08 95       	ret

000023bc <print_version>:
    }
}


void print_version(FILE *stream)
{
    23bc:	cf 93       	push	r28
    23be:	df 93       	push	r29
    23c0:	c8 2f       	mov	r28, r24
    23c2:	d9 2f       	mov	r29, r25
    //Print version to UART3 console
    fprintf_P(stream, PSTR(VER_FW),
    23c4:	83 e3       	ldi	r24, 0x33	; 51
    23c6:	94 e0       	ldi	r25, 0x04	; 4
    23c8:	9f 93       	push	r25
    23ca:	8f 93       	push	r24
    23cc:	87 e2       	ldi	r24, 0x27	; 39
    23ce:	94 e0       	ldi	r25, 0x04	; 4
    23d0:	9f 93       	push	r25
    23d2:	8f 93       	push	r24
    23d4:	81 e1       	ldi	r24, 0x11	; 17
    23d6:	94 e0       	ldi	r25, 0x04	; 4
    23d8:	9f 93       	push	r25
    23da:	8f 93       	push	r24
    23dc:	84 ef       	ldi	r24, 0xF4	; 244
    23de:	93 e0       	ldi	r25, 0x03	; 3
    23e0:	9f 93       	push	r25
    23e2:	8f 93       	push	r24
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	8f d6       	rcall	.+3358   	; 0x3108 <fprintf_P>
    PSTR("GIT VERSION! Replace!"/*GIT_DESCR*/), PSTR(__DATE__), PSTR(__TIME__));
    fprintf_P(stream, PSTR(VER_LIBC " " VER_GCC "\n"),
    23ea:	8e ee       	ldi	r24, 0xEE	; 238
    23ec:	93 e0       	ldi	r25, 0x03	; 3
    23ee:	9f 93       	push	r25
    23f0:	8f 93       	push	r24
    23f2:	81 ec       	ldi	r24, 0xC1	; 193
    23f4:	93 e0       	ldi	r25, 0x03	; 3
    23f6:	9f 93       	push	r25
    23f8:	8f 93       	push	r24
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	84 d6       	rcall	.+3336   	; 0x3108 <fprintf_P>
    2400:	8d b7       	in	r24, 0x3d	; 61
    2402:	9e b7       	in	r25, 0x3e	; 62
    2404:	40 96       	adiw	r24, 0x10	; 16
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	9e bf       	out	0x3e, r25	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	8d bf       	out	0x3d, r24	; 61
    PSTR(__AVR_LIBC_VERSION_STRING__));
}
    2410:	df 91       	pop	r29
    2412:	cf 91       	pop	r28
    2414:	08 95       	ret

00002416 <cli_print_ver>:


void cli_print_ver(const char *const *argv)
{
    (void) argv;
    printf_P(PSTR("\n"));
    2416:	8f eb       	ldi	r24, 0xBF	; 191
    2418:	93 e0       	ldi	r25, 0x03	; 3
    241a:	9f 93       	push	r25
    241c:	8f 93       	push	r24
    241e:	db d6       	rcall	.+3510   	; 0x31d6 <printf_P>
    print_version (stdout);
    2420:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <__iob+0x2>
    2424:	90 91 fc 05 	lds	r25, 0x05FC	; 0x8005fc <__iob+0x3>
    2428:	c9 df       	rcall	.-110    	; 0x23bc <print_version>
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	08 95       	ret

00002430 <cli_print_cmd_error>:


/*Summary: print error message, if CLI command is not found*/
void cli_print_cmd_error(void)
{
    printf_P(PSTR("\n"));
    2430:	89 eb       	ldi	r24, 0xB9	; 185
    2432:	93 e0       	ldi	r25, 0x03	; 3
    2434:	9f 93       	push	r25
    2436:	8f 93       	push	r24
    2438:	ce d6       	rcall	.+3484   	; 0x31d6 <printf_P>
    printf_P(PSTR(CLI_MISSING_CMD_MSG));
    243a:	87 e8       	ldi	r24, 0x87	; 135
    243c:	93 e0       	ldi	r25, 0x03	; 3
    243e:	9f 93       	push	r25
    2440:	8f 93       	push	r24
    2442:	c9 d6       	rcall	.+3474   	; 0x31d6 <printf_P>
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	08 95       	ret

0000244e <cli_print_cmd_arg_error>:


/*Summary: print error message, if arguments for CLI command are missing or excessive*/
void cli_print_cmd_arg_error(void)
{
    printf_P(PSTR("\n"));
    244e:	85 e8       	ldi	r24, 0x85	; 133
    2450:	93 e0       	ldi	r25, 0x03	; 3
    2452:	9f 93       	push	r25
    2454:	8f 93       	push	r24
    2456:	bf d6       	rcall	.+3454   	; 0x31d6 <printf_P>
    printf_P(PSTR(CLI_ARGS_MSG));
    2458:	8c e4       	ldi	r24, 0x4C	; 76
    245a:	93 e0       	ldi	r25, 0x03	; 3
    245c:	9f 93       	push	r25
    245e:	8f 93       	push	r24
    2460:	ba d6       	rcall	.+3444   	; 0x31d6 <printf_P>
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	08 95       	ret

0000246c <cli_execute>:
}


/*Summary: Handles CLI inputs, validates it and calls relevant functions, connected to command names*/
int cli_execute(int argc, const char *const *argv)
{
    246c:	8f 92       	push	r8
    246e:	9f 92       	push	r9
    2470:	af 92       	push	r10
    2472:	bf 92       	push	r11
    2474:	cf 92       	push	r12
    2476:	df 92       	push	r13
    2478:	ef 92       	push	r14
    247a:	ff 92       	push	r15
    247c:	0f 93       	push	r16
    247e:	1f 93       	push	r17
    2480:	cf 93       	push	r28
    2482:	df 93       	push	r29
    2484:	5c 01       	movw	r10, r24
    2486:	6b 01       	movw	r12, r22

    for (uint8_t i = 0; i < NUM_ELEMS(cli_cmds); i++)
    {
        if (!strcmp_P(argv[0], cli_cmds[i].cmd))
    2488:	fb 01       	movw	r30, r22
    248a:	00 81       	ld	r16, Z
    248c:	11 81       	ldd	r17, Z+1	; 0x01
    248e:	0f 2e       	mov	r0, r31
    2490:	fe ea       	ldi	r31, 0xAE	; 174
    2492:	8f 2e       	mov	r8, r31
    2494:	f2 e0       	ldi	r31, 0x02	; 2
    2496:	9f 2e       	mov	r9, r31
    2498:	f0 2d       	mov	r31, r0
    249a:	c0 e0       	ldi	r28, 0x00	; 0
    249c:	d0 e0       	ldi	r29, 0x00	; 0
    249e:	f4 01       	movw	r30, r8
    24a0:	60 81       	ld	r22, Z
    24a2:	71 81       	ldd	r23, Z+1	; 0x01
    24a4:	c8 01       	movw	r24, r16
    24a6:	c8 d5       	rcall	.+2960   	; 0x3038 <strcmp_P>
    24a8:	89 2b       	or	r24, r25
    24aa:	31 f5       	brne	.+76     	; 0x24f8 <cli_execute+0x8c>
        {
            // Test do we have correct arguments to run command
            // Function arguments count shall be defined in struct
            if ((argc - 1) != cli_cmds[i].func_argc)
    24ac:	f1 e0       	ldi	r31, 0x01	; 1
    24ae:	af 1a       	sub	r10, r31
    24b0:	b1 08       	sbc	r11, r1
    24b2:	fe 01       	movw	r30, r28
    24b4:	ee 0f       	add	r30, r30
    24b6:	ff 1f       	adc	r31, r31
    24b8:	ee 0f       	add	r30, r30
    24ba:	ff 1f       	adc	r31, r31
    24bc:	ee 0f       	add	r30, r30
    24be:	ff 1f       	adc	r31, r31
    24c0:	ec 1b       	sub	r30, r28
    24c2:	fd 0b       	sbc	r31, r29
    24c4:	e2 55       	subi	r30, 0x52	; 82
    24c6:	fd 4f       	sbci	r31, 0xFD	; 253
    24c8:	86 81       	ldd	r24, Z+6	; 0x06
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a8 16       	cp	r10, r24
    24ce:	b9 06       	cpc	r11, r25
    24d0:	11 f0       	breq	.+4      	; 0x24d6 <cli_execute+0x6a>
            {
                cli_print_cmd_arg_error();
    24d2:	bd df       	rcall	.-134    	; 0x244e <cli_print_cmd_arg_error>
                return 0;
    24d4:	19 c0       	rjmp	.+50     	; 0x2508 <cli_execute+0x9c>
            }

            // Hand argv over to function pointer,
            // cross fingers and hope that function handles it properly
            cli_cmds[i].func_p (argv);
    24d6:	fe 01       	movw	r30, r28
    24d8:	ee 0f       	add	r30, r30
    24da:	ff 1f       	adc	r31, r31
    24dc:	ee 0f       	add	r30, r30
    24de:	ff 1f       	adc	r31, r31
    24e0:	ee 0f       	add	r30, r30
    24e2:	ff 1f       	adc	r31, r31
    24e4:	ec 1b       	sub	r30, r28
    24e6:	fd 0b       	sbc	r31, r29
    24e8:	e2 55       	subi	r30, 0x52	; 82
    24ea:	fd 4f       	sbci	r31, 0xFD	; 253
    24ec:	04 80       	ldd	r0, Z+4	; 0x04
    24ee:	f5 81       	ldd	r31, Z+5	; 0x05
    24f0:	e0 2d       	mov	r30, r0
    24f2:	c6 01       	movw	r24, r12
    24f4:	19 95       	eicall
            return 0;
    24f6:	08 c0       	rjmp	.+16     	; 0x2508 <cli_execute+0x9c>
    24f8:	21 96       	adiw	r28, 0x01	; 1
    24fa:	87 e0       	ldi	r24, 0x07	; 7
    24fc:	88 0e       	add	r8, r24
    24fe:	91 1c       	adc	r9, r1

/*Summary: Handles CLI inputs, validates it and calls relevant functions, connected to command names*/
int cli_execute(int argc, const char *const *argv)
{

    for (uint8_t i = 0; i < NUM_ELEMS(cli_cmds); i++)
    2500:	c9 30       	cpi	r28, 0x09	; 9
    2502:	d1 05       	cpc	r29, r1
    2504:	61 f6       	brne	.-104    	; 0x249e <cli_execute+0x32>
            cli_cmds[i].func_p (argv);
            return 0;
        }
    }

    cli_print_cmd_error();
    2506:	94 df       	rcall	.-216    	; 0x2430 <cli_print_cmd_error>
    return 0;
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	df 91       	pop	r29
    250e:	cf 91       	pop	r28
    2510:	1f 91       	pop	r17
    2512:	0f 91       	pop	r16
    2514:	ff 90       	pop	r15
    2516:	ef 90       	pop	r14
    2518:	df 90       	pop	r13
    251a:	cf 90       	pop	r12
    251c:	bf 90       	pop	r11
    251e:	af 90       	pop	r10
    2520:	9f 90       	pop	r9
    2522:	8f 90       	pop	r8
    2524:	08 95       	ret

00002526 <main>:


/*Summary: call functions for hardware, input/outputs initialization, prints start messages to consoles
and keep program running in infinite loop.*/
void main (void)
{
    2526:	cf 93       	push	r28
    2528:	df 93       	push	r29
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	6b 97       	sbiw	r28, 0x1b	; 27
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61


static inline void initialize_io()
{
    /* Set pin 3 of PORTA for output */
    DDRA |= _BV(DDA3);
    253a:	0b 9a       	sbi	0x01, 3	; 1
    /* Init in/out console in UART0*/
    uart0_init(UART_BAUD_SELECT(BAUD, F_CPU));
    253c:	87 e6       	ldi	r24, 0x67	; 103
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	0e 94 ad 04 	call	0x95a	; 0x95a <uart0_init>
    stdin = stdout = &uart0_io;
    2544:	09 ef       	ldi	r16, 0xF9	; 249
    2546:	15 e0       	ldi	r17, 0x05	; 5
    2548:	88 e1       	ldi	r24, 0x18	; 24
    254a:	92 e0       	ldi	r25, 0x02	; 2
    254c:	f8 01       	movw	r30, r16
    254e:	93 83       	std	Z+3, r25	; 0x03
    2550:	82 83       	std	Z+2, r24	; 0x02
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	80 83       	st	Z, r24
    /* Init error console in UART3*/
    uart3_init(UART_BAUD_SELECT(BAUD, F_CPU));
    2556:	87 e6       	ldi	r24, 0x67	; 103
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	0e 94 7f 05 	call	0xafe	; 0xafe <uart3_init>
    stderr = &uart3_out;
    255e:	8a e0       	ldi	r24, 0x0A	; 10
    2560:	92 e0       	ldi	r25, 0x02	; 2
    2562:	f8 01       	movw	r30, r16
    2564:	95 83       	std	Z+5, r25	; 0x05
    2566:	84 83       	std	Z+4, r24	; 0x04
microrl_t *prl = &rl;


static inline void init_system_clock(void)
{
    TCCR5A = 0; // Clear control register A
    2568:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    TCCR5B = 0; // Clear control register B
    256c:	e1 e2       	ldi	r30, 0x21	; 33
    256e:	f1 e0       	ldi	r31, 0x01	; 1
    2570:	10 82       	st	Z, r1
    TCCR5B |= _BV(WGM52) | _BV(CS52); // CTC and fCPU/256
    2572:	80 81       	ld	r24, Z
    2574:	8c 60       	ori	r24, 0x0C	; 12
    2576:	80 83       	st	Z, r24
    OCR5A = 62549; // 1 s
    2578:	85 e5       	ldi	r24, 0x55	; 85
    257a:	94 ef       	ldi	r25, 0xF4	; 244
    257c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    2580:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    TIMSK5 |= _BV(OCIE5A); // Output Compare A match Interrupt Enable
    2584:	e3 e7       	ldi	r30, 0x73	; 115
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	82 60       	ori	r24, 0x02	; 2
    258c:	80 83       	st	Z, r24


static inline void initialize_lcd()
{
    /* Initialize display and clear screen */
    lcd_init();
    258e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <lcd_init>
    lcd_clrscr();
    2592:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <lcd_clrscr>


static inline void initialize_interrupts()
{
    /* System Enable Interrupts */
    sei();
    2596:	78 94       	sei


static inline void initialize_rfid(void)
{
    //Initialize RFID reader HW
    MFRC522_init();
    2598:	26 d8       	rcall	.-4020   	; 0x15e6 <MFRC522_init>
    PCD_Init();
    259a:	3f d9       	rcall	.-3458   	; 0x181a <PCD_Init>
}


static inline void initialize_lock() {
    //set Data Direction register of port A as output
    DDRA |= _BV(DDA1);
    259c:	09 9a       	sbi	0x01, 1	; 1
}


static inline void print_console (void)
{
    print_version(stderr);
    259e:	f8 01       	movw	r30, r16
    25a0:	84 81       	ldd	r24, Z+4	; 0x04
    25a2:	95 81       	ldd	r25, Z+5	; 0x05
    25a4:	0b df       	rcall	.-490    	; 0x23bc <print_version>
    //print student name
    fprintf_P(stdout, PSTR(STUD_NAME));
    25a6:	85 ec       	ldi	r24, 0xC5	; 197
    25a8:	96 e0       	ldi	r25, 0x06	; 6
    25aa:	9f 93       	push	r25
    25ac:	8f 93       	push	r24
    25ae:	f8 01       	movw	r30, r16
    25b0:	83 81       	ldd	r24, Z+3	; 0x03
    25b2:	8f 93       	push	r24
    25b4:	82 81       	ldd	r24, Z+2	; 0x02
    25b6:	8f 93       	push	r24
    25b8:	a7 d5       	rcall	.+2894   	; 0x3108 <fprintf_P>
    fputc('\n', stdout); // Add a new line to the uart printout
    25ba:	f8 01       	movw	r30, r16
    25bc:	62 81       	ldd	r22, Z+2	; 0x02
    25be:	73 81       	ldd	r23, Z+3	; 0x03
    25c0:	8a e0       	ldi	r24, 0x0A	; 10
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	bd d5       	rcall	.+2938   	; 0x3140 <fputc>
    fprintf_P(stdout, PSTR(CLI_START_MSG));
    25c6:	8e e3       	ldi	r24, 0x3E	; 62
    25c8:	96 e0       	ldi	r25, 0x06	; 6
    25ca:	9f 93       	push	r25
    25cc:	8f 93       	push	r24
    25ce:	f8 01       	movw	r30, r16
    25d0:	83 81       	ldd	r24, Z+3	; 0x03
    25d2:	8f 93       	push	r24
    25d4:	82 81       	ldd	r24, Z+2	; 0x02
    25d6:	8f 93       	push	r24
    25d8:	97 d5       	rcall	.+2862   	; 0x3108 <fprintf_P>
    lcd_puts_P(PSTR(STUD_NAME));
    25da:	8d e2       	ldi	r24, 0x2D	; 45
    25dc:	96 e0       	ldi	r25, 0x06	; 6
    25de:	0e 94 0e 07 	call	0xe1c	; 0xe1c <lcd_puts_P>
    fputc('\n', stdout); // Add a new line to the uart printout
    25e2:	f8 01       	movw	r30, r16
    25e4:	62 81       	ldd	r22, Z+2	; 0x02
    25e6:	73 81       	ldd	r23, Z+3	; 0x03
    25e8:	8a e0       	ldi	r24, 0x0A	; 10
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	a9 d5       	rcall	.+2898   	; 0x3140 <fputc>


static inline void start_cli(void)
{
    // Call init with ptr to microrl instance and print callback
    microrl_init (prl, cli_print);
    25ee:	68 ec       	ldi	r22, 0xC8	; 200
    25f0:	71 e1       	ldi	r23, 0x11	; 17
    25f2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <prl>
    25f6:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <prl+0x1>
    25fa:	0e 94 0f 09 	call	0x121e	; 0x121e <microrl_init>
    // Set callback for execute
    microrl_set_execute_callback (prl, cli_execute);
    25fe:	66 e3       	ldi	r22, 0x36	; 54
    2600:	72 e1       	ldi	r23, 0x12	; 18
    2602:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <prl>
    2606:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <prl+0x1>
    260a:	0e 94 36 09 	call	0x126c	; 0x126c <microrl_set_execute_callback>
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	cd bf       	out	0x3d, r28	; 61
    }

    if (current_time != system_time_copy)
    {
        /* Toggle led */
        PORTA ^= _BV(PORTA3);
    2618:	68 94       	set
    261a:	99 24       	eor	r9, r9
    261c:	93 f8       	bld	r9, 3
        /* Printout system uptime */
        fprintf_P(stderr, PSTR(LBL_UPTIME ": %lu s\n"), system_time_copy);
    261e:	0f 2e       	mov	r0, r31
    2620:	fe e1       	ldi	r31, 0x1E	; 30
    2622:	af 2e       	mov	r10, r31
    2624:	f6 e0       	ldi	r31, 0x06	; 6
    2626:	bf 2e       	mov	r11, r31
    2628:	f0 2d       	mov	r31, r0
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    262a:	f8 94       	cli
    static uint32_t current_time;
    uint32_t system_time_copy;
    /*Copy of system_time using atomic block*/
    ATOMIC_BLOCK(ATOMIC_FORCEON)
    {
        system_time_copy = system_time;
    262c:	c0 90 f1 05 	lds	r12, 0x05F1	; 0x8005f1 <system_time>
    2630:	d0 90 f2 05 	lds	r13, 0x05F2	; 0x8005f2 <system_time+0x1>
    2634:	e0 90 f3 05 	lds	r14, 0x05F3	; 0x8005f3 <system_time+0x2>
    2638:	f0 90 f4 05 	lds	r15, 0x05F4	; 0x8005f4 <system_time+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    263c:	78 94       	sei
    }

    if (current_time != system_time_copy)
    263e:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <current_time.2457>
    2642:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <current_time.2457+0x1>
    2646:	a0 91 7c 05 	lds	r26, 0x057C	; 0x80057c <current_time.2457+0x2>
    264a:	b0 91 7d 05 	lds	r27, 0x057D	; 0x80057d <current_time.2457+0x3>
    264e:	c8 16       	cp	r12, r24
    2650:	d9 06       	cpc	r13, r25
    2652:	ea 06       	cpc	r14, r26
    2654:	fb 06       	cpc	r15, r27
    2656:	a1 f0       	breq	.+40     	; 0x2680 <main+0x15a>
    {
        /* Toggle led */
        PORTA ^= _BV(PORTA3);
    2658:	82 b1       	in	r24, 0x02	; 2
    265a:	89 25       	eor	r24, r9
    265c:	82 b9       	out	0x02, r24	; 2
        /* Printout system uptime */
        fprintf_P(stderr, PSTR(LBL_UPTIME ": %lu s\n"), system_time_copy);
    265e:	ff 92       	push	r15
    2660:	ef 92       	push	r14
    2662:	df 92       	push	r13
    2664:	cf 92       	push	r12
    2666:	bf 92       	push	r11
    2668:	af 92       	push	r10
    266a:	f8 01       	movw	r30, r16
    266c:	85 81       	ldd	r24, Z+5	; 0x05
    266e:	8f 93       	push	r24
    2670:	84 81       	ldd	r24, Z+4	; 0x04
    2672:	8f 93       	push	r24
    2674:	49 d5       	rcall	.+2706   	; 0x3108 <fprintf_P>
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	de bf       	out	0x3e, r29	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	cd bf       	out	0x3d, r28	; 61
    }

    current_time = system_time_copy;
    2680:	c0 92 7a 05 	sts	0x057A, r12	; 0x80057a <current_time.2457>
    2684:	d0 92 7b 05 	sts	0x057B, r13	; 0x80057b <current_time.2457+0x1>
    2688:	e0 92 7c 05 	sts	0x057C, r14	; 0x80057c <current_time.2457+0x2>
    268c:	f0 92 7d 05 	sts	0x057D, r15	; 0x80057d <current_time.2457+0x3>
    start_cli();
    
    while (1)
    {
        heartbeat();
        microrl_insert_char(prl, cli_get_char());
    2690:	8b de       	rcall	.-746    	; 0x23a8 <cli_get_char>
    2692:	68 2f       	mov	r22, r24
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <prl>
    269a:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <prl+0x1>
    269e:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <microrl_insert_char>
If card found - display holder name & open the lock for 2 seconds, if not - display error message and close lock. Messages duration 3 secs*/
static inline void lock_keeper()
{
    Uid uid;
    card_t card;
    uint32_t time_cur = system_time; //note current time
    26a2:	40 90 f1 05 	lds	r4, 0x05F1	; 0x8005f1 <system_time>
    26a6:	50 90 f2 05 	lds	r5, 0x05F2	; 0x8005f2 <system_time+0x1>
    26aa:	60 90 f3 05 	lds	r6, 0x05F3	; 0x8005f3 <system_time+0x2>
    26ae:	70 90 f4 05 	lds	r7, 0x05F4	; 0x8005f4 <system_time+0x3>
    static uint32_t message_start_time;
    static uint32_t lock_open_start;
    if (PICC_IsNewCardPresent())
    26b2:	dc db       	rcall	.-2120   	; 0x1e6c <PICC_IsNewCardPresent>
    26b4:	88 23       	and	r24, r24
    26b6:	09 f4       	brne	.+2      	; 0x26ba <main+0x194>
    26b8:	3e c0       	rjmp	.+124    	; 0x2736 <main+0x210>
    {
        PICC_ReadCardSerial(&uid);
    26ba:	ce 01       	movw	r24, r28
    26bc:	40 96       	adiw	r24, 0x10	; 16
    26be:	ef db       	rcall	.-2082   	; 0x1e9e <PICC_ReadCardSerial>
        card.uid_size = uid.size;
    26c0:	48 89       	ldd	r20, Y+16	; 0x10
    26c2:	49 83       	std	Y+1, r20	; 0x01
        memcpy(&card.uid, &uid.uidByte, uid.size);
    26c4:	50 e0       	ldi	r21, 0x00	; 0
    26c6:	be 01       	movw	r22, r28
    26c8:	6f 5e       	subi	r22, 0xEF	; 239
    26ca:	7f 4f       	sbci	r23, 0xFF	; 255
    26cc:	ce 01       	movw	r24, r28
    26ce:	02 96       	adiw	r24, 0x02	; 2
    26d0:	d7 d4       	rcall	.+2478   	; 0x3080 <memcpy>
        card.user = NULL;
    26d2:	1d 86       	std	Y+13, r1	; 0x0d
    26d4:	1c 86       	std	Y+12, r1	; 0x0c
        card_t *found_card = rfid_find_card(&card);
    26d6:	ce 01       	movw	r24, r28
    26d8:	01 96       	adiw	r24, 0x01	; 1
    26da:	ab d1       	rcall	.+854    	; 0x2a32 <rfid_find_card>
    26dc:	7c 01       	movw	r14, r24
        if (found_card)
    26de:	89 2b       	or	r24, r25
    26e0:	71 f0       	breq	.+28     	; 0x26fe <main+0x1d8>
        {
            lcd_clr(0X40, 16); //clears screen line 2
    26e2:	60 e1       	ldi	r22, 0x10	; 16
    26e4:	80 e4       	ldi	r24, 0x40	; 64
    26e6:	0e 94 b4 07 	call	0xf68	; 0xf68 <lcd_clr>
            lcd_goto(0x40);
    26ea:	80 e4       	ldi	r24, 0x40	; 64
    26ec:	0e 94 e6 06 	call	0xdcc	; 0xdcc <lcd_goto>
            lcd_puts(found_card->user); // display card holder name message
    26f0:	f7 01       	movw	r30, r14
    26f2:	83 85       	ldd	r24, Z+11	; 0x0b
    26f4:	94 85       	ldd	r25, Z+12	; 0x0c
    26f6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <lcd_puts>

            PORTA |= _BV(PORTA1); // sets port A, pin 1 as "high" - "Lock is opened"
    26fa:	11 9a       	sbi	0x02, 1	; 2
    26fc:	0c c0       	rjmp	.+24     	; 0x2716 <main+0x1f0>
        }
        else
        {
            PORTA &= ~_BV(PORTA1); // sets port A, pin 1 as "low" - "Lock is closed"
    26fe:	11 98       	cbi	0x02, 1	; 2
            lcd_clr(0X40, 16);
    2700:	60 e1       	ldi	r22, 0x10	; 16
    2702:	80 e4       	ldi	r24, 0x40	; 64
    2704:	0e 94 b4 07 	call	0xf68	; 0xf68 <lcd_clr>
            lcd_goto(0x40);
    2708:	80 e4       	ldi	r24, 0x40	; 64
    270a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <lcd_goto>
            lcd_puts_P(access_denied_msg); //display access denied message
    270e:	87 e9       	ldi	r24, 0x97	; 151
    2710:	94 e0       	ldi	r25, 0x04	; 4
    2712:	0e 94 0e 07 	call	0xe1c	; 0xe1c <lcd_puts_P>
        }
        lock_open_start = time_cur; //note time when lock was opened
    2716:	40 92 76 05 	sts	0x0576, r4	; 0x800576 <lock_open_start.2472>
    271a:	50 92 77 05 	sts	0x0577, r5	; 0x800577 <lock_open_start.2472+0x1>
    271e:	60 92 78 05 	sts	0x0578, r6	; 0x800578 <lock_open_start.2472+0x2>
    2722:	70 92 79 05 	sts	0x0579, r7	; 0x800579 <lock_open_start.2472+0x3>
        message_start_time = time_cur; // note time when message was put to LCD
    2726:	40 92 72 05 	sts	0x0572, r4	; 0x800572 <message_start_time.2471>
    272a:	50 92 73 05 	sts	0x0573, r5	; 0x800573 <message_start_time.2471+0x1>
    272e:	60 92 74 05 	sts	0x0574, r6	; 0x800574 <message_start_time.2471+0x2>
    2732:	70 92 75 05 	sts	0x0575, r7	; 0x800575 <message_start_time.2471+0x3>
    }

    if ((message_start_time + 3) < time_cur)  //count 3 seconds
    2736:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <message_start_time.2471>
    273a:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <message_start_time.2471+0x1>
    273e:	a0 91 74 05 	lds	r26, 0x0574	; 0x800574 <message_start_time.2471+0x2>
    2742:	b0 91 75 05 	lds	r27, 0x0575	; 0x800575 <message_start_time.2471+0x3>
    2746:	03 96       	adiw	r24, 0x03	; 3
    2748:	a1 1d       	adc	r26, r1
    274a:	b1 1d       	adc	r27, r1
    274c:	84 15       	cp	r24, r4
    274e:	95 05       	cpc	r25, r5
    2750:	a6 05       	cpc	r26, r6
    2752:	b7 05       	cpc	r27, r7
    2754:	88 f4       	brcc	.+34     	; 0x2778 <main+0x252>
    {
        message_start_time = time_cur + 3;
    2756:	d3 01       	movw	r26, r6
    2758:	c2 01       	movw	r24, r4
    275a:	03 96       	adiw	r24, 0x03	; 3
    275c:	a1 1d       	adc	r26, r1
    275e:	b1 1d       	adc	r27, r1
    2760:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <message_start_time.2471>
    2764:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <message_start_time.2471+0x1>
    2768:	a0 93 74 05 	sts	0x0574, r26	; 0x800574 <message_start_time.2471+0x2>
    276c:	b0 93 75 05 	sts	0x0575, r27	; 0x800575 <message_start_time.2471+0x3>
        lcd_clr(0X40, 16); //remove message from screen
    2770:	60 e1       	ldi	r22, 0x10	; 16
    2772:	80 e4       	ldi	r24, 0x40	; 64
    2774:	0e 94 b4 07 	call	0xf68	; 0xf68 <lcd_clr>
    }

    if ((lock_open_start + 2) < time_cur)  //count 2 seconds
    2778:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <lock_open_start.2472>
    277c:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <lock_open_start.2472+0x1>
    2780:	a0 91 78 05 	lds	r26, 0x0578	; 0x800578 <lock_open_start.2472+0x2>
    2784:	b0 91 79 05 	lds	r27, 0x0579	; 0x800579 <lock_open_start.2472+0x3>
    2788:	02 96       	adiw	r24, 0x02	; 2
    278a:	a1 1d       	adc	r26, r1
    278c:	b1 1d       	adc	r27, r1
    278e:	84 15       	cp	r24, r4
    2790:	95 05       	cpc	r25, r5
    2792:	a6 05       	cpc	r26, r6
    2794:	b7 05       	cpc	r27, r7
    2796:	08 f0       	brcs	.+2      	; 0x279a <main+0x274>
    2798:	48 cf       	rjmp	.-368    	; 0x262a <main+0x104>
    {
        PORTA &= ~_BV(PORTA1);  // sets port A, pin 1 as "low" - "Lock is closed"
    279a:	11 98       	cbi	0x02, 1	; 2
    279c:	46 cf       	rjmp	.-372    	; 0x262a <main+0x104>

0000279e <__vector_47>:
}


/* System clock ISR */
ISR(TIMER5_COMPA_vect)
{
    279e:	1f 92       	push	r1
    27a0:	0f 92       	push	r0
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	0f 92       	push	r0
    27a6:	11 24       	eor	r1, r1
    27a8:	8f 93       	push	r24
    27aa:	9f 93       	push	r25
    27ac:	af 93       	push	r26
    27ae:	bf 93       	push	r27
    system_time++;
    27b0:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <system_time>
    27b4:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <system_time+0x1>
    27b8:	a0 91 f3 05 	lds	r26, 0x05F3	; 0x8005f3 <system_time+0x2>
    27bc:	b0 91 f4 05 	lds	r27, 0x05F4	; 0x8005f4 <system_time+0x3>
    27c0:	01 96       	adiw	r24, 0x01	; 1
    27c2:	a1 1d       	adc	r26, r1
    27c4:	b1 1d       	adc	r27, r1
    27c6:	80 93 f1 05 	sts	0x05F1, r24	; 0x8005f1 <system_time>
    27ca:	90 93 f2 05 	sts	0x05F2, r25	; 0x8005f2 <system_time+0x1>
    27ce:	a0 93 f3 05 	sts	0x05F3, r26	; 0x8005f3 <system_time+0x2>
    27d2:	b0 93 f4 05 	sts	0x05F4, r27	; 0x8005f4 <system_time+0x3>
    27d6:	bf 91       	pop	r27
    27d8:	af 91       	pop	r26
    27da:	9f 91       	pop	r25
    27dc:	8f 91       	pop	r24
    27de:	0f 90       	pop	r0
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	0f 90       	pop	r0
    27e4:	1f 90       	pop	r1
    27e6:	18 95       	reti

000027e8 <print_ascii_tbl>:

#include <stdio.h>
#include "print_helper.h"

int print_ascii_tbl (FILE *stream)
{
    27e8:	ef 92       	push	r14
    27ea:	ff 92       	push	r15
    27ec:	0f 93       	push	r16
    27ee:	1f 93       	push	r17
    27f0:	cf 93       	push	r28
    27f2:	df 93       	push	r29
    27f4:	f8 2e       	mov	r15, r24
    27f6:	e9 2e       	mov	r14, r25
    27f8:	c0 e2       	ldi	r28, 0x20	; 32
    27fa:	d0 e0       	ldi	r29, 0x00	; 0
    for (char c = ' '; c <= '~'; c++)
    {
        if (!fprintf(stream, "%c ", c))
    27fc:	0d ee       	ldi	r16, 0xED	; 237
    27fe:	12 e0       	ldi	r17, 0x02	; 2
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	1f 93       	push	r17
    2806:	0f 93       	push	r16
    2808:	ef 92       	push	r14
    280a:	ff 92       	push	r15
    280c:	6e d4       	rcall	.+2268   	; 0x30ea <fprintf>
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	79 f0       	breq	.+30     	; 0x283c <print_ascii_tbl+0x54>
    281e:	21 96       	adiw	r28, 0x01	; 1
#include <stdio.h>
#include "print_helper.h"

int print_ascii_tbl (FILE *stream)
{
    for (char c = ' '; c <= '~'; c++)
    2820:	cf 37       	cpi	r28, 0x7F	; 127
    2822:	d1 05       	cpc	r29, r1
    2824:	69 f7       	brne	.-38     	; 0x2800 <print_ascii_tbl+0x18>
        {
            return 0;
        }
    }

    return fprintf(stream, "\n");
    2826:	8c e2       	ldi	r24, 0x2C	; 44
    2828:	93 e0       	ldi	r25, 0x03	; 3
    282a:	9f 93       	push	r25
    282c:	8f 93       	push	r24
    282e:	ef 92       	push	r14
    2830:	ff 92       	push	r15
    2832:	5b d4       	rcall	.+2230   	; 0x30ea <fprintf>
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
}
    283c:	df 91       	pop	r29
    283e:	cf 91       	pop	r28
    2840:	1f 91       	pop	r17
    2842:	0f 91       	pop	r16
    2844:	ff 90       	pop	r15
    2846:	ef 90       	pop	r14
    2848:	08 95       	ret

0000284a <print_for_human>:


int print_for_human (FILE *stream, const unsigned char *array, const int len)
{
    284a:	af 92       	push	r10
    284c:	bf 92       	push	r11
    284e:	cf 92       	push	r12
    2850:	df 92       	push	r13
    2852:	ef 92       	push	r14
    2854:	ff 92       	push	r15
    2856:	0f 93       	push	r16
    2858:	1f 93       	push	r17
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
    285e:	b8 2e       	mov	r11, r24
    2860:	a9 2e       	mov	r10, r25
    for (int i = 0; i < len; i++)
    2862:	14 16       	cp	r1, r20
    2864:	15 06       	cpc	r1, r21
    2866:	bc f5       	brge	.+110    	; 0x28d6 <print_for_human+0x8c>
    2868:	eb 01       	movw	r28, r22
    286a:	8b 01       	movw	r16, r22
    286c:	04 0f       	add	r16, r20
    286e:	15 1f       	adc	r17, r21
                return 0;
            }
        }
        else
        {
            if (!fprintf(stream, "\"0x%02x\"", array[i]))
    2870:	0f 2e       	mov	r0, r31
    2872:	f4 ef       	ldi	r31, 0xF4	; 244
    2874:	cf 2e       	mov	r12, r31
    2876:	f2 e0       	ldi	r31, 0x02	; 2
    2878:	df 2e       	mov	r13, r31
    287a:	f0 2d       	mov	r31, r0
{
    for (int i = 0; i < len; i++)
    {
        if (array[i] >= ' ' && array[i] <= '~')
        {
            if (!fprintf(stream, "%c", array[i]))
    287c:	0f 2e       	mov	r0, r31
    287e:	f1 ef       	ldi	r31, 0xF1	; 241
    2880:	ef 2e       	mov	r14, r31
    2882:	f2 e0       	ldi	r31, 0x02	; 2
    2884:	ff 2e       	mov	r15, r31
    2886:	f0 2d       	mov	r31, r0

int print_for_human (FILE *stream, const unsigned char *array, const int len)
{
    for (int i = 0; i < len; i++)
    {
        if (array[i] >= ' ' && array[i] <= '~')
    2888:	29 91       	ld	r18, Y+
    288a:	30 ee       	ldi	r19, 0xE0	; 224
    288c:	32 0f       	add	r19, r18
    288e:	3f 35       	cpi	r19, 0x5F	; 95
    2890:	80 f4       	brcc	.+32     	; 0x28b2 <print_for_human+0x68>
        {
            if (!fprintf(stream, "%c", array[i]))
    2892:	1f 92       	push	r1
    2894:	2f 93       	push	r18
    2896:	ff 92       	push	r15
    2898:	ef 92       	push	r14
    289a:	af 92       	push	r10
    289c:	bf 92       	push	r11
    289e:	25 d4       	rcall	.+2122   	; 0x30ea <fprintf>
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	00 97       	sbiw	r24, 0x00	; 0
    28ae:	81 f4       	brne	.+32     	; 0x28d0 <print_for_human+0x86>
    28b0:	1d c0       	rjmp	.+58     	; 0x28ec <print_for_human+0xa2>
                return 0;
            }
        }
        else
        {
            if (!fprintf(stream, "\"0x%02x\"", array[i]))
    28b2:	1f 92       	push	r1
    28b4:	2f 93       	push	r18
    28b6:	df 92       	push	r13
    28b8:	cf 92       	push	r12
    28ba:	af 92       	push	r10
    28bc:	bf 92       	push	r11
    28be:	15 d4       	rcall	.+2090   	; 0x30ea <fprintf>
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	00 97       	sbiw	r24, 0x00	; 0
    28ce:	71 f0       	breq	.+28     	; 0x28ec <print_for_human+0xa2>
}


int print_for_human (FILE *stream, const unsigned char *array, const int len)
{
    for (int i = 0; i < len; i++)
    28d0:	c0 17       	cp	r28, r16
    28d2:	d1 07       	cpc	r29, r17
    28d4:	c9 f6       	brne	.-78     	; 0x2888 <print_for_human+0x3e>
                return 0;
            }
        }
    }

    return fprintf(stream, "\n");
    28d6:	8c e2       	ldi	r24, 0x2C	; 44
    28d8:	93 e0       	ldi	r25, 0x03	; 3
    28da:	9f 93       	push	r25
    28dc:	8f 93       	push	r24
    28de:	af 92       	push	r10
    28e0:	bf 92       	push	r11
    28e2:	03 d4       	rcall	.+2054   	; 0x30ea <fprintf>
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	0f 90       	pop	r0
    28ea:	0f 90       	pop	r0
    28ec:	df 91       	pop	r29
    28ee:	cf 91       	pop	r28
    28f0:	1f 91       	pop	r17
    28f2:	0f 91       	pop	r16
    28f4:	ff 90       	pop	r15
    28f6:	ef 90       	pop	r14
    28f8:	df 90       	pop	r13
    28fa:	cf 90       	pop	r12
    28fc:	bf 90       	pop	r11
    28fe:	af 90       	pop	r10
    2900:	08 95       	ret

00002902 <rfid_print_card_info>:

card_t *head = NULL;

/*Summary: function will receive pointer to card struct and print out its info to stdout*/
void rfid_print_card_info(const card_t *card)
{
    2902:	ef 92       	push	r14
    2904:	ff 92       	push	r15
    2906:	0f 93       	push	r16
    2908:	1f 93       	push	r17
    290a:	cf 93       	push	r28
    290c:	8c 01       	movw	r16, r24
    printf_P(PSTR(CARD_UID_BRACK_MSG1));
    290e:	8c e3       	ldi	r24, 0x3C	; 60
    2910:	98 e0       	ldi	r25, 0x08	; 8
    2912:	9f 93       	push	r25
    2914:	8f 93       	push	r24
    2916:	5f d4       	rcall	.+2238   	; 0x31d6 <printf_P>
    printf("%d", card->uid_size);
    2918:	f8 01       	movw	r30, r16
    291a:	80 81       	ld	r24, Z
    291c:	1f 92       	push	r1
    291e:	8f 93       	push	r24
    2920:	8d ef       	ldi	r24, 0xFD	; 253
    2922:	92 e0       	ldi	r25, 0x02	; 2
    2924:	9f 93       	push	r25
    2926:	8f 93       	push	r24
    2928:	43 d4       	rcall	.+2182   	; 0x31b0 <printf>
    printf_P(PSTR(CARD_UID_BRACK_MSG2));
    292a:	88 e3       	ldi	r24, 0x38	; 56
    292c:	98 e0       	ldi	r25, 0x08	; 8
    292e:	9f 93       	push	r25
    2930:	8f 93       	push	r24
    2932:	51 d4       	rcall	.+2210   	; 0x31d6 <printf_P>

    for (uint8_t i = 0; i < card->uid_size; i++)
    2934:	8d b7       	in	r24, 0x3d	; 61
    2936:	9e b7       	in	r25, 0x3e	; 62
    2938:	08 96       	adiw	r24, 0x08	; 8
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	9e bf       	out	0x3e, r25	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	8d bf       	out	0x3d, r24	; 61
    2944:	f8 01       	movw	r30, r16
    2946:	80 81       	ld	r24, Z
    2948:	88 23       	and	r24, r24
    294a:	c9 f0       	breq	.+50     	; 0x297e <rfid_print_card_info+0x7c>
    294c:	c0 e0       	ldi	r28, 0x00	; 0
    {
        printf("%02X", card->uid[i]);
    294e:	0f 2e       	mov	r0, r31
    2950:	f6 ea       	ldi	r31, 0xA6	; 166
    2952:	ef 2e       	mov	r14, r31
    2954:	f2 e0       	ldi	r31, 0x02	; 2
    2956:	ff 2e       	mov	r15, r31
    2958:	f0 2d       	mov	r31, r0
    295a:	f8 01       	movw	r30, r16
    295c:	ec 0f       	add	r30, r28
    295e:	f1 1d       	adc	r31, r1
    2960:	81 81       	ldd	r24, Z+1	; 0x01
    2962:	1f 92       	push	r1
    2964:	8f 93       	push	r24
    2966:	ff 92       	push	r15
    2968:	ef 92       	push	r14
    296a:	22 d4       	rcall	.+2116   	; 0x31b0 <printf>
{
    printf_P(PSTR(CARD_UID_BRACK_MSG1));
    printf("%d", card->uid_size);
    printf_P(PSTR(CARD_UID_BRACK_MSG2));

    for (uint8_t i = 0; i < card->uid_size; i++)
    296c:	cf 5f       	subi	r28, 0xFF	; 255
    296e:	0f 90       	pop	r0
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	f8 01       	movw	r30, r16
    2978:	80 81       	ld	r24, Z
    297a:	c8 17       	cp	r28, r24
    297c:	70 f3       	brcs	.-36     	; 0x295a <rfid_print_card_info+0x58>
    {
        printf("%02X", card->uid[i]);
    }
    printf_P(PSTR(CARD_HOLDER_MSG));
    297e:	8f e2       	ldi	r24, 0x2F	; 47
    2980:	98 e0       	ldi	r25, 0x08	; 8
    2982:	9f 93       	push	r25
    2984:	8f 93       	push	r24
    2986:	27 d4       	rcall	.+2126   	; 0x31d6 <printf_P>
    printf("%s", card->user);
    2988:	f8 01       	movw	r30, r16
    298a:	84 85       	ldd	r24, Z+12	; 0x0c
    298c:	8f 93       	push	r24
    298e:	83 85       	ldd	r24, Z+11	; 0x0b
    2990:	8f 93       	push	r24
    2992:	8b ea       	ldi	r24, 0xAB	; 171
    2994:	92 e0       	ldi	r25, 0x02	; 2
    2996:	9f 93       	push	r25
    2998:	8f 93       	push	r24
    299a:	0a d4       	rcall	.+2068   	; 0x31b0 <printf>
    printf_P(PSTR("\n"));
    299c:	8d e2       	ldi	r24, 0x2D	; 45
    299e:	98 e0       	ldi	r25, 0x08	; 8
    29a0:	9f 93       	push	r25
    29a2:	8f 93       	push	r24
    29a4:	18 d4       	rcall	.+2096   	; 0x31d6 <printf_P>
    29a6:	8d b7       	in	r24, 0x3d	; 61
    29a8:	9e b7       	in	r25, 0x3e	; 62
    29aa:	08 96       	adiw	r24, 0x08	; 8
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	9e bf       	out	0x3e, r25	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	8d bf       	out	0x3d, r24	; 61
}
    29b6:	cf 91       	pop	r28
    29b8:	1f 91       	pop	r17
    29ba:	0f 91       	pop	r16
    29bc:	ff 90       	pop	r15
    29be:	ef 90       	pop	r14
    29c0:	08 95       	ret

000029c2 <rfid_print_card_list>:


/*Summary: function iterates through linked list and prints out all cards in the list using rfid_print_card_info*/
void rfid_print_card_list(void)
{
    29c2:	ef 92       	push	r14
    29c4:	ff 92       	push	r15
    29c6:	1f 93       	push	r17
    29c8:	cf 93       	push	r28
    29ca:	df 93       	push	r29
    if (head == NULL)
    29cc:	c0 91 7e 05 	lds	r28, 0x057E	; 0x80057e <head>
    29d0:	d0 91 7f 05 	lds	r29, 0x057F	; 0x80057f <head+0x1>
    29d4:	20 97       	sbiw	r28, 0x00	; 0
    29d6:	41 f4       	brne	.+16     	; 0x29e8 <rfid_print_card_list+0x26>
    {
        printf_P(PSTR(CARD_LIST_EMPTY_MSG));
    29d8:	87 e1       	ldi	r24, 0x17	; 23
    29da:	98 e0       	ldi	r25, 0x08	; 8
    29dc:	9f 93       	push	r25
    29de:	8f 93       	push	r24
    29e0:	fa d3       	rcall	.+2036   	; 0x31d6 <printf_P>
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	1f c0       	rjmp	.+62     	; 0x2a26 <rfid_print_card_list+0x64>
    else
    {
        card_t *current;
        current = head;
        uint8_t list_nr = 1;
        printf_P(PSTR(CARD_LIST_PRINT_MSG));
    29e8:	8f ef       	ldi	r24, 0xFF	; 255
    29ea:	97 e0       	ldi	r25, 0x07	; 7
    29ec:	9f 93       	push	r25
    29ee:	8f 93       	push	r24
    29f0:	f2 d3       	rcall	.+2020   	; 0x31d6 <printf_P>
    29f2:	0f 90       	pop	r0
    29f4:	0f 90       	pop	r0
    29f6:	11 e0       	ldi	r17, 0x01	; 1
        while (current != NULL)
        {
            printf("%d", list_nr);
    29f8:	0f 2e       	mov	r0, r31
    29fa:	fd ef       	ldi	r31, 0xFD	; 253
    29fc:	ef 2e       	mov	r14, r31
    29fe:	f2 e0       	ldi	r31, 0x02	; 2
    2a00:	ff 2e       	mov	r15, r31
    2a02:	f0 2d       	mov	r31, r0
    2a04:	1f 92       	push	r1
    2a06:	1f 93       	push	r17
    2a08:	ff 92       	push	r15
    2a0a:	ef 92       	push	r14
    2a0c:	d1 d3       	rcall	.+1954   	; 0x31b0 <printf>

            rfid_print_card_info(current);
    2a0e:	ce 01       	movw	r24, r28
    2a10:	78 df       	rcall	.-272    	; 0x2902 <rfid_print_card_info>

            list_nr ++;
    2a12:	1f 5f       	subi	r17, 0xFF	; 255
            current = current->next;
    2a14:	0d 84       	ldd	r0, Y+13	; 0x0d
    2a16:	de 85       	ldd	r29, Y+14	; 0x0e
    2a18:	c0 2d       	mov	r28, r0
    {
        card_t *current;
        current = head;
        uint8_t list_nr = 1;
        printf_P(PSTR(CARD_LIST_PRINT_MSG));
        while (current != NULL)
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	20 97       	sbiw	r28, 0x00	; 0
    2a24:	79 f7       	brne	.-34     	; 0x2a04 <rfid_print_card_list+0x42>

            list_nr ++;
            current = current->next;
        }
    }
}
    2a26:	df 91       	pop	r29
    2a28:	cf 91       	pop	r28
    2a2a:	1f 91       	pop	r17
    2a2c:	ff 90       	pop	r15
    2a2e:	ef 90       	pop	r14
    2a30:	08 95       	ret

00002a32 <rfid_find_card>:


/*Summary: function will receive pointer to card struct as a parameter, iterate through linked list of cards,
and do comparison of username and memory areas of UID for each card in list with received card. Returns pointer to card, if found match*/
card_t* rfid_find_card(const card_t *card)
{
    2a32:	0f 93       	push	r16
    2a34:	1f 93       	push	r17
    2a36:	cf 93       	push	r28
    2a38:	df 93       	push	r29
    if (head == NULL)
    2a3a:	c0 91 7e 05 	lds	r28, 0x057E	; 0x80057e <head>
    2a3e:	d0 91 7f 05 	lds	r29, 0x057F	; 0x80057f <head+0x1>
    2a42:	20 97       	sbiw	r28, 0x00	; 0
    2a44:	99 f0       	breq	.+38     	; 0x2a6c <rfid_find_card+0x3a>
        card_t *current;
        current = head;
        while (current != NULL)
        {

            if (!memcmp(current->uid, card->uid, current->uid_size))
    2a46:	8c 01       	movw	r16, r24
    2a48:	0f 5f       	subi	r16, 0xFF	; 255
    2a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	41 91       	ld	r20, Z+
    2a50:	50 e0       	ldi	r21, 0x00	; 0
    2a52:	b8 01       	movw	r22, r16
    2a54:	cf 01       	movw	r24, r30
    2a56:	07 d3       	rcall	.+1550   	; 0x3066 <memcmp>
    2a58:	89 2b       	or	r24, r25
    2a5a:	59 f0       	breq	.+22     	; 0x2a72 <rfid_find_card+0x40>
            {
                return current;
            }

            current = current->next;
    2a5c:	0d 84       	ldd	r0, Y+13	; 0x0d
    2a5e:	de 85       	ldd	r29, Y+14	; 0x0e
    2a60:	c0 2d       	mov	r28, r0
    }
    else
    {
        card_t *current;
        current = head;
        while (current != NULL)
    2a62:	20 97       	sbiw	r28, 0x00	; 0
    2a64:	99 f7       	brne	.-26     	; 0x2a4c <rfid_find_card+0x1a>
            }

            current = current->next;
        }
    }
    return NULL;
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	05 c0       	rjmp	.+10     	; 0x2a76 <rfid_find_card+0x44>
and do comparison of username and memory areas of UID for each card in list with received card. Returns pointer to card, if found match*/
card_t* rfid_find_card(const card_t *card)
{
    if (head == NULL)
    {
        return NULL;
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <rfid_find_card+0x44>
    2a72:	8c 2f       	mov	r24, r28
    2a74:	9d 2f       	mov	r25, r29

            current = current->next;
        }
    }
    return NULL;
}
    2a76:	df 91       	pop	r29
    2a78:	cf 91       	pop	r28
    2a7a:	1f 91       	pop	r17
    2a7c:	0f 91       	pop	r16
    2a7e:	08 95       	ret

00002a80 <rfid_add_card>:


/*Summary: function will check if scanned card(receives pointer to card struck as param) already in the list,
check memory and add card structure to linked list*/
void rfid_add_card(const card_t *card)
{
    2a80:	cf 92       	push	r12
    2a82:	df 92       	push	r13
    2a84:	ef 92       	push	r14
    2a86:	ff 92       	push	r15
    2a88:	0f 93       	push	r16
    2a8a:	1f 93       	push	r17
    2a8c:	cf 93       	push	r28
    2a8e:	df 93       	push	r29
    2a90:	ec 01       	movw	r28, r24
    card_t *found_card = rfid_find_card(card);
    2a92:	cf df       	rcall	.-98     	; 0x2a32 <rfid_find_card>
    2a94:	8c 01       	movw	r16, r24
    if (found_card)
    2a96:	89 2b       	or	r24, r25
    2a98:	51 f0       	breq	.+20     	; 0x2aae <rfid_add_card+0x2e>
    {
        printf_P(PSTR(CARD_EXISTS_MSG));
    2a9a:	8a eb       	ldi	r24, 0xBA	; 186
    2a9c:	97 e0       	ldi	r25, 0x07	; 7
    2a9e:	9f 93       	push	r25
    2aa0:	8f 93       	push	r24
    2aa2:	99 d3       	rcall	.+1842   	; 0x31d6 <printf_P>
        rfid_print_card_info(found_card);
    2aa4:	c8 01       	movw	r24, r16
    2aa6:	2d df       	rcall	.-422    	; 0x2902 <rfid_print_card_info>
        return;
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	47 c0       	rjmp	.+142    	; 0x2b3c <rfid_add_card+0xbc>
    }

    // Create structure with new card, and check possibility to allocate memory for new card, in no space - give error to console
    card_t *new_card;
    char *new_card_user;
    new_card = malloc(sizeof(card_t));
    2aae:	8f e0       	ldi	r24, 0x0F	; 15
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	91 d1       	rcall	.+802    	; 0x2dd6 <malloc>
    2ab4:	8c 01       	movw	r16, r24
    new_card_user = malloc(strlen(card->user) + 1);
    2ab6:	eb 84       	ldd	r14, Y+11	; 0x0b
    2ab8:	fc 84       	ldd	r15, Y+12	; 0x0c
    2aba:	f7 01       	movw	r30, r14
    2abc:	01 90       	ld	r0, Z+
    2abe:	00 20       	and	r0, r0
    2ac0:	e9 f7       	brne	.-6      	; 0x2abc <rfid_add_card+0x3c>
    2ac2:	cf 01       	movw	r24, r30
    2ac4:	8e 19       	sub	r24, r14
    2ac6:	9f 09       	sbc	r25, r15
    2ac8:	86 d1       	rcall	.+780    	; 0x2dd6 <malloc>
    2aca:	6c 01       	movw	r12, r24
    if (!new_card || !new_card_user)
    2acc:	01 15       	cp	r16, r1
    2ace:	11 05       	cpc	r17, r1
    2ad0:	11 f0       	breq	.+4      	; 0x2ad6 <rfid_add_card+0x56>
    2ad2:	89 2b       	or	r24, r25
    2ad4:	41 f4       	brne	.+16     	; 0x2ae6 <rfid_add_card+0x66>
    {
        printf_P(PSTR(CARD_LIST_FULL_MSG));
    2ad6:	88 e6       	ldi	r24, 0x68	; 104
    2ad8:	97 e0       	ldi	r25, 0x07	; 7
    2ada:	9f 93       	push	r25
    2adc:	8f 93       	push	r24
    2ade:	7b d3       	rcall	.+1782   	; 0x31d6 <printf_P>
        return;
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	2b c0       	rjmp	.+86     	; 0x2b3c <rfid_add_card+0xbc>
    }
    else
    {
        new_card->uid_size = card->uid_size;
    2ae6:	49 91       	ld	r20, Y+
    2ae8:	f8 01       	movw	r30, r16
    2aea:	41 93       	st	Z+, r20
    2aec:	cf 01       	movw	r24, r30
        memcpy(new_card->uid, card->uid, card->uid_size);
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	be 01       	movw	r22, r28
    2af2:	c6 d2       	rcall	.+1420   	; 0x3080 <memcpy>
        strcpy(new_card_user, card->user);
    2af4:	b7 01       	movw	r22, r14
    2af6:	c6 01       	movw	r24, r12
    2af8:	f1 d2       	rcall	.+1506   	; 0x30dc <strcpy>
        new_card->user = new_card_user;
    2afa:	f8 01       	movw	r30, r16
    2afc:	d4 86       	std	Z+12, r13	; 0x0c
    2afe:	c3 86       	std	Z+11, r12	; 0x0b
        new_card->next = NULL;
    2b00:	16 86       	std	Z+14, r1	; 0x0e
    2b02:	15 86       	std	Z+13, r1	; 0x0d
    }

    // Add card struct to linked list
    // if this is the first card in the list
    if (head == NULL)
    2b04:	e0 91 7e 05 	lds	r30, 0x057E	; 0x80057e <head>
    2b08:	f0 91 7f 05 	lds	r31, 0x057F	; 0x80057f <head+0x1>
    2b0c:	30 97       	sbiw	r30, 0x00	; 0
    2b0e:	31 f4       	brne	.+12     	; 0x2b1c <rfid_add_card+0x9c>
    {
        head = new_card;
    2b10:	10 93 7f 05 	sts	0x057F, r17	; 0x80057f <head+0x1>
    2b14:	00 93 7e 05 	sts	0x057E, r16	; 0x80057e <head>
    2b18:	08 c0       	rjmp	.+16     	; 0x2b2a <rfid_add_card+0xaa>
    {
        card_t *current;
        current = head;
        while (current->next != NULL)
        {
            current = current->next;
    2b1a:	f9 01       	movw	r30, r18
    }
    else
    {
        card_t *current;
        current = head;
        while (current->next != NULL)
    2b1c:	25 85       	ldd	r18, Z+13	; 0x0d
    2b1e:	36 85       	ldd	r19, Z+14	; 0x0e
    2b20:	21 15       	cp	r18, r1
    2b22:	31 05       	cpc	r19, r1
    2b24:	d1 f7       	brne	.-12     	; 0x2b1a <rfid_add_card+0x9a>
        {
            current = current->next;
        }
        current->next = new_card;
    2b26:	16 87       	std	Z+14, r17	; 0x0e
    2b28:	05 87       	std	Z+13, r16	; 0x0d
    }
    printf_P(PSTR(CARD_ADDING_MSG));
    2b2a:	8c e5       	ldi	r24, 0x5C	; 92
    2b2c:	97 e0       	ldi	r25, 0x07	; 7
    2b2e:	9f 93       	push	r25
    2b30:	8f 93       	push	r24
    2b32:	51 d3       	rcall	.+1698   	; 0x31d6 <printf_P>

    rfid_print_card_info(new_card);
    2b34:	c8 01       	movw	r24, r16
    2b36:	e5 de       	rcall	.-566    	; 0x2902 <rfid_print_card_info>

    return;
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
}
    2b3c:	df 91       	pop	r29
    2b3e:	cf 91       	pop	r28
    2b40:	1f 91       	pop	r17
    2b42:	0f 91       	pop	r16
    2b44:	ff 90       	pop	r15
    2b46:	ef 90       	pop	r14
    2b48:	df 90       	pop	r13
    2b4a:	cf 90       	pop	r12
    2b4c:	08 95       	ret

00002b4e <rfid_remove_card_by_uid>:


/*Summary: function convert input from console into char array. Iterate through linked list of cards, convert UID to hex and concatenate
into char array. Console array compared to array of the card. If match - linked list will adjusted and matched card removed from memory.*/
void rfid_remove_card_by_uid(const char *uid)
{
    2b4e:	7f 92       	push	r7
    2b50:	8f 92       	push	r8
    2b52:	9f 92       	push	r9
    2b54:	af 92       	push	r10
    2b56:	bf 92       	push	r11
    2b58:	cf 92       	push	r12
    2b5a:	df 92       	push	r13
    2b5c:	ef 92       	push	r14
    2b5e:	ff 92       	push	r15
    2b60:	0f 93       	push	r16
    2b62:	1f 93       	push	r17
    2b64:	cf 93       	push	r28
    2b66:	df 93       	push	r29
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    2b6c:	6e 97       	sbiw	r28, 0x1e	; 30
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	cd bf       	out	0x3d, r28	; 61

    card_t *current;
    card_t *prev;
    current = head;
    2b78:	e0 90 7e 05 	lds	r14, 0x057E	; 0x80057e <head>
    2b7c:	f0 90 7f 05 	lds	r15, 0x057F	; 0x80057f <head+0x1>
    prev = NULL;
    char cli_buf[10];
    char uid_hex_buf[10];
    char uid_buf[10];

    sprintf(cli_buf, "%s", uid);
    2b80:	bc 01       	movw	r22, r24
    2b82:	ce 01       	movw	r24, r28
    2b84:	01 96       	adiw	r24, 0x01	; 1
    2b86:	aa d2       	rcall	.+1364   	; 0x30dc <strcpy>

    if (head == NULL)
    2b88:	e1 14       	cp	r14, r1
    2b8a:	f1 04       	cpc	r15, r1
    2b8c:	41 f4       	brne	.+16     	; 0x2b9e <rfid_remove_card_by_uid+0x50>
    {
        printf_P(PSTR(CARD_LIST_EMPTY_MSG));
    2b8e:	86 e4       	ldi	r24, 0x46	; 70
    2b90:	97 e0       	ldi	r25, 0x07	; 7
    2b92:	9f 93       	push	r25
    2b94:	8f 93       	push	r24
    2b96:	1f d3       	rcall	.+1598   	; 0x31d6 <printf_P>
        return;
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	a7 c0       	rjmp	.+334    	; 0x2cec <rfid_remove_card_by_uid+0x19e>
    2b9e:	81 2c       	mov	r8, r1
    2ba0:	91 2c       	mov	r9, r1
        {
            strcpy(uid_hex_buf, "");
            strcpy(uid_buf, "");
            for (uint8_t i = 0; i < current->uid_size; i++)
            {
                sprintf(uid_hex_buf,"%X", current->uid[i]);
    2ba2:	0f 2e       	mov	r0, r31
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	af 2e       	mov	r10, r31
    2ba8:	f3 e0       	ldi	r31, 0x03	; 3
    2baa:	bf 2e       	mov	r11, r31
    2bac:	f0 2d       	mov	r31, r0
    2bae:	6e 01       	movw	r12, r28
    2bb0:	8b e0       	ldi	r24, 0x0B	; 11
    2bb2:	c8 0e       	add	r12, r24
    2bb4:	d1 1c       	adc	r13, r1
    2bb6:	7c 2c       	mov	r7, r12
    2bb8:	0d 2d       	mov	r16, r13
    2bba:	01 c0       	rjmp	.+2      	; 0x2bbe <rfid_remove_card_by_uid+0x70>
                }
                free(current);
                return;
            }
            prev = current;
            current = current->next;
    2bbc:	7c 01       	movw	r14, r24
    }
    else
    {
        while (current != NULL)
        {
            strcpy(uid_hex_buf, "");
    2bbe:	1b 86       	std	Y+11, r1	; 0x0b
            strcpy(uid_buf, "");
    2bc0:	1d 8a       	std	Y+21, r1	; 0x15
            for (uint8_t i = 0; i < current->uid_size; i++)
    2bc2:	f7 01       	movw	r30, r14
    2bc4:	80 81       	ld	r24, Z
    2bc6:	88 23       	and	r24, r24
    2bc8:	e1 f0       	breq	.+56     	; 0x2c02 <rfid_remove_card_by_uid+0xb4>
    2bca:	10 e0       	ldi	r17, 0x00	; 0
            {
                sprintf(uid_hex_buf,"%X", current->uid[i]);
    2bcc:	f7 01       	movw	r30, r14
    2bce:	e1 0f       	add	r30, r17
    2bd0:	f1 1d       	adc	r31, r1
    2bd2:	81 81       	ldd	r24, Z+1	; 0x01
    2bd4:	1f 92       	push	r1
    2bd6:	8f 93       	push	r24
    2bd8:	bf 92       	push	r11
    2bda:	af 92       	push	r10
    2bdc:	df 92       	push	r13
    2bde:	cf 92       	push	r12
    2be0:	5d d3       	rcall	.+1722   	; 0x329c <sprintf>
                strcat(uid_buf, uid_hex_buf);
    2be2:	67 2d       	mov	r22, r7
    2be4:	70 2f       	mov	r23, r16
    2be6:	ce 01       	movw	r24, r28
    2be8:	45 96       	adiw	r24, 0x15	; 21
    2bea:	64 d2       	rcall	.+1224   	; 0x30b4 <strcat>
    {
        while (current != NULL)
        {
            strcpy(uid_hex_buf, "");
            strcpy(uid_buf, "");
            for (uint8_t i = 0; i < current->uid_size; i++)
    2bec:	1f 5f       	subi	r17, 0xFF	; 255
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
    2bf8:	0f 90       	pop	r0
    2bfa:	f7 01       	movw	r30, r14
    2bfc:	80 81       	ld	r24, Z
    2bfe:	18 17       	cp	r17, r24
    2c00:	28 f3       	brcs	.-54     	; 0x2bcc <rfid_remove_card_by_uid+0x7e>
            {
                sprintf(uid_hex_buf,"%X", current->uid[i]);
                strcat(uid_buf, uid_hex_buf);
            }

            if (strcmp(cli_buf, uid_buf) == 0)
    2c02:	be 01       	movw	r22, r28
    2c04:	6b 5e       	subi	r22, 0xEB	; 235
    2c06:	7f 4f       	sbci	r23, 0xFF	; 255
    2c08:	ce 01       	movw	r24, r28
    2c0a:	01 96       	adiw	r24, 0x01	; 1
    2c0c:	5e d2       	rcall	.+1212   	; 0x30ca <strcmp>
    2c0e:	89 2b       	or	r24, r25
    2c10:	09 f0       	breq	.+2      	; 0x2c14 <rfid_remove_card_by_uid+0xc6>
    2c12:	5e c0       	rjmp	.+188    	; 0x2cd0 <rfid_remove_card_by_uid+0x182>
            {
                if(prev == NULL)
    2c14:	81 14       	cp	r8, r1
    2c16:	91 04       	cpc	r9, r1
    2c18:	69 f5       	brne	.+90     	; 0x2c74 <rfid_remove_card_by_uid+0x126>
                // Special condition when first item is removed
                // No need to change next value. Just point head to next item
                {
                    head = current->next;
    2c1a:	f7 01       	movw	r30, r14
    2c1c:	85 85       	ldd	r24, Z+13	; 0x0d
    2c1e:	96 85       	ldd	r25, Z+14	; 0x0e
    2c20:	90 93 7f 05 	sts	0x057F, r25	; 0x80057f <head+0x1>
    2c24:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <head>
                    printf_P(PSTR(CARD_REMOVING_MSG));
    2c28:	81 e3       	ldi	r24, 0x31	; 49
    2c2a:	97 e0       	ldi	r25, 0x07	; 7
    2c2c:	9f 93       	push	r25
    2c2e:	8f 93       	push	r24
    2c30:	d2 d2       	rcall	.+1444   	; 0x31d6 <printf_P>
                    printf("%s", uid_buf);
    2c32:	ce 01       	movw	r24, r28
    2c34:	45 96       	adiw	r24, 0x15	; 21
    2c36:	9f 93       	push	r25
    2c38:	8f 93       	push	r24
    2c3a:	0b ea       	ldi	r16, 0xAB	; 171
    2c3c:	12 e0       	ldi	r17, 0x02	; 2
    2c3e:	1f 93       	push	r17
    2c40:	0f 93       	push	r16
    2c42:	b6 d2       	rcall	.+1388   	; 0x31b0 <printf>
                    printf_P(PSTR(CARD_HOLDER_MSG));
    2c44:	88 e2       	ldi	r24, 0x28	; 40
    2c46:	97 e0       	ldi	r25, 0x07	; 7
    2c48:	9f 93       	push	r25
    2c4a:	8f 93       	push	r24
    2c4c:	c4 d2       	rcall	.+1416   	; 0x31d6 <printf_P>
                    printf("%s", current->user);
    2c4e:	f7 01       	movw	r30, r14
    2c50:	84 85       	ldd	r24, Z+12	; 0x0c
    2c52:	8f 93       	push	r24
    2c54:	83 85       	ldd	r24, Z+11	; 0x0b
    2c56:	8f 93       	push	r24
    2c58:	1f 93       	push	r17
    2c5a:	0f 93       	push	r16
    2c5c:	a9 d2       	rcall	.+1362   	; 0x31b0 <printf>
                    printf_P(PSTR("\n"));
    2c5e:	86 e2       	ldi	r24, 0x26	; 38
    2c60:	97 e0       	ldi	r25, 0x07	; 7
    2c62:	9f 93       	push	r25
    2c64:	8f 93       	push	r24
    2c66:	b7 d2       	rcall	.+1390   	; 0x31d6 <printf_P>
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	2b c0       	rjmp	.+86     	; 0x2cca <rfid_remove_card_by_uid+0x17c>
                }
                else
                {
                    prev->next = current->next;
    2c74:	f7 01       	movw	r30, r14
    2c76:	85 85       	ldd	r24, Z+13	; 0x0d
    2c78:	96 85       	ldd	r25, Z+14	; 0x0e
    2c7a:	f4 01       	movw	r30, r8
    2c7c:	96 87       	std	Z+14, r25	; 0x0e
    2c7e:	85 87       	std	Z+13, r24	; 0x0d
                    printf_P(PSTR(CARD_REMOVING_MSG));
    2c80:	81 e1       	ldi	r24, 0x11	; 17
    2c82:	97 e0       	ldi	r25, 0x07	; 7
    2c84:	9f 93       	push	r25
    2c86:	8f 93       	push	r24
    2c88:	a6 d2       	rcall	.+1356   	; 0x31d6 <printf_P>
                    printf("%s", uid_buf);
    2c8a:	ce 01       	movw	r24, r28
    2c8c:	45 96       	adiw	r24, 0x15	; 21
    2c8e:	9f 93       	push	r25
    2c90:	8f 93       	push	r24
    2c92:	0b ea       	ldi	r16, 0xAB	; 171
    2c94:	12 e0       	ldi	r17, 0x02	; 2
    2c96:	1f 93       	push	r17
    2c98:	0f 93       	push	r16
    2c9a:	8a d2       	rcall	.+1300   	; 0x31b0 <printf>
                    printf_P(PSTR(CARD_HOLDER_MSG));
    2c9c:	88 e0       	ldi	r24, 0x08	; 8
    2c9e:	97 e0       	ldi	r25, 0x07	; 7
    2ca0:	9f 93       	push	r25
    2ca2:	8f 93       	push	r24
    2ca4:	98 d2       	rcall	.+1328   	; 0x31d6 <printf_P>
                    printf("%s", current->user);
    2ca6:	f7 01       	movw	r30, r14
    2ca8:	84 85       	ldd	r24, Z+12	; 0x0c
    2caa:	8f 93       	push	r24
    2cac:	83 85       	ldd	r24, Z+11	; 0x0b
    2cae:	8f 93       	push	r24
    2cb0:	1f 93       	push	r17
    2cb2:	0f 93       	push	r16
    2cb4:	7d d2       	rcall	.+1274   	; 0x31b0 <printf>
                    printf_P(PSTR("\n"));
    2cb6:	86 e0       	ldi	r24, 0x06	; 6
    2cb8:	97 e0       	ldi	r25, 0x07	; 7
    2cba:	9f 93       	push	r25
    2cbc:	8f 93       	push	r24
    2cbe:	8b d2       	rcall	.+1302   	; 0x31d6 <printf_P>
    2cc0:	0f b6       	in	r0, 0x3f	; 63
    2cc2:	f8 94       	cli
    2cc4:	de bf       	out	0x3e, r29	; 62
    2cc6:	0f be       	out	0x3f, r0	; 63
    2cc8:	cd bf       	out	0x3d, r28	; 61
                }
                free(current);
    2cca:	c7 01       	movw	r24, r14
    2ccc:	19 d1       	rcall	.+562    	; 0x2f00 <free>
                return;
    2cce:	0e c0       	rjmp	.+28     	; 0x2cec <rfid_remove_card_by_uid+0x19e>
            }
            prev = current;
            current = current->next;
    2cd0:	f7 01       	movw	r30, r14
    2cd2:	85 85       	ldd	r24, Z+13	; 0x0d
    2cd4:	96 85       	ldd	r25, Z+14	; 0x0e
    2cd6:	47 01       	movw	r8, r14
        printf_P(PSTR(CARD_LIST_EMPTY_MSG));
        return;
    }
    else
    {
        while (current != NULL)
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	09 f0       	breq	.+2      	; 0x2cde <rfid_remove_card_by_uid+0x190>
    2cdc:	6f cf       	rjmp	.-290    	; 0x2bbc <rfid_remove_card_by_uid+0x6e>
            }
            prev = current;
            current = current->next;
        }
    }
    printf_P(PSTR(CARD_NOT_FOUND_MSG));
    2cde:	86 ed       	ldi	r24, 0xD6	; 214
    2ce0:	96 e0       	ldi	r25, 0x06	; 6
    2ce2:	9f 93       	push	r25
    2ce4:	8f 93       	push	r24
    2ce6:	77 d2       	rcall	.+1262   	; 0x31d6 <printf_P>
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	6e 96       	adiw	r28, 0x1e	; 30
    2cee:	0f b6       	in	r0, 0x3f	; 63
    2cf0:	f8 94       	cli
    2cf2:	de bf       	out	0x3e, r29	; 62
    2cf4:	0f be       	out	0x3f, r0	; 63
    2cf6:	cd bf       	out	0x3d, r28	; 61
    2cf8:	df 91       	pop	r29
    2cfa:	cf 91       	pop	r28
    2cfc:	1f 91       	pop	r17
    2cfe:	0f 91       	pop	r16
    2d00:	ff 90       	pop	r15
    2d02:	ef 90       	pop	r14
    2d04:	df 90       	pop	r13
    2d06:	cf 90       	pop	r12
    2d08:	bf 90       	pop	r11
    2d0a:	af 90       	pop	r10
    2d0c:	9f 90       	pop	r9
    2d0e:	8f 90       	pop	r8
    2d10:	7f 90       	pop	r7
    2d12:	08 95       	ret

00002d14 <uart0_getchar>:

static int uart0_getchar(FILE *stream)
{
    (void)stream;

    while (uart0_peek() == UART_NO_DATA)
    2d14:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <uart0_peek>
    2d18:	81 15       	cp	r24, r1
    2d1a:	91 40       	sbci	r25, 0x01	; 1
    2d1c:	d9 f3       	breq	.-10     	; 0x2d14 <uart0_getchar>
    {
    }

    return (uart0_getc() & 0x00ff);
    2d1e:	0e 94 c6 04 	call	0x98c	; 0x98c <uart0_getc>
}
    2d22:	99 27       	eor	r25, r25
    2d24:	08 95       	ret

00002d26 <uart0_putchar>:
#ifndef F_CPU
#define F_CPU 16000000UL
#endif

static int uart0_putchar(char c, FILE *stream)
{
    2d26:	cf 93       	push	r28
    2d28:	c8 2f       	mov	r28, r24
    (void)stream;

    if (c == '\n')
    2d2a:	8a 30       	cpi	r24, 0x0A	; 10
    2d2c:	19 f4       	brne	.+6      	; 0x2d34 <uart0_putchar+0xe>
    {
        uart0_putc('\r');
    2d2e:	8d e0       	ldi	r24, 0x0D	; 13
    2d30:	0e 94 fd 04 	call	0x9fa	; 0x9fa <uart0_putc>
    }

    uart0_putc((uint8_t)c);
    2d34:	8c 2f       	mov	r24, r28
    2d36:	0e 94 fd 04 	call	0x9fa	; 0x9fa <uart0_putc>
    return 0;
}
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	cf 91       	pop	r28
    2d40:	08 95       	ret

00002d42 <uart3_putchar>:
    return (uart0_getc() & 0x00ff);
}


static int uart3_putchar(char c, FILE *stream)
{
    2d42:	cf 93       	push	r28
    2d44:	c8 2f       	mov	r28, r24
    (void)stream;

    if (c == '\n') {
    2d46:	8a 30       	cpi	r24, 0x0A	; 10
    2d48:	19 f4       	brne	.+6      	; 0x2d50 <uart3_putchar+0xe>
        uart3_putc('\r');
    2d4a:	8d e0       	ldi	r24, 0x0D	; 13
    2d4c:	0e 94 98 05 	call	0xb30	; 0xb30 <uart3_putc>
    }

    uart3_putc((uint8_t)c);
    2d50:	8c 2f       	mov	r24, r28
    2d52:	0e 94 98 05 	call	0xb30	; 0xb30 <uart3_putc>
    return 0;
}
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	cf 91       	pop	r28
    2d5c:	08 95       	ret

00002d5e <__tablejump2__>:
    2d5e:	ee 0f       	add	r30, r30
    2d60:	ff 1f       	adc	r31, r31
    2d62:	88 1f       	adc	r24, r24
    2d64:	8b bf       	out	0x3b, r24	; 59
    2d66:	07 90       	elpm	r0, Z+
    2d68:	f6 91       	elpm	r31, Z
    2d6a:	e0 2d       	mov	r30, r0
    2d6c:	19 94       	eijmp

00002d6e <__assert>:
    2d6e:	f0 91 fe 05 	lds	r31, 0x05FE	; 0x8005fe <__iob+0x5>
    2d72:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <__iob+0x4>
    2d76:	00 97       	sbiw	r24, 0x00	; 0
    2d78:	b1 f4       	brne	.+44     	; 0x2da6 <__assert+0x38>
    2d7a:	5f 93       	push	r21
    2d7c:	4f 93       	push	r20
    2d7e:	7f 93       	push	r23
    2d80:	6f 93       	push	r22
    2d82:	3f 93       	push	r19
    2d84:	2f 93       	push	r18
    2d86:	83 e0       	ldi	r24, 0x03	; 3
    2d88:	93 e0       	ldi	r25, 0x03	; 3
    2d8a:	9f 93       	push	r25
    2d8c:	8f 93       	push	r24
    2d8e:	ff 93       	push	r31
    2d90:	ef 93       	push	r30
    2d92:	ab d1       	rcall	.+854    	; 0x30ea <fprintf>
    2d94:	8d b7       	in	r24, 0x3d	; 61
    2d96:	9e b7       	in	r25, 0x3e	; 62
    2d98:	0a 96       	adiw	r24, 0x0a	; 10
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	9e bf       	out	0x3e, r25	; 62
    2da0:	0f be       	out	0x3f, r0	; 63
    2da2:	8d bf       	out	0x3d, r24	; 61
    2da4:	17 c0       	rjmp	.+46     	; 0x2dd4 <__assert+0x66>
    2da6:	5f 93       	push	r21
    2da8:	4f 93       	push	r20
    2daa:	7f 93       	push	r23
    2dac:	6f 93       	push	r22
    2dae:	9f 93       	push	r25
    2db0:	8f 93       	push	r24
    2db2:	3f 93       	push	r19
    2db4:	2f 93       	push	r18
    2db6:	8e e2       	ldi	r24, 0x2E	; 46
    2db8:	93 e0       	ldi	r25, 0x03	; 3
    2dba:	9f 93       	push	r25
    2dbc:	8f 93       	push	r24
    2dbe:	ff 93       	push	r31
    2dc0:	ef 93       	push	r30
    2dc2:	93 d1       	rcall	.+806    	; 0x30ea <fprintf>
    2dc4:	8d b7       	in	r24, 0x3d	; 61
    2dc6:	9e b7       	in	r25, 0x3e	; 62
    2dc8:	0c 96       	adiw	r24, 0x0c	; 12
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	f8 94       	cli
    2dce:	9e bf       	out	0x3e, r25	; 62
    2dd0:	0f be       	out	0x3f, r0	; 63
    2dd2:	8d bf       	out	0x3d, r24	; 61
    2dd4:	2d d1       	rcall	.+602    	; 0x3030 <abort>

00002dd6 <malloc>:
    2dd6:	cf 93       	push	r28
    2dd8:	df 93       	push	r29
    2dda:	82 30       	cpi	r24, 0x02	; 2
    2ddc:	91 05       	cpc	r25, r1
    2dde:	10 f4       	brcc	.+4      	; 0x2de4 <malloc+0xe>
    2de0:	82 e0       	ldi	r24, 0x02	; 2
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	e0 91 f7 05 	lds	r30, 0x05F7	; 0x8005f7 <__flp>
    2de8:	f0 91 f8 05 	lds	r31, 0x05F8	; 0x8005f8 <__flp+0x1>
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	c0 e0       	ldi	r28, 0x00	; 0
    2df2:	d0 e0       	ldi	r29, 0x00	; 0
    2df4:	30 97       	sbiw	r30, 0x00	; 0
    2df6:	11 f1       	breq	.+68     	; 0x2e3c <malloc+0x66>
    2df8:	40 81       	ld	r20, Z
    2dfa:	51 81       	ldd	r21, Z+1	; 0x01
    2dfc:	48 17       	cp	r20, r24
    2dfe:	59 07       	cpc	r21, r25
    2e00:	c0 f0       	brcs	.+48     	; 0x2e32 <malloc+0x5c>
    2e02:	48 17       	cp	r20, r24
    2e04:	59 07       	cpc	r21, r25
    2e06:	61 f4       	brne	.+24     	; 0x2e20 <malloc+0x4a>
    2e08:	82 81       	ldd	r24, Z+2	; 0x02
    2e0a:	93 81       	ldd	r25, Z+3	; 0x03
    2e0c:	20 97       	sbiw	r28, 0x00	; 0
    2e0e:	19 f0       	breq	.+6      	; 0x2e16 <malloc+0x40>
    2e10:	9b 83       	std	Y+3, r25	; 0x03
    2e12:	8a 83       	std	Y+2, r24	; 0x02
    2e14:	2b c0       	rjmp	.+86     	; 0x2e6c <malloc+0x96>
    2e16:	90 93 f8 05 	sts	0x05F8, r25	; 0x8005f8 <__flp+0x1>
    2e1a:	80 93 f7 05 	sts	0x05F7, r24	; 0x8005f7 <__flp>
    2e1e:	26 c0       	rjmp	.+76     	; 0x2e6c <malloc+0x96>
    2e20:	21 15       	cp	r18, r1
    2e22:	31 05       	cpc	r19, r1
    2e24:	19 f0       	breq	.+6      	; 0x2e2c <malloc+0x56>
    2e26:	42 17       	cp	r20, r18
    2e28:	53 07       	cpc	r21, r19
    2e2a:	18 f4       	brcc	.+6      	; 0x2e32 <malloc+0x5c>
    2e2c:	9a 01       	movw	r18, r20
    2e2e:	be 01       	movw	r22, r28
    2e30:	df 01       	movw	r26, r30
    2e32:	ef 01       	movw	r28, r30
    2e34:	02 80       	ldd	r0, Z+2	; 0x02
    2e36:	f3 81       	ldd	r31, Z+3	; 0x03
    2e38:	e0 2d       	mov	r30, r0
    2e3a:	dc cf       	rjmp	.-72     	; 0x2df4 <malloc+0x1e>
    2e3c:	21 15       	cp	r18, r1
    2e3e:	31 05       	cpc	r19, r1
    2e40:	09 f1       	breq	.+66     	; 0x2e84 <malloc+0xae>
    2e42:	28 1b       	sub	r18, r24
    2e44:	39 0b       	sbc	r19, r25
    2e46:	24 30       	cpi	r18, 0x04	; 4
    2e48:	31 05       	cpc	r19, r1
    2e4a:	90 f4       	brcc	.+36     	; 0x2e70 <malloc+0x9a>
    2e4c:	12 96       	adiw	r26, 0x02	; 2
    2e4e:	8d 91       	ld	r24, X+
    2e50:	9c 91       	ld	r25, X
    2e52:	13 97       	sbiw	r26, 0x03	; 3
    2e54:	61 15       	cp	r22, r1
    2e56:	71 05       	cpc	r23, r1
    2e58:	21 f0       	breq	.+8      	; 0x2e62 <malloc+0x8c>
    2e5a:	fb 01       	movw	r30, r22
    2e5c:	93 83       	std	Z+3, r25	; 0x03
    2e5e:	82 83       	std	Z+2, r24	; 0x02
    2e60:	04 c0       	rjmp	.+8      	; 0x2e6a <malloc+0x94>
    2e62:	90 93 f8 05 	sts	0x05F8, r25	; 0x8005f8 <__flp+0x1>
    2e66:	80 93 f7 05 	sts	0x05F7, r24	; 0x8005f7 <__flp>
    2e6a:	fd 01       	movw	r30, r26
    2e6c:	32 96       	adiw	r30, 0x02	; 2
    2e6e:	44 c0       	rjmp	.+136    	; 0x2ef8 <malloc+0x122>
    2e70:	fd 01       	movw	r30, r26
    2e72:	e2 0f       	add	r30, r18
    2e74:	f3 1f       	adc	r31, r19
    2e76:	81 93       	st	Z+, r24
    2e78:	91 93       	st	Z+, r25
    2e7a:	22 50       	subi	r18, 0x02	; 2
    2e7c:	31 09       	sbc	r19, r1
    2e7e:	2d 93       	st	X+, r18
    2e80:	3c 93       	st	X, r19
    2e82:	3a c0       	rjmp	.+116    	; 0x2ef8 <malloc+0x122>
    2e84:	20 91 f5 05 	lds	r18, 0x05F5	; 0x8005f5 <__brkval>
    2e88:	30 91 f6 05 	lds	r19, 0x05F6	; 0x8005f6 <__brkval+0x1>
    2e8c:	23 2b       	or	r18, r19
    2e8e:	41 f4       	brne	.+16     	; 0x2ea0 <malloc+0xca>
    2e90:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2e94:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2e98:	30 93 f6 05 	sts	0x05F6, r19	; 0x8005f6 <__brkval+0x1>
    2e9c:	20 93 f5 05 	sts	0x05F5, r18	; 0x8005f5 <__brkval>
    2ea0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2ea4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2ea8:	21 15       	cp	r18, r1
    2eaa:	31 05       	cpc	r19, r1
    2eac:	41 f4       	brne	.+16     	; 0x2ebe <malloc+0xe8>
    2eae:	2d b7       	in	r18, 0x3d	; 61
    2eb0:	3e b7       	in	r19, 0x3e	; 62
    2eb2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2eb6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2eba:	24 1b       	sub	r18, r20
    2ebc:	35 0b       	sbc	r19, r21
    2ebe:	e0 91 f5 05 	lds	r30, 0x05F5	; 0x8005f5 <__brkval>
    2ec2:	f0 91 f6 05 	lds	r31, 0x05F6	; 0x8005f6 <__brkval+0x1>
    2ec6:	e2 17       	cp	r30, r18
    2ec8:	f3 07       	cpc	r31, r19
    2eca:	a0 f4       	brcc	.+40     	; 0x2ef4 <malloc+0x11e>
    2ecc:	2e 1b       	sub	r18, r30
    2ece:	3f 0b       	sbc	r19, r31
    2ed0:	28 17       	cp	r18, r24
    2ed2:	39 07       	cpc	r19, r25
    2ed4:	78 f0       	brcs	.+30     	; 0x2ef4 <malloc+0x11e>
    2ed6:	ac 01       	movw	r20, r24
    2ed8:	4e 5f       	subi	r20, 0xFE	; 254
    2eda:	5f 4f       	sbci	r21, 0xFF	; 255
    2edc:	24 17       	cp	r18, r20
    2ede:	35 07       	cpc	r19, r21
    2ee0:	48 f0       	brcs	.+18     	; 0x2ef4 <malloc+0x11e>
    2ee2:	4e 0f       	add	r20, r30
    2ee4:	5f 1f       	adc	r21, r31
    2ee6:	50 93 f6 05 	sts	0x05F6, r21	; 0x8005f6 <__brkval+0x1>
    2eea:	40 93 f5 05 	sts	0x05F5, r20	; 0x8005f5 <__brkval>
    2eee:	81 93       	st	Z+, r24
    2ef0:	91 93       	st	Z+, r25
    2ef2:	02 c0       	rjmp	.+4      	; 0x2ef8 <malloc+0x122>
    2ef4:	e0 e0       	ldi	r30, 0x00	; 0
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	cf 01       	movw	r24, r30
    2efa:	df 91       	pop	r29
    2efc:	cf 91       	pop	r28
    2efe:	08 95       	ret

00002f00 <free>:
    2f00:	0f 93       	push	r16
    2f02:	1f 93       	push	r17
    2f04:	cf 93       	push	r28
    2f06:	df 93       	push	r29
    2f08:	00 97       	sbiw	r24, 0x00	; 0
    2f0a:	09 f4       	brne	.+2      	; 0x2f0e <free+0xe>
    2f0c:	8c c0       	rjmp	.+280    	; 0x3026 <free+0x126>
    2f0e:	fc 01       	movw	r30, r24
    2f10:	32 97       	sbiw	r30, 0x02	; 2
    2f12:	13 82       	std	Z+3, r1	; 0x03
    2f14:	12 82       	std	Z+2, r1	; 0x02
    2f16:	00 91 f7 05 	lds	r16, 0x05F7	; 0x8005f7 <__flp>
    2f1a:	10 91 f8 05 	lds	r17, 0x05F8	; 0x8005f8 <__flp+0x1>
    2f1e:	01 15       	cp	r16, r1
    2f20:	11 05       	cpc	r17, r1
    2f22:	81 f4       	brne	.+32     	; 0x2f44 <free+0x44>
    2f24:	20 81       	ld	r18, Z
    2f26:	31 81       	ldd	r19, Z+1	; 0x01
    2f28:	82 0f       	add	r24, r18
    2f2a:	93 1f       	adc	r25, r19
    2f2c:	20 91 f5 05 	lds	r18, 0x05F5	; 0x8005f5 <__brkval>
    2f30:	30 91 f6 05 	lds	r19, 0x05F6	; 0x8005f6 <__brkval+0x1>
    2f34:	28 17       	cp	r18, r24
    2f36:	39 07       	cpc	r19, r25
    2f38:	79 f5       	brne	.+94     	; 0x2f98 <free+0x98>
    2f3a:	f0 93 f6 05 	sts	0x05F6, r31	; 0x8005f6 <__brkval+0x1>
    2f3e:	e0 93 f5 05 	sts	0x05F5, r30	; 0x8005f5 <__brkval>
    2f42:	71 c0       	rjmp	.+226    	; 0x3026 <free+0x126>
    2f44:	d8 01       	movw	r26, r16
    2f46:	40 e0       	ldi	r20, 0x00	; 0
    2f48:	50 e0       	ldi	r21, 0x00	; 0
    2f4a:	ae 17       	cp	r26, r30
    2f4c:	bf 07       	cpc	r27, r31
    2f4e:	50 f4       	brcc	.+20     	; 0x2f64 <free+0x64>
    2f50:	12 96       	adiw	r26, 0x02	; 2
    2f52:	2d 91       	ld	r18, X+
    2f54:	3c 91       	ld	r19, X
    2f56:	13 97       	sbiw	r26, 0x03	; 3
    2f58:	ad 01       	movw	r20, r26
    2f5a:	21 15       	cp	r18, r1
    2f5c:	31 05       	cpc	r19, r1
    2f5e:	09 f1       	breq	.+66     	; 0x2fa2 <free+0xa2>
    2f60:	d9 01       	movw	r26, r18
    2f62:	f3 cf       	rjmp	.-26     	; 0x2f4a <free+0x4a>
    2f64:	9d 01       	movw	r18, r26
    2f66:	da 01       	movw	r26, r20
    2f68:	33 83       	std	Z+3, r19	; 0x03
    2f6a:	22 83       	std	Z+2, r18	; 0x02
    2f6c:	60 81       	ld	r22, Z
    2f6e:	71 81       	ldd	r23, Z+1	; 0x01
    2f70:	86 0f       	add	r24, r22
    2f72:	97 1f       	adc	r25, r23
    2f74:	82 17       	cp	r24, r18
    2f76:	93 07       	cpc	r25, r19
    2f78:	69 f4       	brne	.+26     	; 0x2f94 <free+0x94>
    2f7a:	ec 01       	movw	r28, r24
    2f7c:	28 81       	ld	r18, Y
    2f7e:	39 81       	ldd	r19, Y+1	; 0x01
    2f80:	26 0f       	add	r18, r22
    2f82:	37 1f       	adc	r19, r23
    2f84:	2e 5f       	subi	r18, 0xFE	; 254
    2f86:	3f 4f       	sbci	r19, 0xFF	; 255
    2f88:	31 83       	std	Z+1, r19	; 0x01
    2f8a:	20 83       	st	Z, r18
    2f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f90:	93 83       	std	Z+3, r25	; 0x03
    2f92:	82 83       	std	Z+2, r24	; 0x02
    2f94:	45 2b       	or	r20, r21
    2f96:	29 f4       	brne	.+10     	; 0x2fa2 <free+0xa2>
    2f98:	f0 93 f8 05 	sts	0x05F8, r31	; 0x8005f8 <__flp+0x1>
    2f9c:	e0 93 f7 05 	sts	0x05F7, r30	; 0x8005f7 <__flp>
    2fa0:	42 c0       	rjmp	.+132    	; 0x3026 <free+0x126>
    2fa2:	13 96       	adiw	r26, 0x03	; 3
    2fa4:	fc 93       	st	X, r31
    2fa6:	ee 93       	st	-X, r30
    2fa8:	12 97       	sbiw	r26, 0x02	; 2
    2faa:	ed 01       	movw	r28, r26
    2fac:	49 91       	ld	r20, Y+
    2fae:	59 91       	ld	r21, Y+
    2fb0:	9e 01       	movw	r18, r28
    2fb2:	24 0f       	add	r18, r20
    2fb4:	35 1f       	adc	r19, r21
    2fb6:	e2 17       	cp	r30, r18
    2fb8:	f3 07       	cpc	r31, r19
    2fba:	71 f4       	brne	.+28     	; 0x2fd8 <free+0xd8>
    2fbc:	80 81       	ld	r24, Z
    2fbe:	91 81       	ldd	r25, Z+1	; 0x01
    2fc0:	84 0f       	add	r24, r20
    2fc2:	95 1f       	adc	r25, r21
    2fc4:	02 96       	adiw	r24, 0x02	; 2
    2fc6:	11 96       	adiw	r26, 0x01	; 1
    2fc8:	9c 93       	st	X, r25
    2fca:	8e 93       	st	-X, r24
    2fcc:	82 81       	ldd	r24, Z+2	; 0x02
    2fce:	93 81       	ldd	r25, Z+3	; 0x03
    2fd0:	13 96       	adiw	r26, 0x03	; 3
    2fd2:	9c 93       	st	X, r25
    2fd4:	8e 93       	st	-X, r24
    2fd6:	12 97       	sbiw	r26, 0x02	; 2
    2fd8:	e0 e0       	ldi	r30, 0x00	; 0
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	d8 01       	movw	r26, r16
    2fde:	12 96       	adiw	r26, 0x02	; 2
    2fe0:	8d 91       	ld	r24, X+
    2fe2:	9c 91       	ld	r25, X
    2fe4:	13 97       	sbiw	r26, 0x03	; 3
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	19 f0       	breq	.+6      	; 0x2ff0 <free+0xf0>
    2fea:	f8 01       	movw	r30, r16
    2fec:	8c 01       	movw	r16, r24
    2fee:	f6 cf       	rjmp	.-20     	; 0x2fdc <free+0xdc>
    2ff0:	8d 91       	ld	r24, X+
    2ff2:	9c 91       	ld	r25, X
    2ff4:	98 01       	movw	r18, r16
    2ff6:	2e 5f       	subi	r18, 0xFE	; 254
    2ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffa:	82 0f       	add	r24, r18
    2ffc:	93 1f       	adc	r25, r19
    2ffe:	20 91 f5 05 	lds	r18, 0x05F5	; 0x8005f5 <__brkval>
    3002:	30 91 f6 05 	lds	r19, 0x05F6	; 0x8005f6 <__brkval+0x1>
    3006:	28 17       	cp	r18, r24
    3008:	39 07       	cpc	r19, r25
    300a:	69 f4       	brne	.+26     	; 0x3026 <free+0x126>
    300c:	30 97       	sbiw	r30, 0x00	; 0
    300e:	29 f4       	brne	.+10     	; 0x301a <free+0x11a>
    3010:	10 92 f8 05 	sts	0x05F8, r1	; 0x8005f8 <__flp+0x1>
    3014:	10 92 f7 05 	sts	0x05F7, r1	; 0x8005f7 <__flp>
    3018:	02 c0       	rjmp	.+4      	; 0x301e <free+0x11e>
    301a:	13 82       	std	Z+3, r1	; 0x03
    301c:	12 82       	std	Z+2, r1	; 0x02
    301e:	10 93 f6 05 	sts	0x05F6, r17	; 0x8005f6 <__brkval+0x1>
    3022:	00 93 f5 05 	sts	0x05F5, r16	; 0x8005f5 <__brkval>
    3026:	df 91       	pop	r29
    3028:	cf 91       	pop	r28
    302a:	1f 91       	pop	r17
    302c:	0f 91       	pop	r16
    302e:	08 95       	ret

00003030 <abort>:
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	f8 94       	cli
    3036:	c3 c3       	rjmp	.+1926   	; 0x37be <_exit>

00003038 <strcmp_P>:
    3038:	fb 01       	movw	r30, r22
    303a:	dc 01       	movw	r26, r24
    303c:	8d 91       	ld	r24, X+
    303e:	05 90       	lpm	r0, Z+
    3040:	80 19       	sub	r24, r0
    3042:	01 10       	cpse	r0, r1
    3044:	d9 f3       	breq	.-10     	; 0x303c <strcmp_P+0x4>
    3046:	99 0b       	sbc	r25, r25
    3048:	08 95       	ret

0000304a <strncmp_P>:
    304a:	fb 01       	movw	r30, r22
    304c:	dc 01       	movw	r26, r24
    304e:	41 50       	subi	r20, 0x01	; 1
    3050:	50 40       	sbci	r21, 0x00	; 0
    3052:	30 f0       	brcs	.+12     	; 0x3060 <strncmp_P+0x16>
    3054:	8d 91       	ld	r24, X+
    3056:	05 90       	lpm	r0, Z+
    3058:	80 19       	sub	r24, r0
    305a:	19 f4       	brne	.+6      	; 0x3062 <strncmp_P+0x18>
    305c:	00 20       	and	r0, r0
    305e:	b9 f7       	brne	.-18     	; 0x304e <strncmp_P+0x4>
    3060:	88 1b       	sub	r24, r24
    3062:	99 0b       	sbc	r25, r25
    3064:	08 95       	ret

00003066 <memcmp>:
    3066:	fb 01       	movw	r30, r22
    3068:	dc 01       	movw	r26, r24
    306a:	04 c0       	rjmp	.+8      	; 0x3074 <memcmp+0xe>
    306c:	8d 91       	ld	r24, X+
    306e:	01 90       	ld	r0, Z+
    3070:	80 19       	sub	r24, r0
    3072:	21 f4       	brne	.+8      	; 0x307c <memcmp+0x16>
    3074:	41 50       	subi	r20, 0x01	; 1
    3076:	50 40       	sbci	r21, 0x00	; 0
    3078:	c8 f7       	brcc	.-14     	; 0x306c <memcmp+0x6>
    307a:	88 1b       	sub	r24, r24
    307c:	99 0b       	sbc	r25, r25
    307e:	08 95       	ret

00003080 <memcpy>:
    3080:	fb 01       	movw	r30, r22
    3082:	dc 01       	movw	r26, r24
    3084:	02 c0       	rjmp	.+4      	; 0x308a <memcpy+0xa>
    3086:	01 90       	ld	r0, Z+
    3088:	0d 92       	st	X+, r0
    308a:	41 50       	subi	r20, 0x01	; 1
    308c:	50 40       	sbci	r21, 0x00	; 0
    308e:	d8 f7       	brcc	.-10     	; 0x3086 <memcpy+0x6>
    3090:	08 95       	ret

00003092 <memmove>:
    3092:	68 17       	cp	r22, r24
    3094:	79 07       	cpc	r23, r25
    3096:	68 f4       	brcc	.+26     	; 0x30b2 <memmove+0x20>
    3098:	fb 01       	movw	r30, r22
    309a:	dc 01       	movw	r26, r24
    309c:	e4 0f       	add	r30, r20
    309e:	f5 1f       	adc	r31, r21
    30a0:	a4 0f       	add	r26, r20
    30a2:	b5 1f       	adc	r27, r21
    30a4:	02 c0       	rjmp	.+4      	; 0x30aa <memmove+0x18>
    30a6:	02 90       	ld	r0, -Z
    30a8:	0e 92       	st	-X, r0
    30aa:	41 50       	subi	r20, 0x01	; 1
    30ac:	50 40       	sbci	r21, 0x00	; 0
    30ae:	d8 f7       	brcc	.-10     	; 0x30a6 <memmove+0x14>
    30b0:	08 95       	ret
    30b2:	e6 cf       	rjmp	.-52     	; 0x3080 <memcpy>

000030b4 <strcat>:
    30b4:	fb 01       	movw	r30, r22
    30b6:	dc 01       	movw	r26, r24
    30b8:	0d 90       	ld	r0, X+
    30ba:	00 20       	and	r0, r0
    30bc:	e9 f7       	brne	.-6      	; 0x30b8 <strcat+0x4>
    30be:	11 97       	sbiw	r26, 0x01	; 1
    30c0:	01 90       	ld	r0, Z+
    30c2:	0d 92       	st	X+, r0
    30c4:	00 20       	and	r0, r0
    30c6:	e1 f7       	brne	.-8      	; 0x30c0 <strcat+0xc>
    30c8:	08 95       	ret

000030ca <strcmp>:
    30ca:	fb 01       	movw	r30, r22
    30cc:	dc 01       	movw	r26, r24
    30ce:	8d 91       	ld	r24, X+
    30d0:	01 90       	ld	r0, Z+
    30d2:	80 19       	sub	r24, r0
    30d4:	01 10       	cpse	r0, r1
    30d6:	d9 f3       	breq	.-10     	; 0x30ce <strcmp+0x4>
    30d8:	99 0b       	sbc	r25, r25
    30da:	08 95       	ret

000030dc <strcpy>:
    30dc:	fb 01       	movw	r30, r22
    30de:	dc 01       	movw	r26, r24
    30e0:	01 90       	ld	r0, Z+
    30e2:	0d 92       	st	X+, r0
    30e4:	00 20       	and	r0, r0
    30e6:	e1 f7       	brne	.-8      	; 0x30e0 <strcpy+0x4>
    30e8:	08 95       	ret

000030ea <fprintf>:
    30ea:	cf 93       	push	r28
    30ec:	df 93       	push	r29
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
    30f2:	ae 01       	movw	r20, r28
    30f4:	46 5f       	subi	r20, 0xF6	; 246
    30f6:	5f 4f       	sbci	r21, 0xFF	; 255
    30f8:	68 85       	ldd	r22, Y+8	; 0x08
    30fa:	79 85       	ldd	r23, Y+9	; 0x09
    30fc:	8e 81       	ldd	r24, Y+6	; 0x06
    30fe:	9f 81       	ldd	r25, Y+7	; 0x07
    3100:	fc d0       	rcall	.+504    	; 0x32fa <vfprintf>
    3102:	df 91       	pop	r29
    3104:	cf 91       	pop	r28
    3106:	08 95       	ret

00003108 <fprintf_P>:
    3108:	0f 93       	push	r16
    310a:	1f 93       	push	r17
    310c:	cf 93       	push	r28
    310e:	df 93       	push	r29
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
    3114:	08 85       	ldd	r16, Y+8	; 0x08
    3116:	19 85       	ldd	r17, Y+9	; 0x09
    3118:	f8 01       	movw	r30, r16
    311a:	83 81       	ldd	r24, Z+3	; 0x03
    311c:	88 60       	ori	r24, 0x08	; 8
    311e:	83 83       	std	Z+3, r24	; 0x03
    3120:	ae 01       	movw	r20, r28
    3122:	44 5f       	subi	r20, 0xF4	; 244
    3124:	5f 4f       	sbci	r21, 0xFF	; 255
    3126:	6a 85       	ldd	r22, Y+10	; 0x0a
    3128:	7b 85       	ldd	r23, Y+11	; 0x0b
    312a:	c8 01       	movw	r24, r16
    312c:	e6 d0       	rcall	.+460    	; 0x32fa <vfprintf>
    312e:	f8 01       	movw	r30, r16
    3130:	23 81       	ldd	r18, Z+3	; 0x03
    3132:	27 7f       	andi	r18, 0xF7	; 247
    3134:	23 83       	std	Z+3, r18	; 0x03
    3136:	df 91       	pop	r29
    3138:	cf 91       	pop	r28
    313a:	1f 91       	pop	r17
    313c:	0f 91       	pop	r16
    313e:	08 95       	ret

00003140 <fputc>:
    3140:	0f 93       	push	r16
    3142:	1f 93       	push	r17
    3144:	cf 93       	push	r28
    3146:	df 93       	push	r29
    3148:	fb 01       	movw	r30, r22
    314a:	23 81       	ldd	r18, Z+3	; 0x03
    314c:	21 fd       	sbrc	r18, 1
    314e:	03 c0       	rjmp	.+6      	; 0x3156 <fputc+0x16>
    3150:	8f ef       	ldi	r24, 0xFF	; 255
    3152:	9f ef       	ldi	r25, 0xFF	; 255
    3154:	28 c0       	rjmp	.+80     	; 0x31a6 <fputc+0x66>
    3156:	22 ff       	sbrs	r18, 2
    3158:	16 c0       	rjmp	.+44     	; 0x3186 <fputc+0x46>
    315a:	46 81       	ldd	r20, Z+6	; 0x06
    315c:	57 81       	ldd	r21, Z+7	; 0x07
    315e:	24 81       	ldd	r18, Z+4	; 0x04
    3160:	35 81       	ldd	r19, Z+5	; 0x05
    3162:	42 17       	cp	r20, r18
    3164:	53 07       	cpc	r21, r19
    3166:	44 f4       	brge	.+16     	; 0x3178 <fputc+0x38>
    3168:	a0 81       	ld	r26, Z
    316a:	b1 81       	ldd	r27, Z+1	; 0x01
    316c:	9d 01       	movw	r18, r26
    316e:	2f 5f       	subi	r18, 0xFF	; 255
    3170:	3f 4f       	sbci	r19, 0xFF	; 255
    3172:	31 83       	std	Z+1, r19	; 0x01
    3174:	20 83       	st	Z, r18
    3176:	8c 93       	st	X, r24
    3178:	26 81       	ldd	r18, Z+6	; 0x06
    317a:	37 81       	ldd	r19, Z+7	; 0x07
    317c:	2f 5f       	subi	r18, 0xFF	; 255
    317e:	3f 4f       	sbci	r19, 0xFF	; 255
    3180:	37 83       	std	Z+7, r19	; 0x07
    3182:	26 83       	std	Z+6, r18	; 0x06
    3184:	10 c0       	rjmp	.+32     	; 0x31a6 <fputc+0x66>
    3186:	eb 01       	movw	r28, r22
    3188:	09 2f       	mov	r16, r25
    318a:	18 2f       	mov	r17, r24
    318c:	00 84       	ldd	r0, Z+8	; 0x08
    318e:	f1 85       	ldd	r31, Z+9	; 0x09
    3190:	e0 2d       	mov	r30, r0
    3192:	19 95       	eicall
    3194:	89 2b       	or	r24, r25
    3196:	e1 f6       	brne	.-72     	; 0x3150 <fputc+0x10>
    3198:	8e 81       	ldd	r24, Y+6	; 0x06
    319a:	9f 81       	ldd	r25, Y+7	; 0x07
    319c:	01 96       	adiw	r24, 0x01	; 1
    319e:	9f 83       	std	Y+7, r25	; 0x07
    31a0:	8e 83       	std	Y+6, r24	; 0x06
    31a2:	81 2f       	mov	r24, r17
    31a4:	90 2f       	mov	r25, r16
    31a6:	df 91       	pop	r29
    31a8:	cf 91       	pop	r28
    31aa:	1f 91       	pop	r17
    31ac:	0f 91       	pop	r16
    31ae:	08 95       	ret

000031b0 <printf>:
    31b0:	cf 93       	push	r28
    31b2:	df 93       	push	r29
    31b4:	cd b7       	in	r28, 0x3d	; 61
    31b6:	de b7       	in	r29, 0x3e	; 62
    31b8:	ae 01       	movw	r20, r28
    31ba:	4a 5f       	subi	r20, 0xFA	; 250
    31bc:	5f 4f       	sbci	r21, 0xFF	; 255
    31be:	fa 01       	movw	r30, r20
    31c0:	61 91       	ld	r22, Z+
    31c2:	71 91       	ld	r23, Z+
    31c4:	af 01       	movw	r20, r30
    31c6:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <__iob+0x2>
    31ca:	90 91 fc 05 	lds	r25, 0x05FC	; 0x8005fc <__iob+0x3>
    31ce:	95 d0       	rcall	.+298    	; 0x32fa <vfprintf>
    31d0:	df 91       	pop	r29
    31d2:	cf 91       	pop	r28
    31d4:	08 95       	ret

000031d6 <printf_P>:
    31d6:	0f 93       	push	r16
    31d8:	1f 93       	push	r17
    31da:	cf 93       	push	r28
    31dc:	df 93       	push	r29
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
    31e2:	ae 01       	movw	r20, r28
    31e4:	48 5f       	subi	r20, 0xF8	; 248
    31e6:	5f 4f       	sbci	r21, 0xFF	; 255
    31e8:	da 01       	movw	r26, r20
    31ea:	6d 91       	ld	r22, X+
    31ec:	7d 91       	ld	r23, X+
    31ee:	ad 01       	movw	r20, r26
    31f0:	09 ef       	ldi	r16, 0xF9	; 249
    31f2:	15 e0       	ldi	r17, 0x05	; 5
    31f4:	f8 01       	movw	r30, r16
    31f6:	82 81       	ldd	r24, Z+2	; 0x02
    31f8:	93 81       	ldd	r25, Z+3	; 0x03
    31fa:	dc 01       	movw	r26, r24
    31fc:	13 96       	adiw	r26, 0x03	; 3
    31fe:	2c 91       	ld	r18, X
    3200:	13 97       	sbiw	r26, 0x03	; 3
    3202:	28 60       	ori	r18, 0x08	; 8
    3204:	13 96       	adiw	r26, 0x03	; 3
    3206:	2c 93       	st	X, r18
    3208:	78 d0       	rcall	.+240    	; 0x32fa <vfprintf>
    320a:	d8 01       	movw	r26, r16
    320c:	12 96       	adiw	r26, 0x02	; 2
    320e:	ed 91       	ld	r30, X+
    3210:	fc 91       	ld	r31, X
    3212:	13 97       	sbiw	r26, 0x03	; 3
    3214:	23 81       	ldd	r18, Z+3	; 0x03
    3216:	27 7f       	andi	r18, 0xF7	; 247
    3218:	23 83       	std	Z+3, r18	; 0x03
    321a:	df 91       	pop	r29
    321c:	cf 91       	pop	r28
    321e:	1f 91       	pop	r17
    3220:	0f 91       	pop	r16
    3222:	08 95       	ret

00003224 <snprintf>:
    3224:	0f 93       	push	r16
    3226:	1f 93       	push	r17
    3228:	cf 93       	push	r28
    322a:	df 93       	push	r29
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
    3230:	2e 97       	sbiw	r28, 0x0e	; 14
    3232:	0f b6       	in	r0, 0x3f	; 63
    3234:	f8 94       	cli
    3236:	de bf       	out	0x3e, r29	; 62
    3238:	0f be       	out	0x3f, r0	; 63
    323a:	cd bf       	out	0x3d, r28	; 61
    323c:	0e 89       	ldd	r16, Y+22	; 0x16
    323e:	1f 89       	ldd	r17, Y+23	; 0x17
    3240:	88 8d       	ldd	r24, Y+24	; 0x18
    3242:	99 8d       	ldd	r25, Y+25	; 0x19
    3244:	26 e0       	ldi	r18, 0x06	; 6
    3246:	2c 83       	std	Y+4, r18	; 0x04
    3248:	1a 83       	std	Y+2, r17	; 0x02
    324a:	09 83       	std	Y+1, r16	; 0x01
    324c:	97 ff       	sbrs	r25, 7
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <snprintf+0x30>
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	90 e8       	ldi	r25, 0x80	; 128
    3254:	01 97       	sbiw	r24, 0x01	; 1
    3256:	9e 83       	std	Y+6, r25	; 0x06
    3258:	8d 83       	std	Y+5, r24	; 0x05
    325a:	ae 01       	movw	r20, r28
    325c:	44 5e       	subi	r20, 0xE4	; 228
    325e:	5f 4f       	sbci	r21, 0xFF	; 255
    3260:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3262:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3264:	ce 01       	movw	r24, r28
    3266:	01 96       	adiw	r24, 0x01	; 1
    3268:	48 d0       	rcall	.+144    	; 0x32fa <vfprintf>
    326a:	4d 81       	ldd	r20, Y+5	; 0x05
    326c:	5e 81       	ldd	r21, Y+6	; 0x06
    326e:	57 fd       	sbrc	r21, 7
    3270:	0a c0       	rjmp	.+20     	; 0x3286 <snprintf+0x62>
    3272:	2f 81       	ldd	r18, Y+7	; 0x07
    3274:	38 85       	ldd	r19, Y+8	; 0x08
    3276:	42 17       	cp	r20, r18
    3278:	53 07       	cpc	r21, r19
    327a:	0c f4       	brge	.+2      	; 0x327e <snprintf+0x5a>
    327c:	9a 01       	movw	r18, r20
    327e:	f8 01       	movw	r30, r16
    3280:	e2 0f       	add	r30, r18
    3282:	f3 1f       	adc	r31, r19
    3284:	10 82       	st	Z, r1
    3286:	2e 96       	adiw	r28, 0x0e	; 14
    3288:	0f b6       	in	r0, 0x3f	; 63
    328a:	f8 94       	cli
    328c:	de bf       	out	0x3e, r29	; 62
    328e:	0f be       	out	0x3f, r0	; 63
    3290:	cd bf       	out	0x3d, r28	; 61
    3292:	df 91       	pop	r29
    3294:	cf 91       	pop	r28
    3296:	1f 91       	pop	r17
    3298:	0f 91       	pop	r16
    329a:	08 95       	ret

0000329c <sprintf>:
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	cf 93       	push	r28
    32a2:	df 93       	push	r29
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
    32a8:	2e 97       	sbiw	r28, 0x0e	; 14
    32aa:	0f b6       	in	r0, 0x3f	; 63
    32ac:	f8 94       	cli
    32ae:	de bf       	out	0x3e, r29	; 62
    32b0:	0f be       	out	0x3f, r0	; 63
    32b2:	cd bf       	out	0x3d, r28	; 61
    32b4:	0e 89       	ldd	r16, Y+22	; 0x16
    32b6:	1f 89       	ldd	r17, Y+23	; 0x17
    32b8:	86 e0       	ldi	r24, 0x06	; 6
    32ba:	8c 83       	std	Y+4, r24	; 0x04
    32bc:	1a 83       	std	Y+2, r17	; 0x02
    32be:	09 83       	std	Y+1, r16	; 0x01
    32c0:	8f ef       	ldi	r24, 0xFF	; 255
    32c2:	9f e7       	ldi	r25, 0x7F	; 127
    32c4:	9e 83       	std	Y+6, r25	; 0x06
    32c6:	8d 83       	std	Y+5, r24	; 0x05
    32c8:	ae 01       	movw	r20, r28
    32ca:	46 5e       	subi	r20, 0xE6	; 230
    32cc:	5f 4f       	sbci	r21, 0xFF	; 255
    32ce:	68 8d       	ldd	r22, Y+24	; 0x18
    32d0:	79 8d       	ldd	r23, Y+25	; 0x19
    32d2:	ce 01       	movw	r24, r28
    32d4:	01 96       	adiw	r24, 0x01	; 1
    32d6:	11 d0       	rcall	.+34     	; 0x32fa <vfprintf>
    32d8:	2f 81       	ldd	r18, Y+7	; 0x07
    32da:	38 85       	ldd	r19, Y+8	; 0x08
    32dc:	f8 01       	movw	r30, r16
    32de:	e2 0f       	add	r30, r18
    32e0:	f3 1f       	adc	r31, r19
    32e2:	10 82       	st	Z, r1
    32e4:	2e 96       	adiw	r28, 0x0e	; 14
    32e6:	0f b6       	in	r0, 0x3f	; 63
    32e8:	f8 94       	cli
    32ea:	de bf       	out	0x3e, r29	; 62
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	cd bf       	out	0x3d, r28	; 61
    32f0:	df 91       	pop	r29
    32f2:	cf 91       	pop	r28
    32f4:	1f 91       	pop	r17
    32f6:	0f 91       	pop	r16
    32f8:	08 95       	ret

000032fa <vfprintf>:
    32fa:	2f 92       	push	r2
    32fc:	3f 92       	push	r3
    32fe:	4f 92       	push	r4
    3300:	5f 92       	push	r5
    3302:	6f 92       	push	r6
    3304:	7f 92       	push	r7
    3306:	8f 92       	push	r8
    3308:	9f 92       	push	r9
    330a:	af 92       	push	r10
    330c:	bf 92       	push	r11
    330e:	cf 92       	push	r12
    3310:	df 92       	push	r13
    3312:	ef 92       	push	r14
    3314:	ff 92       	push	r15
    3316:	0f 93       	push	r16
    3318:	1f 93       	push	r17
    331a:	cf 93       	push	r28
    331c:	df 93       	push	r29
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    3322:	2c 97       	sbiw	r28, 0x0c	; 12
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	f8 94       	cli
    3328:	de bf       	out	0x3e, r29	; 62
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	cd bf       	out	0x3d, r28	; 61
    332e:	7c 01       	movw	r14, r24
    3330:	6b 01       	movw	r12, r22
    3332:	8a 01       	movw	r16, r20
    3334:	fc 01       	movw	r30, r24
    3336:	17 82       	std	Z+7, r1	; 0x07
    3338:	16 82       	std	Z+6, r1	; 0x06
    333a:	83 81       	ldd	r24, Z+3	; 0x03
    333c:	81 ff       	sbrs	r24, 1
    333e:	b0 c1       	rjmp	.+864    	; 0x36a0 <vfprintf+0x3a6>
    3340:	ce 01       	movw	r24, r28
    3342:	01 96       	adiw	r24, 0x01	; 1
    3344:	4c 01       	movw	r8, r24
    3346:	f7 01       	movw	r30, r14
    3348:	93 81       	ldd	r25, Z+3	; 0x03
    334a:	f6 01       	movw	r30, r12
    334c:	93 fd       	sbrc	r25, 3
    334e:	85 91       	lpm	r24, Z+
    3350:	93 ff       	sbrs	r25, 3
    3352:	81 91       	ld	r24, Z+
    3354:	6f 01       	movw	r12, r30
    3356:	88 23       	and	r24, r24
    3358:	09 f4       	brne	.+2      	; 0x335c <vfprintf+0x62>
    335a:	9e c1       	rjmp	.+828    	; 0x3698 <vfprintf+0x39e>
    335c:	85 32       	cpi	r24, 0x25	; 37
    335e:	39 f4       	brne	.+14     	; 0x336e <vfprintf+0x74>
    3360:	93 fd       	sbrc	r25, 3
    3362:	85 91       	lpm	r24, Z+
    3364:	93 ff       	sbrs	r25, 3
    3366:	81 91       	ld	r24, Z+
    3368:	6f 01       	movw	r12, r30
    336a:	85 32       	cpi	r24, 0x25	; 37
    336c:	21 f4       	brne	.+8      	; 0x3376 <vfprintf+0x7c>
    336e:	b7 01       	movw	r22, r14
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	e6 de       	rcall	.-564    	; 0x3140 <fputc>
    3374:	e8 cf       	rjmp	.-48     	; 0x3346 <vfprintf+0x4c>
    3376:	51 2c       	mov	r5, r1
    3378:	31 2c       	mov	r3, r1
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	20 32       	cpi	r18, 0x20	; 32
    337e:	a0 f4       	brcc	.+40     	; 0x33a8 <vfprintf+0xae>
    3380:	8b 32       	cpi	r24, 0x2B	; 43
    3382:	69 f0       	breq	.+26     	; 0x339e <vfprintf+0xa4>
    3384:	30 f4       	brcc	.+12     	; 0x3392 <vfprintf+0x98>
    3386:	80 32       	cpi	r24, 0x20	; 32
    3388:	59 f0       	breq	.+22     	; 0x33a0 <vfprintf+0xa6>
    338a:	83 32       	cpi	r24, 0x23	; 35
    338c:	69 f4       	brne	.+26     	; 0x33a8 <vfprintf+0xae>
    338e:	20 61       	ori	r18, 0x10	; 16
    3390:	2c c0       	rjmp	.+88     	; 0x33ea <vfprintf+0xf0>
    3392:	8d 32       	cpi	r24, 0x2D	; 45
    3394:	39 f0       	breq	.+14     	; 0x33a4 <vfprintf+0xaa>
    3396:	80 33       	cpi	r24, 0x30	; 48
    3398:	39 f4       	brne	.+14     	; 0x33a8 <vfprintf+0xae>
    339a:	21 60       	ori	r18, 0x01	; 1
    339c:	26 c0       	rjmp	.+76     	; 0x33ea <vfprintf+0xf0>
    339e:	22 60       	ori	r18, 0x02	; 2
    33a0:	24 60       	ori	r18, 0x04	; 4
    33a2:	23 c0       	rjmp	.+70     	; 0x33ea <vfprintf+0xf0>
    33a4:	28 60       	ori	r18, 0x08	; 8
    33a6:	21 c0       	rjmp	.+66     	; 0x33ea <vfprintf+0xf0>
    33a8:	27 fd       	sbrc	r18, 7
    33aa:	27 c0       	rjmp	.+78     	; 0x33fa <vfprintf+0x100>
    33ac:	30 ed       	ldi	r19, 0xD0	; 208
    33ae:	38 0f       	add	r19, r24
    33b0:	3a 30       	cpi	r19, 0x0A	; 10
    33b2:	78 f4       	brcc	.+30     	; 0x33d2 <vfprintf+0xd8>
    33b4:	26 ff       	sbrs	r18, 6
    33b6:	06 c0       	rjmp	.+12     	; 0x33c4 <vfprintf+0xca>
    33b8:	fa e0       	ldi	r31, 0x0A	; 10
    33ba:	5f 9e       	mul	r5, r31
    33bc:	30 0d       	add	r19, r0
    33be:	11 24       	eor	r1, r1
    33c0:	53 2e       	mov	r5, r19
    33c2:	13 c0       	rjmp	.+38     	; 0x33ea <vfprintf+0xf0>
    33c4:	8a e0       	ldi	r24, 0x0A	; 10
    33c6:	38 9e       	mul	r3, r24
    33c8:	30 0d       	add	r19, r0
    33ca:	11 24       	eor	r1, r1
    33cc:	33 2e       	mov	r3, r19
    33ce:	20 62       	ori	r18, 0x20	; 32
    33d0:	0c c0       	rjmp	.+24     	; 0x33ea <vfprintf+0xf0>
    33d2:	8e 32       	cpi	r24, 0x2E	; 46
    33d4:	21 f4       	brne	.+8      	; 0x33de <vfprintf+0xe4>
    33d6:	26 fd       	sbrc	r18, 6
    33d8:	5f c1       	rjmp	.+702    	; 0x3698 <vfprintf+0x39e>
    33da:	20 64       	ori	r18, 0x40	; 64
    33dc:	06 c0       	rjmp	.+12     	; 0x33ea <vfprintf+0xf0>
    33de:	8c 36       	cpi	r24, 0x6C	; 108
    33e0:	11 f4       	brne	.+4      	; 0x33e6 <vfprintf+0xec>
    33e2:	20 68       	ori	r18, 0x80	; 128
    33e4:	02 c0       	rjmp	.+4      	; 0x33ea <vfprintf+0xf0>
    33e6:	88 36       	cpi	r24, 0x68	; 104
    33e8:	41 f4       	brne	.+16     	; 0x33fa <vfprintf+0x100>
    33ea:	f6 01       	movw	r30, r12
    33ec:	93 fd       	sbrc	r25, 3
    33ee:	85 91       	lpm	r24, Z+
    33f0:	93 ff       	sbrs	r25, 3
    33f2:	81 91       	ld	r24, Z+
    33f4:	6f 01       	movw	r12, r30
    33f6:	81 11       	cpse	r24, r1
    33f8:	c1 cf       	rjmp	.-126    	; 0x337c <vfprintf+0x82>
    33fa:	98 2f       	mov	r25, r24
    33fc:	9f 7d       	andi	r25, 0xDF	; 223
    33fe:	95 54       	subi	r25, 0x45	; 69
    3400:	93 30       	cpi	r25, 0x03	; 3
    3402:	28 f4       	brcc	.+10     	; 0x340e <vfprintf+0x114>
    3404:	0c 5f       	subi	r16, 0xFC	; 252
    3406:	1f 4f       	sbci	r17, 0xFF	; 255
    3408:	ff e3       	ldi	r31, 0x3F	; 63
    340a:	f9 83       	std	Y+1, r31	; 0x01
    340c:	0d c0       	rjmp	.+26     	; 0x3428 <vfprintf+0x12e>
    340e:	83 36       	cpi	r24, 0x63	; 99
    3410:	31 f0       	breq	.+12     	; 0x341e <vfprintf+0x124>
    3412:	83 37       	cpi	r24, 0x73	; 115
    3414:	71 f0       	breq	.+28     	; 0x3432 <vfprintf+0x138>
    3416:	83 35       	cpi	r24, 0x53	; 83
    3418:	09 f0       	breq	.+2      	; 0x341c <vfprintf+0x122>
    341a:	57 c0       	rjmp	.+174    	; 0x34ca <vfprintf+0x1d0>
    341c:	21 c0       	rjmp	.+66     	; 0x3460 <vfprintf+0x166>
    341e:	f8 01       	movw	r30, r16
    3420:	80 81       	ld	r24, Z
    3422:	89 83       	std	Y+1, r24	; 0x01
    3424:	0e 5f       	subi	r16, 0xFE	; 254
    3426:	1f 4f       	sbci	r17, 0xFF	; 255
    3428:	44 24       	eor	r4, r4
    342a:	43 94       	inc	r4
    342c:	51 2c       	mov	r5, r1
    342e:	54 01       	movw	r10, r8
    3430:	14 c0       	rjmp	.+40     	; 0x345a <vfprintf+0x160>
    3432:	38 01       	movw	r6, r16
    3434:	f2 e0       	ldi	r31, 0x02	; 2
    3436:	6f 0e       	add	r6, r31
    3438:	71 1c       	adc	r7, r1
    343a:	f8 01       	movw	r30, r16
    343c:	a0 80       	ld	r10, Z
    343e:	b1 80       	ldd	r11, Z+1	; 0x01
    3440:	26 ff       	sbrs	r18, 6
    3442:	03 c0       	rjmp	.+6      	; 0x344a <vfprintf+0x150>
    3444:	65 2d       	mov	r22, r5
    3446:	70 e0       	ldi	r23, 0x00	; 0
    3448:	02 c0       	rjmp	.+4      	; 0x344e <vfprintf+0x154>
    344a:	6f ef       	ldi	r22, 0xFF	; 255
    344c:	7f ef       	ldi	r23, 0xFF	; 255
    344e:	c5 01       	movw	r24, r10
    3450:	2c 87       	std	Y+12, r18	; 0x0c
    3452:	4c d1       	rcall	.+664    	; 0x36ec <strnlen>
    3454:	2c 01       	movw	r4, r24
    3456:	83 01       	movw	r16, r6
    3458:	2c 85       	ldd	r18, Y+12	; 0x0c
    345a:	2f 77       	andi	r18, 0x7F	; 127
    345c:	22 2e       	mov	r2, r18
    345e:	16 c0       	rjmp	.+44     	; 0x348c <vfprintf+0x192>
    3460:	38 01       	movw	r6, r16
    3462:	f2 e0       	ldi	r31, 0x02	; 2
    3464:	6f 0e       	add	r6, r31
    3466:	71 1c       	adc	r7, r1
    3468:	f8 01       	movw	r30, r16
    346a:	a0 80       	ld	r10, Z
    346c:	b1 80       	ldd	r11, Z+1	; 0x01
    346e:	26 ff       	sbrs	r18, 6
    3470:	03 c0       	rjmp	.+6      	; 0x3478 <vfprintf+0x17e>
    3472:	65 2d       	mov	r22, r5
    3474:	70 e0       	ldi	r23, 0x00	; 0
    3476:	02 c0       	rjmp	.+4      	; 0x347c <vfprintf+0x182>
    3478:	6f ef       	ldi	r22, 0xFF	; 255
    347a:	7f ef       	ldi	r23, 0xFF	; 255
    347c:	c5 01       	movw	r24, r10
    347e:	2c 87       	std	Y+12, r18	; 0x0c
    3480:	2a d1       	rcall	.+596    	; 0x36d6 <strnlen_P>
    3482:	2c 01       	movw	r4, r24
    3484:	2c 85       	ldd	r18, Y+12	; 0x0c
    3486:	20 68       	ori	r18, 0x80	; 128
    3488:	22 2e       	mov	r2, r18
    348a:	83 01       	movw	r16, r6
    348c:	23 fc       	sbrc	r2, 3
    348e:	19 c0       	rjmp	.+50     	; 0x34c2 <vfprintf+0x1c8>
    3490:	83 2d       	mov	r24, r3
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	48 16       	cp	r4, r24
    3496:	59 06       	cpc	r5, r25
    3498:	a0 f4       	brcc	.+40     	; 0x34c2 <vfprintf+0x1c8>
    349a:	b7 01       	movw	r22, r14
    349c:	80 e2       	ldi	r24, 0x20	; 32
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	4f de       	rcall	.-866    	; 0x3140 <fputc>
    34a2:	3a 94       	dec	r3
    34a4:	f5 cf       	rjmp	.-22     	; 0x3490 <vfprintf+0x196>
    34a6:	f5 01       	movw	r30, r10
    34a8:	27 fc       	sbrc	r2, 7
    34aa:	85 91       	lpm	r24, Z+
    34ac:	27 fe       	sbrs	r2, 7
    34ae:	81 91       	ld	r24, Z+
    34b0:	5f 01       	movw	r10, r30
    34b2:	b7 01       	movw	r22, r14
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	44 de       	rcall	.-888    	; 0x3140 <fputc>
    34b8:	31 10       	cpse	r3, r1
    34ba:	3a 94       	dec	r3
    34bc:	f1 e0       	ldi	r31, 0x01	; 1
    34be:	4f 1a       	sub	r4, r31
    34c0:	51 08       	sbc	r5, r1
    34c2:	41 14       	cp	r4, r1
    34c4:	51 04       	cpc	r5, r1
    34c6:	79 f7       	brne	.-34     	; 0x34a6 <vfprintf+0x1ac>
    34c8:	de c0       	rjmp	.+444    	; 0x3686 <vfprintf+0x38c>
    34ca:	84 36       	cpi	r24, 0x64	; 100
    34cc:	11 f0       	breq	.+4      	; 0x34d2 <vfprintf+0x1d8>
    34ce:	89 36       	cpi	r24, 0x69	; 105
    34d0:	31 f5       	brne	.+76     	; 0x351e <vfprintf+0x224>
    34d2:	f8 01       	movw	r30, r16
    34d4:	27 ff       	sbrs	r18, 7
    34d6:	07 c0       	rjmp	.+14     	; 0x34e6 <vfprintf+0x1ec>
    34d8:	60 81       	ld	r22, Z
    34da:	71 81       	ldd	r23, Z+1	; 0x01
    34dc:	82 81       	ldd	r24, Z+2	; 0x02
    34de:	93 81       	ldd	r25, Z+3	; 0x03
    34e0:	0c 5f       	subi	r16, 0xFC	; 252
    34e2:	1f 4f       	sbci	r17, 0xFF	; 255
    34e4:	08 c0       	rjmp	.+16     	; 0x34f6 <vfprintf+0x1fc>
    34e6:	60 81       	ld	r22, Z
    34e8:	71 81       	ldd	r23, Z+1	; 0x01
    34ea:	07 2e       	mov	r0, r23
    34ec:	00 0c       	add	r0, r0
    34ee:	88 0b       	sbc	r24, r24
    34f0:	99 0b       	sbc	r25, r25
    34f2:	0e 5f       	subi	r16, 0xFE	; 254
    34f4:	1f 4f       	sbci	r17, 0xFF	; 255
    34f6:	2f 76       	andi	r18, 0x6F	; 111
    34f8:	72 2e       	mov	r7, r18
    34fa:	97 ff       	sbrs	r25, 7
    34fc:	09 c0       	rjmp	.+18     	; 0x3510 <vfprintf+0x216>
    34fe:	90 95       	com	r25
    3500:	80 95       	com	r24
    3502:	70 95       	com	r23
    3504:	61 95       	neg	r22
    3506:	7f 4f       	sbci	r23, 0xFF	; 255
    3508:	8f 4f       	sbci	r24, 0xFF	; 255
    350a:	9f 4f       	sbci	r25, 0xFF	; 255
    350c:	20 68       	ori	r18, 0x80	; 128
    350e:	72 2e       	mov	r7, r18
    3510:	2a e0       	ldi	r18, 0x0A	; 10
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	a4 01       	movw	r20, r8
    3516:	f5 d0       	rcall	.+490    	; 0x3702 <__ultoa_invert>
    3518:	a8 2e       	mov	r10, r24
    351a:	a8 18       	sub	r10, r8
    351c:	43 c0       	rjmp	.+134    	; 0x35a4 <vfprintf+0x2aa>
    351e:	85 37       	cpi	r24, 0x75	; 117
    3520:	29 f4       	brne	.+10     	; 0x352c <vfprintf+0x232>
    3522:	2f 7e       	andi	r18, 0xEF	; 239
    3524:	b2 2e       	mov	r11, r18
    3526:	2a e0       	ldi	r18, 0x0A	; 10
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	25 c0       	rjmp	.+74     	; 0x3576 <vfprintf+0x27c>
    352c:	f2 2f       	mov	r31, r18
    352e:	f9 7f       	andi	r31, 0xF9	; 249
    3530:	bf 2e       	mov	r11, r31
    3532:	8f 36       	cpi	r24, 0x6F	; 111
    3534:	c1 f0       	breq	.+48     	; 0x3566 <vfprintf+0x26c>
    3536:	18 f4       	brcc	.+6      	; 0x353e <vfprintf+0x244>
    3538:	88 35       	cpi	r24, 0x58	; 88
    353a:	79 f0       	breq	.+30     	; 0x355a <vfprintf+0x260>
    353c:	ad c0       	rjmp	.+346    	; 0x3698 <vfprintf+0x39e>
    353e:	80 37       	cpi	r24, 0x70	; 112
    3540:	19 f0       	breq	.+6      	; 0x3548 <vfprintf+0x24e>
    3542:	88 37       	cpi	r24, 0x78	; 120
    3544:	21 f0       	breq	.+8      	; 0x354e <vfprintf+0x254>
    3546:	a8 c0       	rjmp	.+336    	; 0x3698 <vfprintf+0x39e>
    3548:	2f 2f       	mov	r18, r31
    354a:	20 61       	ori	r18, 0x10	; 16
    354c:	b2 2e       	mov	r11, r18
    354e:	b4 fe       	sbrs	r11, 4
    3550:	0d c0       	rjmp	.+26     	; 0x356c <vfprintf+0x272>
    3552:	8b 2d       	mov	r24, r11
    3554:	84 60       	ori	r24, 0x04	; 4
    3556:	b8 2e       	mov	r11, r24
    3558:	09 c0       	rjmp	.+18     	; 0x356c <vfprintf+0x272>
    355a:	24 ff       	sbrs	r18, 4
    355c:	0a c0       	rjmp	.+20     	; 0x3572 <vfprintf+0x278>
    355e:	9f 2f       	mov	r25, r31
    3560:	96 60       	ori	r25, 0x06	; 6
    3562:	b9 2e       	mov	r11, r25
    3564:	06 c0       	rjmp	.+12     	; 0x3572 <vfprintf+0x278>
    3566:	28 e0       	ldi	r18, 0x08	; 8
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	05 c0       	rjmp	.+10     	; 0x3576 <vfprintf+0x27c>
    356c:	20 e1       	ldi	r18, 0x10	; 16
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	02 c0       	rjmp	.+4      	; 0x3576 <vfprintf+0x27c>
    3572:	20 e1       	ldi	r18, 0x10	; 16
    3574:	32 e0       	ldi	r19, 0x02	; 2
    3576:	f8 01       	movw	r30, r16
    3578:	b7 fe       	sbrs	r11, 7
    357a:	07 c0       	rjmp	.+14     	; 0x358a <vfprintf+0x290>
    357c:	60 81       	ld	r22, Z
    357e:	71 81       	ldd	r23, Z+1	; 0x01
    3580:	82 81       	ldd	r24, Z+2	; 0x02
    3582:	93 81       	ldd	r25, Z+3	; 0x03
    3584:	0c 5f       	subi	r16, 0xFC	; 252
    3586:	1f 4f       	sbci	r17, 0xFF	; 255
    3588:	06 c0       	rjmp	.+12     	; 0x3596 <vfprintf+0x29c>
    358a:	60 81       	ld	r22, Z
    358c:	71 81       	ldd	r23, Z+1	; 0x01
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	0e 5f       	subi	r16, 0xFE	; 254
    3594:	1f 4f       	sbci	r17, 0xFF	; 255
    3596:	a4 01       	movw	r20, r8
    3598:	b4 d0       	rcall	.+360    	; 0x3702 <__ultoa_invert>
    359a:	a8 2e       	mov	r10, r24
    359c:	a8 18       	sub	r10, r8
    359e:	fb 2d       	mov	r31, r11
    35a0:	ff 77       	andi	r31, 0x7F	; 127
    35a2:	7f 2e       	mov	r7, r31
    35a4:	76 fe       	sbrs	r7, 6
    35a6:	0b c0       	rjmp	.+22     	; 0x35be <vfprintf+0x2c4>
    35a8:	37 2d       	mov	r19, r7
    35aa:	3e 7f       	andi	r19, 0xFE	; 254
    35ac:	a5 14       	cp	r10, r5
    35ae:	50 f4       	brcc	.+20     	; 0x35c4 <vfprintf+0x2ca>
    35b0:	74 fe       	sbrs	r7, 4
    35b2:	0a c0       	rjmp	.+20     	; 0x35c8 <vfprintf+0x2ce>
    35b4:	72 fc       	sbrc	r7, 2
    35b6:	08 c0       	rjmp	.+16     	; 0x35c8 <vfprintf+0x2ce>
    35b8:	37 2d       	mov	r19, r7
    35ba:	3e 7e       	andi	r19, 0xEE	; 238
    35bc:	05 c0       	rjmp	.+10     	; 0x35c8 <vfprintf+0x2ce>
    35be:	ba 2c       	mov	r11, r10
    35c0:	37 2d       	mov	r19, r7
    35c2:	03 c0       	rjmp	.+6      	; 0x35ca <vfprintf+0x2d0>
    35c4:	ba 2c       	mov	r11, r10
    35c6:	01 c0       	rjmp	.+2      	; 0x35ca <vfprintf+0x2d0>
    35c8:	b5 2c       	mov	r11, r5
    35ca:	34 ff       	sbrs	r19, 4
    35cc:	0d c0       	rjmp	.+26     	; 0x35e8 <vfprintf+0x2ee>
    35ce:	fe 01       	movw	r30, r28
    35d0:	ea 0d       	add	r30, r10
    35d2:	f1 1d       	adc	r31, r1
    35d4:	80 81       	ld	r24, Z
    35d6:	80 33       	cpi	r24, 0x30	; 48
    35d8:	11 f4       	brne	.+4      	; 0x35de <vfprintf+0x2e4>
    35da:	39 7e       	andi	r19, 0xE9	; 233
    35dc:	09 c0       	rjmp	.+18     	; 0x35f0 <vfprintf+0x2f6>
    35de:	32 ff       	sbrs	r19, 2
    35e0:	06 c0       	rjmp	.+12     	; 0x35ee <vfprintf+0x2f4>
    35e2:	b3 94       	inc	r11
    35e4:	b3 94       	inc	r11
    35e6:	04 c0       	rjmp	.+8      	; 0x35f0 <vfprintf+0x2f6>
    35e8:	83 2f       	mov	r24, r19
    35ea:	86 78       	andi	r24, 0x86	; 134
    35ec:	09 f0       	breq	.+2      	; 0x35f0 <vfprintf+0x2f6>
    35ee:	b3 94       	inc	r11
    35f0:	33 fd       	sbrc	r19, 3
    35f2:	12 c0       	rjmp	.+36     	; 0x3618 <vfprintf+0x31e>
    35f4:	30 ff       	sbrs	r19, 0
    35f6:	06 c0       	rjmp	.+12     	; 0x3604 <vfprintf+0x30a>
    35f8:	5a 2c       	mov	r5, r10
    35fa:	b3 14       	cp	r11, r3
    35fc:	18 f4       	brcc	.+6      	; 0x3604 <vfprintf+0x30a>
    35fe:	53 0c       	add	r5, r3
    3600:	5b 18       	sub	r5, r11
    3602:	b3 2c       	mov	r11, r3
    3604:	b3 14       	cp	r11, r3
    3606:	60 f4       	brcc	.+24     	; 0x3620 <vfprintf+0x326>
    3608:	b7 01       	movw	r22, r14
    360a:	80 e2       	ldi	r24, 0x20	; 32
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	3c 87       	std	Y+12, r19	; 0x0c
    3610:	97 dd       	rcall	.-1234   	; 0x3140 <fputc>
    3612:	b3 94       	inc	r11
    3614:	3c 85       	ldd	r19, Y+12	; 0x0c
    3616:	f6 cf       	rjmp	.-20     	; 0x3604 <vfprintf+0x30a>
    3618:	b3 14       	cp	r11, r3
    361a:	10 f4       	brcc	.+4      	; 0x3620 <vfprintf+0x326>
    361c:	3b 18       	sub	r3, r11
    361e:	01 c0       	rjmp	.+2      	; 0x3622 <vfprintf+0x328>
    3620:	31 2c       	mov	r3, r1
    3622:	34 ff       	sbrs	r19, 4
    3624:	11 c0       	rjmp	.+34     	; 0x3648 <vfprintf+0x34e>
    3626:	b7 01       	movw	r22, r14
    3628:	80 e3       	ldi	r24, 0x30	; 48
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	3c 87       	std	Y+12, r19	; 0x0c
    362e:	88 dd       	rcall	.-1264   	; 0x3140 <fputc>
    3630:	3c 85       	ldd	r19, Y+12	; 0x0c
    3632:	32 ff       	sbrs	r19, 2
    3634:	16 c0       	rjmp	.+44     	; 0x3662 <vfprintf+0x368>
    3636:	31 fd       	sbrc	r19, 1
    3638:	03 c0       	rjmp	.+6      	; 0x3640 <vfprintf+0x346>
    363a:	88 e7       	ldi	r24, 0x78	; 120
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	02 c0       	rjmp	.+4      	; 0x3644 <vfprintf+0x34a>
    3640:	88 e5       	ldi	r24, 0x58	; 88
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	b7 01       	movw	r22, r14
    3646:	0c c0       	rjmp	.+24     	; 0x3660 <vfprintf+0x366>
    3648:	83 2f       	mov	r24, r19
    364a:	86 78       	andi	r24, 0x86	; 134
    364c:	51 f0       	breq	.+20     	; 0x3662 <vfprintf+0x368>
    364e:	31 ff       	sbrs	r19, 1
    3650:	02 c0       	rjmp	.+4      	; 0x3656 <vfprintf+0x35c>
    3652:	8b e2       	ldi	r24, 0x2B	; 43
    3654:	01 c0       	rjmp	.+2      	; 0x3658 <vfprintf+0x35e>
    3656:	80 e2       	ldi	r24, 0x20	; 32
    3658:	37 fd       	sbrc	r19, 7
    365a:	8d e2       	ldi	r24, 0x2D	; 45
    365c:	b7 01       	movw	r22, r14
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	6f dd       	rcall	.-1314   	; 0x3140 <fputc>
    3662:	a5 14       	cp	r10, r5
    3664:	30 f4       	brcc	.+12     	; 0x3672 <vfprintf+0x378>
    3666:	b7 01       	movw	r22, r14
    3668:	80 e3       	ldi	r24, 0x30	; 48
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	69 dd       	rcall	.-1326   	; 0x3140 <fputc>
    366e:	5a 94       	dec	r5
    3670:	f8 cf       	rjmp	.-16     	; 0x3662 <vfprintf+0x368>
    3672:	aa 94       	dec	r10
    3674:	f4 01       	movw	r30, r8
    3676:	ea 0d       	add	r30, r10
    3678:	f1 1d       	adc	r31, r1
    367a:	80 81       	ld	r24, Z
    367c:	b7 01       	movw	r22, r14
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	5f dd       	rcall	.-1346   	; 0x3140 <fputc>
    3682:	a1 10       	cpse	r10, r1
    3684:	f6 cf       	rjmp	.-20     	; 0x3672 <vfprintf+0x378>
    3686:	33 20       	and	r3, r3
    3688:	09 f4       	brne	.+2      	; 0x368c <vfprintf+0x392>
    368a:	5d ce       	rjmp	.-838    	; 0x3346 <vfprintf+0x4c>
    368c:	b7 01       	movw	r22, r14
    368e:	80 e2       	ldi	r24, 0x20	; 32
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	56 dd       	rcall	.-1364   	; 0x3140 <fputc>
    3694:	3a 94       	dec	r3
    3696:	f7 cf       	rjmp	.-18     	; 0x3686 <vfprintf+0x38c>
    3698:	f7 01       	movw	r30, r14
    369a:	86 81       	ldd	r24, Z+6	; 0x06
    369c:	97 81       	ldd	r25, Z+7	; 0x07
    369e:	02 c0       	rjmp	.+4      	; 0x36a4 <vfprintf+0x3aa>
    36a0:	8f ef       	ldi	r24, 0xFF	; 255
    36a2:	9f ef       	ldi	r25, 0xFF	; 255
    36a4:	2c 96       	adiw	r28, 0x0c	; 12
    36a6:	0f b6       	in	r0, 0x3f	; 63
    36a8:	f8 94       	cli
    36aa:	de bf       	out	0x3e, r29	; 62
    36ac:	0f be       	out	0x3f, r0	; 63
    36ae:	cd bf       	out	0x3d, r28	; 61
    36b0:	df 91       	pop	r29
    36b2:	cf 91       	pop	r28
    36b4:	1f 91       	pop	r17
    36b6:	0f 91       	pop	r16
    36b8:	ff 90       	pop	r15
    36ba:	ef 90       	pop	r14
    36bc:	df 90       	pop	r13
    36be:	cf 90       	pop	r12
    36c0:	bf 90       	pop	r11
    36c2:	af 90       	pop	r10
    36c4:	9f 90       	pop	r9
    36c6:	8f 90       	pop	r8
    36c8:	7f 90       	pop	r7
    36ca:	6f 90       	pop	r6
    36cc:	5f 90       	pop	r5
    36ce:	4f 90       	pop	r4
    36d0:	3f 90       	pop	r3
    36d2:	2f 90       	pop	r2
    36d4:	08 95       	ret

000036d6 <strnlen_P>:
    36d6:	fc 01       	movw	r30, r24
    36d8:	05 90       	lpm	r0, Z+
    36da:	61 50       	subi	r22, 0x01	; 1
    36dc:	70 40       	sbci	r23, 0x00	; 0
    36de:	01 10       	cpse	r0, r1
    36e0:	d8 f7       	brcc	.-10     	; 0x36d8 <strnlen_P+0x2>
    36e2:	80 95       	com	r24
    36e4:	90 95       	com	r25
    36e6:	8e 0f       	add	r24, r30
    36e8:	9f 1f       	adc	r25, r31
    36ea:	08 95       	ret

000036ec <strnlen>:
    36ec:	fc 01       	movw	r30, r24
    36ee:	61 50       	subi	r22, 0x01	; 1
    36f0:	70 40       	sbci	r23, 0x00	; 0
    36f2:	01 90       	ld	r0, Z+
    36f4:	01 10       	cpse	r0, r1
    36f6:	d8 f7       	brcc	.-10     	; 0x36ee <strnlen+0x2>
    36f8:	80 95       	com	r24
    36fa:	90 95       	com	r25
    36fc:	8e 0f       	add	r24, r30
    36fe:	9f 1f       	adc	r25, r31
    3700:	08 95       	ret

00003702 <__ultoa_invert>:
    3702:	fa 01       	movw	r30, r20
    3704:	aa 27       	eor	r26, r26
    3706:	28 30       	cpi	r18, 0x08	; 8
    3708:	51 f1       	breq	.+84     	; 0x375e <__ultoa_invert+0x5c>
    370a:	20 31       	cpi	r18, 0x10	; 16
    370c:	81 f1       	breq	.+96     	; 0x376e <__ultoa_invert+0x6c>
    370e:	e8 94       	clt
    3710:	6f 93       	push	r22
    3712:	6e 7f       	andi	r22, 0xFE	; 254
    3714:	6e 5f       	subi	r22, 0xFE	; 254
    3716:	7f 4f       	sbci	r23, 0xFF	; 255
    3718:	8f 4f       	sbci	r24, 0xFF	; 255
    371a:	9f 4f       	sbci	r25, 0xFF	; 255
    371c:	af 4f       	sbci	r26, 0xFF	; 255
    371e:	b1 e0       	ldi	r27, 0x01	; 1
    3720:	3e d0       	rcall	.+124    	; 0x379e <__ultoa_invert+0x9c>
    3722:	b4 e0       	ldi	r27, 0x04	; 4
    3724:	3c d0       	rcall	.+120    	; 0x379e <__ultoa_invert+0x9c>
    3726:	67 0f       	add	r22, r23
    3728:	78 1f       	adc	r23, r24
    372a:	89 1f       	adc	r24, r25
    372c:	9a 1f       	adc	r25, r26
    372e:	a1 1d       	adc	r26, r1
    3730:	68 0f       	add	r22, r24
    3732:	79 1f       	adc	r23, r25
    3734:	8a 1f       	adc	r24, r26
    3736:	91 1d       	adc	r25, r1
    3738:	a1 1d       	adc	r26, r1
    373a:	6a 0f       	add	r22, r26
    373c:	71 1d       	adc	r23, r1
    373e:	81 1d       	adc	r24, r1
    3740:	91 1d       	adc	r25, r1
    3742:	a1 1d       	adc	r26, r1
    3744:	20 d0       	rcall	.+64     	; 0x3786 <__ultoa_invert+0x84>
    3746:	09 f4       	brne	.+2      	; 0x374a <__ultoa_invert+0x48>
    3748:	68 94       	set
    374a:	3f 91       	pop	r19
    374c:	2a e0       	ldi	r18, 0x0A	; 10
    374e:	26 9f       	mul	r18, r22
    3750:	11 24       	eor	r1, r1
    3752:	30 19       	sub	r19, r0
    3754:	30 5d       	subi	r19, 0xD0	; 208
    3756:	31 93       	st	Z+, r19
    3758:	de f6       	brtc	.-74     	; 0x3710 <__ultoa_invert+0xe>
    375a:	cf 01       	movw	r24, r30
    375c:	08 95       	ret
    375e:	46 2f       	mov	r20, r22
    3760:	47 70       	andi	r20, 0x07	; 7
    3762:	40 5d       	subi	r20, 0xD0	; 208
    3764:	41 93       	st	Z+, r20
    3766:	b3 e0       	ldi	r27, 0x03	; 3
    3768:	0f d0       	rcall	.+30     	; 0x3788 <__ultoa_invert+0x86>
    376a:	c9 f7       	brne	.-14     	; 0x375e <__ultoa_invert+0x5c>
    376c:	f6 cf       	rjmp	.-20     	; 0x375a <__ultoa_invert+0x58>
    376e:	46 2f       	mov	r20, r22
    3770:	4f 70       	andi	r20, 0x0F	; 15
    3772:	40 5d       	subi	r20, 0xD0	; 208
    3774:	4a 33       	cpi	r20, 0x3A	; 58
    3776:	18 f0       	brcs	.+6      	; 0x377e <__ultoa_invert+0x7c>
    3778:	49 5d       	subi	r20, 0xD9	; 217
    377a:	31 fd       	sbrc	r19, 1
    377c:	40 52       	subi	r20, 0x20	; 32
    377e:	41 93       	st	Z+, r20
    3780:	02 d0       	rcall	.+4      	; 0x3786 <__ultoa_invert+0x84>
    3782:	a9 f7       	brne	.-22     	; 0x376e <__ultoa_invert+0x6c>
    3784:	ea cf       	rjmp	.-44     	; 0x375a <__ultoa_invert+0x58>
    3786:	b4 e0       	ldi	r27, 0x04	; 4
    3788:	a6 95       	lsr	r26
    378a:	97 95       	ror	r25
    378c:	87 95       	ror	r24
    378e:	77 95       	ror	r23
    3790:	67 95       	ror	r22
    3792:	ba 95       	dec	r27
    3794:	c9 f7       	brne	.-14     	; 0x3788 <__ultoa_invert+0x86>
    3796:	00 97       	sbiw	r24, 0x00	; 0
    3798:	61 05       	cpc	r22, r1
    379a:	71 05       	cpc	r23, r1
    379c:	08 95       	ret
    379e:	9b 01       	movw	r18, r22
    37a0:	ac 01       	movw	r20, r24
    37a2:	0a 2e       	mov	r0, r26
    37a4:	06 94       	lsr	r0
    37a6:	57 95       	ror	r21
    37a8:	47 95       	ror	r20
    37aa:	37 95       	ror	r19
    37ac:	27 95       	ror	r18
    37ae:	ba 95       	dec	r27
    37b0:	c9 f7       	brne	.-14     	; 0x37a4 <__ultoa_invert+0xa2>
    37b2:	62 0f       	add	r22, r18
    37b4:	73 1f       	adc	r23, r19
    37b6:	84 1f       	adc	r24, r20
    37b8:	95 1f       	adc	r25, r21
    37ba:	a0 1d       	adc	r26, r0
    37bc:	08 95       	ret

000037be <_exit>:
    37be:	f8 94       	cli

000037c0 <__stop_program>:
    37c0:	ff cf       	rjmp	.-2      	; 0x37c0 <__stop_program>
