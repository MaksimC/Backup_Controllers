
Lab06.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000166  00800200  000037b8  0000384c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000037b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000299  00800366  00800366  000039b2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000039b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000448  00000000  00000000  00003a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000635f  00000000  00000000  00003e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000212b  00000000  00000000  0000a1f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002e93  00000000  00000000  0000c322  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001030  00000000  00000000  0000f1b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019a8  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a3b  00000000  00000000  00011b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a8  00000000  00000000  000165cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1d c4       	rjmp	.+2106   	; 0x83c <__ctors_end>
       2:	00 00       	nop
       4:	3c c4       	rjmp	.+2168   	; 0x87e <__bad_interrupt>
       6:	00 00       	nop
       8:	3a c4       	rjmp	.+2164   	; 0x87e <__bad_interrupt>
       a:	00 00       	nop
       c:	38 c4       	rjmp	.+2160   	; 0x87e <__bad_interrupt>
       e:	00 00       	nop
      10:	36 c4       	rjmp	.+2156   	; 0x87e <__bad_interrupt>
      12:	00 00       	nop
      14:	34 c4       	rjmp	.+2152   	; 0x87e <__bad_interrupt>
      16:	00 00       	nop
      18:	32 c4       	rjmp	.+2148   	; 0x87e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	30 c4       	rjmp	.+2144   	; 0x87e <__bad_interrupt>
      1e:	00 00       	nop
      20:	2e c4       	rjmp	.+2140   	; 0x87e <__bad_interrupt>
      22:	00 00       	nop
      24:	2c c4       	rjmp	.+2136   	; 0x87e <__bad_interrupt>
      26:	00 00       	nop
      28:	2a c4       	rjmp	.+2132   	; 0x87e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	28 c4       	rjmp	.+2128   	; 0x87e <__bad_interrupt>
      2e:	00 00       	nop
      30:	26 c4       	rjmp	.+2124   	; 0x87e <__bad_interrupt>
      32:	00 00       	nop
      34:	24 c4       	rjmp	.+2120   	; 0x87e <__bad_interrupt>
      36:	00 00       	nop
      38:	22 c4       	rjmp	.+2116   	; 0x87e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	20 c4       	rjmp	.+2112   	; 0x87e <__bad_interrupt>
      3e:	00 00       	nop
      40:	1e c4       	rjmp	.+2108   	; 0x87e <__bad_interrupt>
      42:	00 00       	nop
      44:	1c c4       	rjmp	.+2104   	; 0x87e <__bad_interrupt>
      46:	00 00       	nop
      48:	1a c4       	rjmp	.+2100   	; 0x87e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	18 c4       	rjmp	.+2096   	; 0x87e <__bad_interrupt>
      4e:	00 00       	nop
      50:	16 c4       	rjmp	.+2092   	; 0x87e <__bad_interrupt>
      52:	00 00       	nop
      54:	14 c4       	rjmp	.+2088   	; 0x87e <__bad_interrupt>
      56:	00 00       	nop
      58:	12 c4       	rjmp	.+2084   	; 0x87e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	10 c4       	rjmp	.+2080   	; 0x87e <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__vector_24>
      64:	0d c4       	rjmp	.+2074   	; 0x880 <__vector_25>
      66:	00 00       	nop
      68:	44 c4       	rjmp	.+2184   	; 0x8f2 <__vector_26>
      6a:	00 00       	nop
      6c:	08 c4       	rjmp	.+2064   	; 0x87e <__bad_interrupt>
      6e:	00 00       	nop
      70:	06 c4       	rjmp	.+2060   	; 0x87e <__bad_interrupt>
      72:	00 00       	nop
      74:	04 c4       	rjmp	.+2056   	; 0x87e <__bad_interrupt>
      76:	00 00       	nop
      78:	02 c4       	rjmp	.+2052   	; 0x87e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	00 c4       	rjmp	.+2048   	; 0x87e <__bad_interrupt>
      7e:	00 00       	nop
      80:	fe c3       	rjmp	.+2044   	; 0x87e <__bad_interrupt>
      82:	00 00       	nop
      84:	fc c3       	rjmp	.+2040   	; 0x87e <__bad_interrupt>
      86:	00 00       	nop
      88:	fa c3       	rjmp	.+2036   	; 0x87e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f8 c3       	rjmp	.+2032   	; 0x87e <__bad_interrupt>
      8e:	00 00       	nop
      90:	f6 c3       	rjmp	.+2028   	; 0x87e <__bad_interrupt>
      92:	00 00       	nop
      94:	f4 c3       	rjmp	.+2024   	; 0x87e <__bad_interrupt>
      96:	00 00       	nop
      98:	f2 c3       	rjmp	.+2020   	; 0x87e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f0 c3       	rjmp	.+2016   	; 0x87e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ee c3       	rjmp	.+2012   	; 0x87e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ec c3       	rjmp	.+2008   	; 0x87e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ea c3       	rjmp	.+2004   	; 0x87e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e8 c3       	rjmp	.+2000   	; 0x87e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e6 c3       	rjmp	.+1996   	; 0x87e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e4 c3       	rjmp	.+1992   	; 0x87e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e2 c3       	rjmp	.+1988   	; 0x87e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__vector_47>
      c0:	de c3       	rjmp	.+1980   	; 0x87e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	dc c3       	rjmp	.+1976   	; 0x87e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	da c3       	rjmp	.+1972   	; 0x87e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d8 c3       	rjmp	.+1968   	; 0x87e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d6 c3       	rjmp	.+1964   	; 0x87e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d4 c3       	rjmp	.+1960   	; 0x87e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a5 c4       	rjmp	.+2378   	; 0xa24 <__vector_54>
      da:	00 00       	nop
      dc:	dc c4       	rjmp	.+2488   	; 0xa96 <__vector_55>
      de:	00 00       	nop
      e0:	ce c3       	rjmp	.+1948   	; 0x87e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4d 0a       	sbc	r4, r29
      e6:	6e 0a       	sbc	r6, r30
      e8:	8e 0a       	sbc	r8, r30
      ea:	8e 0a       	sbc	r8, r30
      ec:	34 0a       	sbc	r3, r20
      ee:	55 0a       	sbc	r5, r21
      f0:	8e 0a       	sbc	r8, r30
      f2:	83 0a       	sbc	r8, r19
      f4:	8e 0a       	sbc	r8, r30
      f6:	e4 0a       	sbc	r14, r20
      f8:	20 0a       	sbc	r2, r16
      fa:	8e 0a       	sbc	r8, r30
      fc:	0c 0a       	sbc	r0, r28
      fe:	e4 0a       	sbc	r14, r20
     100:	8e 0a       	sbc	r8, r30
     102:	e4 0a       	sbc	r14, r20
     104:	8e 0a       	sbc	r8, r30
     106:	8e 0a       	sbc	r8, r30
     108:	8e 0a       	sbc	r8, r30
     10a:	8e 0a       	sbc	r8, r30
     10c:	03 0a       	sbc	r0, r19
     10e:	8e 0a       	sbc	r8, r30
     110:	8e 0a       	sbc	r8, r30
     112:	8e 0a       	sbc	r8, r30
     114:	8e 0a       	sbc	r8, r30
     116:	8e 0a       	sbc	r8, r30
     118:	e4 0a       	sbc	r14, r20
     11a:	8e 0a       	sbc	r8, r30
     11c:	8e 0a       	sbc	r8, r30
     11e:	8e 0a       	sbc	r8, r30
     120:	8e 0a       	sbc	r8, r30
     122:	8e 0a       	sbc	r8, r30
     124:	8e 0a       	sbc	r8, r30
     126:	8e 0a       	sbc	r8, r30
     128:	8e 0a       	sbc	r8, r30
     12a:	8e 0a       	sbc	r8, r30
     12c:	8e 0a       	sbc	r8, r30
     12e:	8e 0a       	sbc	r8, r30
     130:	8e 0a       	sbc	r8, r30
     132:	8e 0a       	sbc	r8, r30
     134:	8e 0a       	sbc	r8, r30
     136:	8e 0a       	sbc	r8, r30
     138:	8e 0a       	sbc	r8, r30
     13a:	8e 0a       	sbc	r8, r30
     13c:	8e 0a       	sbc	r8, r30
     13e:	8e 0a       	sbc	r8, r30
     140:	8e 0a       	sbc	r8, r30
     142:	8e 0a       	sbc	r8, r30
     144:	8e 0a       	sbc	r8, r30
     146:	8e 0a       	sbc	r8, r30
     148:	8e 0a       	sbc	r8, r30
     14a:	8e 0a       	sbc	r8, r30
     14c:	8e 0a       	sbc	r8, r30
     14e:	8e 0a       	sbc	r8, r30
     150:	8e 0a       	sbc	r8, r30
     152:	8e 0a       	sbc	r8, r30
     154:	8e 0a       	sbc	r8, r30
     156:	8e 0a       	sbc	r8, r30
     158:	8e 0a       	sbc	r8, r30
     15a:	8e 0a       	sbc	r8, r30
     15c:	8e 0a       	sbc	r8, r30
     15e:	8e 0a       	sbc	r8, r30
     160:	8e 0a       	sbc	r8, r30
     162:	8e 0a       	sbc	r8, r30
     164:	8e 0a       	sbc	r8, r30
     166:	8e 0a       	sbc	r8, r30
     168:	8e 0a       	sbc	r8, r30
     16a:	8e 0a       	sbc	r8, r30
     16c:	8e 0a       	sbc	r8, r30
     16e:	8e 0a       	sbc	r8, r30
     170:	8e 0a       	sbc	r8, r30
     172:	8e 0a       	sbc	r8, r30
     174:	8e 0a       	sbc	r8, r30
     176:	8e 0a       	sbc	r8, r30
     178:	8e 0a       	sbc	r8, r30
     17a:	8e 0a       	sbc	r8, r30
     17c:	8e 0a       	sbc	r8, r30
     17e:	8e 0a       	sbc	r8, r30
     180:	8e 0a       	sbc	r8, r30
     182:	8e 0a       	sbc	r8, r30
     184:	8e 0a       	sbc	r8, r30
     186:	8e 0a       	sbc	r8, r30
     188:	8e 0a       	sbc	r8, r30
     18a:	8e 0a       	sbc	r8, r30
     18c:	8e 0a       	sbc	r8, r30
     18e:	8e 0a       	sbc	r8, r30
     190:	8e 0a       	sbc	r8, r30
     192:	8e 0a       	sbc	r8, r30
     194:	8e 0a       	sbc	r8, r30
     196:	8e 0a       	sbc	r8, r30
     198:	8e 0a       	sbc	r8, r30
     19a:	8e 0a       	sbc	r8, r30
     19c:	8e 0a       	sbc	r8, r30
     19e:	8e 0a       	sbc	r8, r30
     1a0:	8e 0a       	sbc	r8, r30
     1a2:	8e 0a       	sbc	r8, r30
     1a4:	8e 0a       	sbc	r8, r30
     1a6:	8e 0a       	sbc	r8, r30
     1a8:	8e 0a       	sbc	r8, r30
     1aa:	8e 0a       	sbc	r8, r30
     1ac:	8e 0a       	sbc	r8, r30
     1ae:	8e 0a       	sbc	r8, r30
     1b0:	8e 0a       	sbc	r8, r30
     1b2:	8e 0a       	sbc	r8, r30
     1b4:	8e 0a       	sbc	r8, r30
     1b6:	8e 0a       	sbc	r8, r30
     1b8:	8e 0a       	sbc	r8, r30
     1ba:	8e 0a       	sbc	r8, r30
     1bc:	8e 0a       	sbc	r8, r30
     1be:	8e 0a       	sbc	r8, r30
     1c0:	8e 0a       	sbc	r8, r30
     1c2:	8e 0a       	sbc	r8, r30
     1c4:	8e 0a       	sbc	r8, r30
     1c6:	8e 0a       	sbc	r8, r30
     1c8:	8e 0a       	sbc	r8, r30
     1ca:	8e 0a       	sbc	r8, r30
     1cc:	8e 0a       	sbc	r8, r30
     1ce:	8e 0a       	sbc	r8, r30
     1d0:	8e 0a       	sbc	r8, r30
     1d2:	8e 0a       	sbc	r8, r30
     1d4:	8e 0a       	sbc	r8, r30
     1d6:	8e 0a       	sbc	r8, r30
     1d8:	8e 0a       	sbc	r8, r30
     1da:	8e 0a       	sbc	r8, r30
     1dc:	8e 0a       	sbc	r8, r30
     1de:	8e 0a       	sbc	r8, r30
     1e0:	83 0a       	sbc	r8, r19

000001e2 <__trampolines_end>:
     1e2:	4c 61       	ori	r20, 0x1C	; 28
     1e4:	72 67       	ori	r23, 0x72	; 114
     1e6:	65 73       	andi	r22, 0x35	; 53
     1e8:	74 20       	and	r7, r4
     1ea:	61 6c       	ori	r22, 0xC1	; 193
     1ec:	6c 6f       	ori	r22, 0xFC	; 252
     1ee:	63 61       	ori	r22, 0x13	; 19
     1f0:	62 6c       	ori	r22, 0xC2	; 194
     1f2:	65 20       	and	r6, r5
     1f4:	62 6c       	ori	r22, 0xC2	; 194
     1f6:	6f 63       	ori	r22, 0x3F	; 63
     1f8:	6b 3a       	cpi	r22, 0xAB	; 171
     1fa:	20 20       	and	r2, r0
     1fc:	20 25       	eor	r18, r0
     1fe:	64 0a       	sbc	r6, r20
	...

00000201 <__c.2691>:
     201:	4c 61 72 67 65 73 74 20 66 72 65 65 6c 69 73 74     Largest freelist
     211:	20 62 6c 6f 63 6b 3a 20 20 20 20 25 64 0a 00         block:    %d..

00000220 <__c.2689>:
     220:	4c 61 72 67 65 73 74 20 62 6c 6f 63 6b 20 69 6e     Largest block in
     230:	20 66 72 65 65 6c 69 73 74 3a 20 25 64 0a 00         freelist: %d..

0000023f <__c.2687>:
     23f:	42 6c 6f 63 6b 73 20 69 6e 20 66 72 65 65 6c 69     Blocks in freeli
     24f:	73 74 3a 20 20 20 20 20 20 20 20 25 64 0a 00        st:        %d..

0000025e <__c.2685>:
     25e:	46 72 65 65 6c 69 73 74 20 73 69 7a 65 3a 20 25     Freelist size: %
     26e:	64 0a 00                                            d..

00000271 <__c.2683>:
     271:	0a 46 72 65 65 6c 69 73 74 0a 00                    .Freelist..

0000027c <__c.2681>:
     27c:	43 68 61 6e 67 65 20 20 20 25 64 0a 00              Change   %d..

00000289 <__c.2679>:
     289:	50 72 65 76 69 6f 75 73 20 25 64 0a 00              Previous %d..

00000296 <__c.2677>:
     296:	43 75 72 72 65 6e 74 20 20 25 64 0a 00              Current  %d..

000002a3 <__c.2675>:
     2a3:	0a 53 70 61 63 65 20 62 65 74 77 65 65 6e 20 73     .Space between s
     2b3:	74 61 63 6b 20 61 6e 64 20 68 65 61 70 3a 0a 00     tack and heap:..

000002c3 <__c.2673>:
     2c3:	46 72 65 65 3a 20 25 64 0a 00                       Free: %d..

000002cd <__c.2671>:
     2cd:	55 73 65 64 3a 20 25 64 0a 00                       Used: %d..

000002d7 <__c.2669>:
     2d7:	0a 48 65 61 70 20 73 74 61 74 69 73 74 69 63 73     .Heap statistics
     2e7:	0a 00                                               ..

000002e9 <__c.2653>:
     2e9:	0a 55 6e 61 62 6c 65 20 74 6f 20 73 65 6c 65 63     .Unable to selec
     2f9:	74 20 63 61 72 64 2e 0a 00                          t card...

00000302 <__c.2645>:
     302:	0a 55 6e 61 62 6c 65 20 74 6f 20 73 65 6c 65 63     .Unable to selec
     312:	74 20 63 61 72 64 2e 0a 00                          t card...

0000031b <__c.2643>:
     31b:	0a 00                                               ..

0000031d <__c.2637>:
     31d:	43 61 72 64 20 55 49 44 3a 20 00                    Card UID: .

00000328 <__c.2635>:
     328:	55 49 44 20 73 61 6b 3a 20 30 78 25 30 32 58 0a     UID sak: 0x%02X.
	...

00000339 <__c.2633>:
     339:	0a 55 49 44 20 73 69 7a 65 3a 20 30 78 25 30 32     .UID size: 0x%02
     349:	58 0a 00                                            X..

0000034c <__c.2626>:
     34c:	54 6f 20 66 65 77 20 6f 72 20 74 6f 20 6d 61 6e     To few or to man
     35c:	79 20 61 72 67 75 6d 65 6e 74 73 20 66 6f 72 20     y arguments for 
     36c:	74 68 69 73 20 63 6f 6d 6d 61 6e 64 0a 55 73 65     this command.Use
     37c:	20 3c 68 65 6c 70 3e 0a 00                           <help>..

00000385 <__c.2624>:
     385:	0a 00                                               ..

00000387 <__c.2619>:
     387:	43 6f 6d 6d 61 6e 64 20 6e 6f 74 20 69 6d 70 6c     Command not impl
     397:	65 6d 65 6e 74 65 64 2e 0a 55 73 65 20 3c 68 65     emented..Use <he
     3a7:	6c 70 3e 20 74 6f 20 67 65 74 20 68 65 6c 70 2e     lp> to get help.
     3b7:	0a 00                                               ..

000003b9 <__c.2617>:
     3b9:	0a 00                                               ..

000003bb <__c.2603>:
     3bb:	25 53 0a 00                                         %S..

000003bf <__c.2586>:
     3bf:	0a 00                                               ..

000003c1 <__c.2579>:
     3c1:	61 76 72 2d 6c 69 62 63 20 76 65 72 73 69 6f 6e     avr-libc version
     3d1:	3a 20 25 53 20 61 76 72 2d 67 63 63 20 76 65 72     : %S avr-gcc ver
     3e1:	73 69 6f 6e 3a 20 34 2e 39 2e 32 0a 00              sion: 4.9.2..

000003ee <__c.2581>:
     3ee:	32 2e 30 2e 30 00                                   2.0.0.

000003f4 <__c.2571>:
     3f4:	56 65 72 73 69 6f 6e 3a 20 25 53 20 62 75 69 6c     Version: %S buil
     404:	74 20 6f 6e 3a 20 25 53 20 25 53 0a 00              t on: %S %S..

00000411 <__c.2573>:
     411:	47 49 54 20 56 45 52 53 49 4f 4e 21 20 52 65 70     GIT VERSION! Rep
     421:	6c 61 63 65 21 00                                   lace!.

00000427 <__c.2575>:
     427:	4a 61 6e 20 31 32 20 32 30 31 37 00                 Jan 12 2017.

00000433 <__c.2577>:
     433:	30 31 3a 34 33 3a 34 36 00                          01:43:46.

0000043c <__c.2563>:
     43c:	0a 00                                               ..

0000043e <__c.2561>:
     43e:	20 3a 20 00                                          : .

00000442 <__c.2558>:
     442:	49 6d 70 6c 65 6d 65 6e 74 65 64 20 63 6f 6d 6d     Implemented comm
     452:	61 6e 64 73 3a 0a 00                                ands:..

00000459 <__c.2556>:
     459:	0a 00                                               ..

0000045b <mem_help>:
     45b:	50 72 69 6e 74 20 6d 65 6d 6f 72 79 20 75 73 61     Print memory usa
     46b:	67 65 20 61 6e 64 20 63 68 61 6e 67 65 20 63 6f     ge and change co
     47b:	6d 70 61 72 65 64 20 74 6f 20 70 72 65 76 69 6f     mpared to previo
     48b:	75 73 20 63 61 6c 6c 00                             us call.

00000493 <mem_cmd>:
     493:	6d 65 6d 00                                         mem.

00000497 <access_denied_msg>:
     497:	41 63 63 65 73 73 20 64 65 6e 69 65 64 21 00        Access denied!.

000004a6 <print_help>:
     4a6:	50 72 69 6e 74 20 73 74 6f 72 65 64 20 61 63 63     Print stored acc
     4b6:	65 73 73 20 63 61 72 64 20 6c 69 73 74 00           ess card list.

000004c4 <print_cmd>:
     4c4:	70 72 69 6e 74 00                                   print.

000004ca <remove_help>:
     4ca:	52 65 6d 6f 76 65 20 4d 69 66 61 72 65 20 63 61     Remove Mifare ca
     4da:	72 64 20 66 72 6f 6d 20 6c 69 73 74 20 55 73 61     rd from list Usa
     4ea:	67 65 3a 20 72 6d 20 3c 63 61 72 64 20 75 69 64     ge: rm <card uid
     4fa:	3e 00                                               >.

000004fc <remove_cmd>:
     4fc:	72 6d 00                                            rm.

000004ff <add_help>:
     4ff:	41 64 64 20 4d 69 63 61 72 65 20 63 61 72 64 20     Add Micare card 
     50f:	74 6f 20 6c 69 73 74 2e 20 55 73 61 67 65 3a 20     to list. Usage: 
     51f:	61 64 64 20 3c 63 61 72 64 20 68 6f 6c 64 65 72     add <card holder
     52f:	20 6e 61 6d 65 3e 00                                 name>.

00000536 <add_cmd>:
     536:	61 64 64 00                                         add.

0000053a <read_help>:
     53a:	52 65 61 64 20 4d 69 66 61 72 65 20 63 61 72 64     Read Mifare card
     54a:	20 61 6e 64 20 70 72 69 6e 74 20 43 61 72 64 20      and print Card 
     55a:	49 44 00                                            ID.

0000055d <read_cmd>:
     55d:	72 65 61 64 00                                      read.

00000562 <month_help>:
     562:	46 69 6e 64 20 6d 61 74 63 68 69 6e 67 20 6d 6f     Find matching mo
     572:	6e 74 68 20 66 72 6f 6d 20 6c 6f 6f 6b 75 70 20     nth from lookup 
     582:	6c 69 73 74 2e 20 55 73 61 67 65 3a 20 6d 6f 6e     list. Usage: mon
     592:	74 68 20 3c 73 74 72 69 6e 67 3e 00                 th <string>.

0000059e <month_cmd>:
     59e:	6d 6f 6e 74 68 00                                   month.

000005a4 <ascii_help>:
     5a4:	70 72 69 6e 74 20 41 53 43 49 49 20 74 61 62 6c     print ASCII tabl
     5b4:	65 73 00                                            es.

000005b7 <ascii_cmd>:
     5b7:	61 73 63 69 69 00                                   ascii.

000005bd <ver_help>:
     5bd:	50 72 69 6e 74 20 46 57 20 76 65 72 73 69 6f 6e     Print FW version
	...

000005ce <ver_cmd>:
     5ce:	76 65 72 73 69 6f 6e 00                             version.

000005d6 <help_help>:
     5d6:	47 65 74 20 68 65 6c 70 00                          Get help.

000005df <help_cmd>:
     5df:	68 65 6c 70 00                                      help.

000005e4 <months>:
     5e4:	0e 06 05 06 ff 05 f9 05 f5 05 f0 05                 ............

000005f0 <string_6>:
     5f0:	4a 75 6e 65 00                                      June.

000005f5 <string_5>:
     5f5:	4d 61 79 00                                         May.

000005f9 <string_4>:
     5f9:	41 70 72 69 6c 00                                   April.

000005ff <string_3>:
     5ff:	4d 61 72 63 68 00                                   March.

00000605 <string_2>:
     605:	46 65 62 72 75 61 72 79 00                          February.

0000060e <string_1>:
     60e:	4a 61 6e 75 61 72 79 00                             January.

00000616 <__c.2470>:
     616:	55 70 74 69 6d 65 3a 20 25 6c 75 20 73 0a 00        Uptime: %lu s..

00000625 <__c.2456>:
     625:	4d 61 6b 73 69 6d 20 54 3f 65 6c 6a 61 62 6f 76     Maksim T?eljabov
	...

00000636 <__c.2454>:
     636:	55 73 65 20 62 61 63 6b 73 70 61 63 65 20 74 6f     Use backspace to
     646:	20 64 65 6c 65 74 65 20 65 6e 74 72 79 20 61 6e      delete entry an
     656:	64 20 65 6e 74 65 72 20 74 6f 20 63 6f 6e 66 69     d enter to confi
     666:	72 6d 2e 0a 41 72 72 6f 77 20 6b 65 79 73 20 61     rm..Arrow keys a
     676:	6e 64 20 64 65 6c 20 64 6f 20 6e 6f 74 20 77 6f     nd del do not wo
     686:	72 6b 20 63 75 72 72 65 6e 74 6c 79 2e 0a 55 73     rk currently..Us
     696:	65 20 48 65 6c 70 20 63 6f 6d 6d 61 6e 64 20 74     e Help command t
     6a6:	6f 20 6c 65 61 72 6e 20 61 62 6f 75 74 20 63 6f     o learn about co
     6b6:	6d 6d 61 6e 64 73 00                                mmands.

000006bd <__c.2452>:
     6bd:	4d 61 6b 73 69 6d 20 54 3f 65 6c 6a 61 62 6f 76     Maksim T?eljabov
	...

000006ce <__c.2250>:
     6ce:	0a 43 61 72 64 20 6e 6f 74 20 66 6f 75 6e 64 20     .Card not found 
     6de:	69 6e 20 74 68 65 20 6c 69 73 74 2e 20 50 6c 65     in the list. Ple
     6ee:	61 73 65 20 74 72 79 20 61 67 61 69 6e 2e 0a 00     ase try again...

000006fe <__c.2245>:
     6fe:	0a 00                                               ..

00000700 <__c.2243>:
     700:	20 68 6f 6c 64 65 72 20 00                           holder .

00000709 <__c.2241>:
     709:	0a 52 65 6d 6f 76 69 6e 67 20 63 61 72 64 20 55     .Removing card U
     719:	49 44 3a 20 00                                      ID: .

0000071e <__c.2239>:
     71e:	0a 00                                               ..

00000720 <__c.2237>:
     720:	20 68 6f 6c 64 65 72 20 00                           holder .

00000729 <__c.2235>:
     729:	0a 52 65 6d 6f 76 69 6e 67 20 63 61 72 64 20 55     .Removing card U
     739:	49 44 3a 20 00                                      ID: .

0000073e <__c.2229>:
     73e:	0a 43 61 72 64 20 6c 69 73 74 20 69 73 20 65 6d     .Card list is em
     74e:	70 74 79 2e 0a 00                                   pty...

00000754 <__c.2212>:
     754:	0a 41 64 64 65 64 20 63 61 72 64 00                 .Added card.

00000760 <__c.2206>:
     760:	0a 43 61 72 64 73 20 6c 69 73 74 20 69 73 20 66     .Cards list is f
     770:	75 6c 6c 2e 20 59 6f 75 20 68 61 76 65 20 74 6f     ull. You have to
     780:	20 72 65 6d 6f 76 65 20 73 6f 6d 65 20 63 61 72      remove some car
     790:	64 73 2c 20 62 65 66 6f 72 65 20 79 6f 75 20 63     ds, before you c
     7a0:	61 6e 20 61 64 64 20 6e 65 77 20 6f 6e 65 73 2e     an add new ones.
     7b0:	0a 00                                               ..

000007b2 <__c.2202>:
     7b2:	0a 53 63 61 6e 6e 65 64 20 63 61 72 64 20 61 6c     .Scanned card al
     7c2:	72 61 64 79 20 65 78 69 73 74 73 20 69 6e 20 74     rady exists in t
     7d2:	68 65 20 6c 69 73 74 2e 20 50 6c 65 61 73 65 20     he list. Please 
     7e2:	73 63 61 6e 20 61 6e 6f 74 68 65 72 20 63 61 72     scan another car
     7f2:	64 21 0a 31 00                                      d!.1.

000007f7 <__c.2193>:
     7f7:	0a 41 63 63 65 73 73 20 63 61 72 64 73 20 69 6e     .Access cards in
     807:	20 6c 69 73 74 3a 0a 00                              list:..

0000080f <__c.2189>:
     80f:	0a 43 61 72 64 20 6c 69 73 74 20 69 73 20 65 6d     .Card list is em
     81f:	70 74 79 2e 0a 00                                   pty...

00000825 <__c.2184>:
     825:	0a 00                                               ..

00000827 <__c.2182>:
     827:	20 68 6f 6c 64 65 72 20 00                           holder .

00000830 <__c.2176>:
     830:	5d 3a 20 00                                         ]: .

00000834 <__c.2174>:
     834:	2e 20 55 49 44 5b 00 00                             . UID[..

0000083c <__ctors_end>:
     83c:	11 24       	eor	r1, r1
     83e:	1f be       	out	0x3f, r1	; 63
     840:	cf ef       	ldi	r28, 0xFF	; 255
     842:	d1 e2       	ldi	r29, 0x21	; 33
     844:	de bf       	out	0x3e, r29	; 62
     846:	cd bf       	out	0x3d, r28	; 61
     848:	00 e0       	ldi	r16, 0x00	; 0
     84a:	0c bf       	out	0x3c, r16	; 60

0000084c <__do_copy_data>:
     84c:	13 e0       	ldi	r17, 0x03	; 3
     84e:	a0 e0       	ldi	r26, 0x00	; 0
     850:	b2 e0       	ldi	r27, 0x02	; 2
     852:	e8 eb       	ldi	r30, 0xB8	; 184
     854:	f7 e3       	ldi	r31, 0x37	; 55
     856:	00 e0       	ldi	r16, 0x00	; 0
     858:	0b bf       	out	0x3b, r16	; 59
     85a:	02 c0       	rjmp	.+4      	; 0x860 <__do_copy_data+0x14>
     85c:	07 90       	elpm	r0, Z+
     85e:	0d 92       	st	X+, r0
     860:	a6 36       	cpi	r26, 0x66	; 102
     862:	b1 07       	cpc	r27, r17
     864:	d9 f7       	brne	.-10     	; 0x85c <__do_copy_data+0x10>

00000866 <__do_clear_bss>:
     866:	25 e0       	ldi	r18, 0x05	; 5
     868:	a6 e6       	ldi	r26, 0x66	; 102
     86a:	b3 e0       	ldi	r27, 0x03	; 3
     86c:	01 c0       	rjmp	.+2      	; 0x870 <.do_clear_bss_start>

0000086e <.do_clear_bss_loop>:
     86e:	1d 92       	st	X+, r1

00000870 <.do_clear_bss_start>:
     870:	af 3f       	cpi	r26, 0xFF	; 255
     872:	b2 07       	cpc	r27, r18
     874:	e1 f7       	brne	.-8      	; 0x86e <.do_clear_bss_loop>
     876:	0e 94 8f 12 	call	0x251e	; 0x251e <main>
     87a:	0c 94 da 1b 	jmp	0x37b4	; 0x37b4 <_exit>

0000087e <__bad_interrupt>:
     87e:	c0 cb       	rjmp	.-2176   	; 0x0 <__vectors>

00000880 <__vector_25>:
	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];

	return (UART3_LastRxError << 8) + data;

} /* uart3_peek */
     880:	1f 92       	push	r1
     882:	0f 92       	push	r0
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	0f 92       	push	r0
     888:	11 24       	eor	r1, r1
     88a:	0b b6       	in	r0, 0x3b	; 59
     88c:	0f 92       	push	r0
     88e:	2f 93       	push	r18
     890:	3f 93       	push	r19
     892:	4f 93       	push	r20
     894:	5f 93       	push	r21
     896:	8f 93       	push	r24
     898:	9f 93       	push	r25
     89a:	ef 93       	push	r30
     89c:	ff 93       	push	r31
     89e:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     8a2:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     8a6:	28 71       	andi	r18, 0x18	; 24
     8a8:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <UART_RxHead>
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	8f 77       	andi	r24, 0x7F	; 127
     8b2:	99 27       	eor	r25, r25
     8b4:	40 91 6c 04 	lds	r20, 0x046C	; 0x80046c <UART_RxTail>
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	48 17       	cp	r20, r24
     8bc:	59 07       	cpc	r21, r25
     8be:	39 f0       	breq	.+14     	; 0x8ce <__vector_25+0x4e>
     8c0:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <UART_RxHead>
     8c4:	fc 01       	movw	r30, r24
     8c6:	e0 59       	subi	r30, 0x90	; 144
     8c8:	fb 4f       	sbci	r31, 0xFB	; 251
     8ca:	30 83       	st	Z, r19
     8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <__vector_25+0x50>
     8ce:	22 e0       	ldi	r18, 0x02	; 2
     8d0:	20 93 6b 04 	sts	0x046B, r18	; 0x80046b <UART_LastRxError>
     8d4:	ff 91       	pop	r31
     8d6:	ef 91       	pop	r30
     8d8:	9f 91       	pop	r25
     8da:	8f 91       	pop	r24
     8dc:	5f 91       	pop	r21
     8de:	4f 91       	pop	r20
     8e0:	3f 91       	pop	r19
     8e2:	2f 91       	pop	r18
     8e4:	0f 90       	pop	r0
     8e6:	0b be       	out	0x3b, r0	; 59
     8e8:	0f 90       	pop	r0
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	0f 90       	pop	r0
     8ee:	1f 90       	pop	r1
     8f0:	18 95       	reti

000008f2 <__vector_26>:
     8f2:	1f 92       	push	r1
     8f4:	0f 92       	push	r0
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	0f 92       	push	r0
     8fa:	11 24       	eor	r1, r1
     8fc:	0b b6       	in	r0, 0x3b	; 59
     8fe:	0f 92       	push	r0
     900:	8f 93       	push	r24
     902:	9f 93       	push	r25
     904:	ef 93       	push	r30
     906:	ff 93       	push	r31
     908:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <UART_TxHead>
     90c:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <UART_TxTail>
     910:	98 17       	cp	r25, r24
     912:	79 f0       	breq	.+30     	; 0x932 <__vector_26+0x40>
     914:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <UART_TxTail>
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	01 96       	adiw	r24, 0x01	; 1
     91c:	8f 77       	andi	r24, 0x7F	; 127
     91e:	99 27       	eor	r25, r25
     920:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <UART_TxTail>
     924:	fc 01       	movw	r30, r24
     926:	e0 51       	subi	r30, 0x10	; 16
     928:	fb 4f       	sbci	r31, 0xFB	; 251
     92a:	80 81       	ld	r24, Z
     92c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     930:	05 c0       	rjmp	.+10     	; 0x93c <__vector_26+0x4a>
     932:	e1 ec       	ldi	r30, 0xC1	; 193
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	80 81       	ld	r24, Z
     938:	8f 7d       	andi	r24, 0xDF	; 223
     93a:	80 83       	st	Z, r24
     93c:	ff 91       	pop	r31
     93e:	ef 91       	pop	r30
     940:	9f 91       	pop	r25
     942:	8f 91       	pop	r24
     944:	0f 90       	pop	r0
     946:	0b be       	out	0x3b, r0	; 59
     948:	0f 90       	pop	r0
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	0f 90       	pop	r0
     94e:	1f 90       	pop	r1
     950:	18 95       	reti

00000952 <uart0_init>:
     952:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <UART_TxHead>
     956:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <UART_TxTail>
     95a:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <UART_RxHead>
     95e:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <UART_RxTail>
     962:	99 23       	and	r25, r25
     964:	24 f4       	brge	.+8      	; 0x96e <uart0_init+0x1c>
     966:	22 e0       	ldi	r18, 0x02	; 2
     968:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     96c:	9f 77       	andi	r25, 0x7F	; 127
     96e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     972:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     976:	88 e9       	ldi	r24, 0x98	; 152
     978:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     97c:	86 e0       	ldi	r24, 0x06	; 6
     97e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     982:	08 95       	ret

00000984 <uart0_getc>:
     984:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <UART_RxHead>
     988:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <UART_RxTail>
     98c:	98 17       	cp	r25, r24
     98e:	a1 f0       	breq	.+40     	; 0x9b8 <uart0_getc+0x34>
     990:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <UART_RxTail>
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	8f 77       	andi	r24, 0x7F	; 127
     99a:	99 27       	eor	r25, r25
     99c:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <UART_RxTail>
     9a0:	fc 01       	movw	r30, r24
     9a2:	e0 59       	subi	r30, 0x90	; 144
     9a4:	fb 4f       	sbci	r31, 0xFB	; 251
     9a6:	20 81       	ld	r18, Z
     9a8:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <UART_LastRxError>
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	98 2f       	mov	r25, r24
     9b0:	88 27       	eor	r24, r24
     9b2:	82 0f       	add	r24, r18
     9b4:	91 1d       	adc	r25, r1
     9b6:	08 95       	ret
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	08 95       	ret

000009be <uart0_peek>:
     9be:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <UART_RxHead>
     9c2:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <UART_RxTail>
     9c6:	98 17       	cp	r25, r24
     9c8:	89 f0       	breq	.+34     	; 0x9ec <uart0_peek+0x2e>
     9ca:	e0 91 6c 04 	lds	r30, 0x046C	; 0x80046c <UART_RxTail>
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	31 96       	adiw	r30, 0x01	; 1
     9d2:	ef 77       	andi	r30, 0x7F	; 127
     9d4:	ff 27       	eor	r31, r31
     9d6:	e0 59       	subi	r30, 0x90	; 144
     9d8:	fb 4f       	sbci	r31, 0xFB	; 251
     9da:	20 81       	ld	r18, Z
     9dc:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <UART_LastRxError>
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	98 2f       	mov	r25, r24
     9e4:	88 27       	eor	r24, r24
     9e6:	82 0f       	add	r24, r18
     9e8:	91 1d       	adc	r25, r1
     9ea:	08 95       	ret
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	08 95       	ret

000009f2 <uart0_putc>:
     9f2:	40 91 6f 04 	lds	r20, 0x046F	; 0x80046f <UART_TxHead>
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	4f 5f       	subi	r20, 0xFF	; 255
     9fa:	5f 4f       	sbci	r21, 0xFF	; 255
     9fc:	4f 77       	andi	r20, 0x7F	; 127
     9fe:	55 27       	eor	r21, r21
     a00:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <UART_TxTail>
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	24 17       	cp	r18, r20
     a08:	35 07       	cpc	r19, r21
     a0a:	d1 f3       	breq	.-12     	; 0xa00 <uart0_putc+0xe>
     a0c:	fa 01       	movw	r30, r20
     a0e:	e0 51       	subi	r30, 0x10	; 16
     a10:	fb 4f       	sbci	r31, 0xFB	; 251
     a12:	80 83       	st	Z, r24
     a14:	40 93 6f 04 	sts	0x046F, r20	; 0x80046f <UART_TxHead>
     a18:	e1 ec       	ldi	r30, 0xC1	; 193
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	80 81       	ld	r24, Z
     a1e:	80 62       	ori	r24, 0x20	; 32
     a20:	80 83       	st	Z, r24
     a22:	08 95       	ret

00000a24 <__vector_54>:
     a24:	1f 92       	push	r1
     a26:	0f 92       	push	r0
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	0f 92       	push	r0
     a2c:	11 24       	eor	r1, r1
     a2e:	0b b6       	in	r0, 0x3b	; 59
     a30:	0f 92       	push	r0
     a32:	2f 93       	push	r18
     a34:	3f 93       	push	r19
     a36:	4f 93       	push	r20
     a38:	5f 93       	push	r21
     a3a:	8f 93       	push	r24
     a3c:	9f 93       	push	r25
     a3e:	ef 93       	push	r30
     a40:	ff 93       	push	r31
     a42:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
     a46:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     a4a:	28 71       	andi	r18, 0x18	; 24
     a4c:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <UART3_RxHead>
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	8f 77       	andi	r24, 0x7F	; 127
     a56:	99 27       	eor	r25, r25
     a58:	40 91 67 03 	lds	r20, 0x0367	; 0x800367 <UART3_RxTail>
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	48 17       	cp	r20, r24
     a60:	59 07       	cpc	r21, r25
     a62:	39 f0       	breq	.+14     	; 0xa72 <__vector_54+0x4e>
     a64:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <UART3_RxHead>
     a68:	fc 01       	movw	r30, r24
     a6a:	e5 59       	subi	r30, 0x95	; 149
     a6c:	fc 4f       	sbci	r31, 0xFC	; 252
     a6e:	30 83       	st	Z, r19
     a70:	01 c0       	rjmp	.+2      	; 0xa74 <__vector_54+0x50>
     a72:	22 e0       	ldi	r18, 0x02	; 2
     a74:	20 93 66 03 	sts	0x0366, r18	; 0x800366 <__data_end>
     a78:	ff 91       	pop	r31
     a7a:	ef 91       	pop	r30
     a7c:	9f 91       	pop	r25
     a7e:	8f 91       	pop	r24
     a80:	5f 91       	pop	r21
     a82:	4f 91       	pop	r20
     a84:	3f 91       	pop	r19
     a86:	2f 91       	pop	r18
     a88:	0f 90       	pop	r0
     a8a:	0b be       	out	0x3b, r0	; 59
     a8c:	0f 90       	pop	r0
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	0f 90       	pop	r0
     a92:	1f 90       	pop	r1
     a94:	18 95       	reti

00000a96 <__vector_55>:
     a96:	1f 92       	push	r1
     a98:	0f 92       	push	r0
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	0f 92       	push	r0
     a9e:	11 24       	eor	r1, r1
     aa0:	0b b6       	in	r0, 0x3b	; 59
     aa2:	0f 92       	push	r0
     aa4:	8f 93       	push	r24
     aa6:	9f 93       	push	r25
     aa8:	ef 93       	push	r30
     aaa:	ff 93       	push	r31
     aac:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <UART3_TxHead>
     ab0:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <UART3_TxTail>
     ab4:	98 17       	cp	r25, r24
     ab6:	79 f0       	breq	.+30     	; 0xad6 <__vector_55+0x40>
     ab8:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <UART3_TxTail>
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	8f 77       	andi	r24, 0x7F	; 127
     ac2:	99 27       	eor	r25, r25
     ac4:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <UART3_TxTail>
     ac8:	fc 01       	movw	r30, r24
     aca:	e5 51       	subi	r30, 0x15	; 21
     acc:	fc 4f       	sbci	r31, 0xFC	; 252
     ace:	80 81       	ld	r24, Z
     ad0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     ad4:	05 c0       	rjmp	.+10     	; 0xae0 <__vector_55+0x4a>
     ad6:	e1 e3       	ldi	r30, 0x31	; 49
     ad8:	f1 e0       	ldi	r31, 0x01	; 1
     ada:	80 81       	ld	r24, Z
     adc:	8f 7d       	andi	r24, 0xDF	; 223
     ade:	80 83       	st	Z, r24
     ae0:	ff 91       	pop	r31
     ae2:	ef 91       	pop	r30
     ae4:	9f 91       	pop	r25
     ae6:	8f 91       	pop	r24
     ae8:	0f 90       	pop	r0
     aea:	0b be       	out	0x3b, r0	; 59
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	0f 90       	pop	r0
     af2:	1f 90       	pop	r1
     af4:	18 95       	reti

00000af6 <uart3_init>:
     af6:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <UART3_TxHead>
     afa:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <UART3_TxTail>
     afe:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <UART3_RxHead>
     b02:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <UART3_RxTail>
     b06:	99 23       	and	r25, r25
     b08:	24 f4       	brge	.+8      	; 0xb12 <uart3_init+0x1c>
     b0a:	22 e0       	ldi	r18, 0x02	; 2
     b0c:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
     b16:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
     b1a:	88 e9       	ldi	r24, 0x98	; 152
     b1c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
     b20:	86 e0       	ldi	r24, 0x06	; 6
     b22:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
     b26:	08 95       	ret

00000b28 <uart3_putc>:
void uart3_putc(uint8_t data)
{
	uint16_t tmphead;


	tmphead  = (UART3_TxHead + 1) & UART_TX3_BUFFER_MASK;
     b28:	40 91 6a 03 	lds	r20, 0x036A	; 0x80036a <UART3_TxHead>
     b2c:	50 e0       	ldi	r21, 0x00	; 0
     b2e:	4f 5f       	subi	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
     b32:	4f 77       	andi	r20, 0x7F	; 127
     b34:	55 27       	eor	r21, r21

	while ( tmphead == UART3_TxTail ) {
     b36:	20 91 69 03 	lds	r18, 0x0369	; 0x800369 <UART3_TxTail>
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	24 17       	cp	r18, r20
     b3e:	35 07       	cpc	r19, r21
     b40:	d1 f3       	breq	.-12     	; 0xb36 <uart3_putc+0xe>
		;/* wait for free space in buffer */
	}

	UART3_TxBuf[tmphead] = data;
     b42:	fa 01       	movw	r30, r20
     b44:	e5 51       	subi	r30, 0x15	; 21
     b46:	fc 4f       	sbci	r31, 0xFC	; 252
     b48:	80 83       	st	Z, r24
	UART3_TxHead = tmphead;
     b4a:	40 93 6a 03 	sts	0x036A, r20	; 0x80036a <UART3_TxHead>

	/* enable UDRE interrupt */
	UART3_CONTROL    |= _BV(UART3_UDRIE);
     b4e:	e1 e3       	ldi	r30, 0x31	; 49
     b50:	f1 e0       	ldi	r31, 0x01	; 1
     b52:	80 81       	ld	r24, Z
     b54:	80 62       	ori	r24, 0x20	; 32
     b56:	80 83       	st	Z, r24
     b58:	08 95       	ret

00000b5a <getMemoryUsed>:
  size_t used;
  FREELIST *fp;
 
// __brkval=0 if nothing has been allocated yet
 
  if(__brkval==0)
     b5a:	20 91 f5 05 	lds	r18, 0x05F5	; 0x8005f5 <__brkval>
     b5e:	30 91 f6 05 	lds	r19, 0x05F6	; 0x8005f6 <__brkval+0x1>
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	e9 f0       	breq	.+58     	; 0xba2 <getMemoryUsed+0x48>
    return 0;
 
// __brkval moves up from __malloc_heap_start to
// __malloc_heap_end as memory is used
 
  used=__brkval-__malloc_heap_start;
     b68:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__malloc_heap_start>
     b6c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
     b70:	28 1b       	sub	r18, r24
     b72:	39 0b       	sbc	r19, r25
// compacted with adjacent blocks. This, combined with malloc's
// intelligent picking of candidate blocks drastically reduces
// heap fragmentation. Anyway, since blocks in the free list
// are available to you at no cost we need to take them off.
 
  for(fp=__flp;fp;fp=fp->nx)
     b74:	e0 91 f7 05 	lds	r30, 0x05F7	; 0x8005f7 <__flp>
     b78:	f0 91 f8 05 	lds	r31, 0x05F8	; 0x8005f8 <__flp+0x1>
     b7c:	30 97       	sbiw	r30, 0x00	; 0
     b7e:	71 f0       	breq	.+28     	; 0xb9c <getMemoryUsed+0x42>
     b80:	4e ef       	ldi	r20, 0xFE	; 254
     b82:	5f ef       	ldi	r21, 0xFF	; 255
     b84:	80 81       	ld	r24, Z
     b86:	91 81       	ldd	r25, Z+1	; 0x01
     b88:	ba 01       	movw	r22, r20
     b8a:	68 1b       	sub	r22, r24
     b8c:	79 0b       	sbc	r23, r25
    used-=fp->sz+sizeof(size_t);
     b8e:	26 0f       	add	r18, r22
     b90:	37 1f       	adc	r19, r23
// compacted with adjacent blocks. This, combined with malloc's
// intelligent picking of candidate blocks drastically reduces
// heap fragmentation. Anyway, since blocks in the free list
// are available to you at no cost we need to take them off.
 
  for(fp=__flp;fp;fp=fp->nx)
     b92:	02 80       	ldd	r0, Z+2	; 0x02
     b94:	f3 81       	ldd	r31, Z+3	; 0x03
     b96:	e0 2d       	mov	r30, r0
     b98:	30 97       	sbiw	r30, 0x00	; 0
     b9a:	a1 f7       	brne	.-24     	; 0xb84 <getMemoryUsed+0x2a>
    used-=fp->sz+sizeof(size_t);
 
  return used;
     b9c:	82 2f       	mov	r24, r18
     b9e:	93 2f       	mov	r25, r19
     ba0:	08 95       	ret
  FREELIST *fp;
 
// __brkval=0 if nothing has been allocated yet
 
  if(__brkval==0)
    return 0;
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
 
  for(fp=__flp;fp;fp=fp->nx)
    used-=fp->sz+sizeof(size_t);
 
  return used;
}
     ba6:	08 95       	ret

00000ba8 <getFreeMemory>:
/**
 * Get the total free bytes
 */
 
size_t getFreeMemory()
{
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
  return (size_t)AVR_STACK_POINTER_REG-
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__malloc_margin>
     bb4:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__malloc_margin+0x1>
     bb8:	c8 1b       	sub	r28, r24
     bba:	d9 0b       	sbc	r29, r25
         (size_t)__malloc_margin-
     bbc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__malloc_heap_start>
     bc0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
     bc4:	c8 1b       	sub	r28, r24
     bc6:	d9 0b       	sbc	r29, r25
         (size_t)__malloc_heap_start-
         getMemoryUsed();
     bc8:	c8 df       	rcall	.-112    	; 0xb5a <getMemoryUsed>
}
     bca:	9e 01       	movw	r18, r28
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	c9 01       	movw	r24, r18
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <getLargestBlockInFreeList>:
size_t getLargestBlockInFreeList()
{
  FREELIST *fp;
  size_t maxsize=0;
 
  for(fp=__flp;fp;fp=fp->nx)
     bd8:	e0 91 f7 05 	lds	r30, 0x05F7	; 0x8005f7 <__flp>
     bdc:	f0 91 f8 05 	lds	r31, 0x05F8	; 0x8005f8 <__flp+0x1>
     be0:	30 97       	sbiw	r30, 0x00	; 0
     be2:	71 f0       	breq	.+28     	; 0xc00 <getLargestBlockInFreeList+0x28>
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
    if(fp->sz>maxsize)
     be8:	20 81       	ld	r18, Z
     bea:	31 81       	ldd	r19, Z+1	; 0x01
     bec:	82 17       	cp	r24, r18
     bee:	93 07       	cpc	r25, r19
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <getLargestBlockInFreeList+0x1c>
     bf2:	c9 01       	movw	r24, r18
size_t getLargestBlockInFreeList()
{
  FREELIST *fp;
  size_t maxsize=0;
 
  for(fp=__flp;fp;fp=fp->nx)
     bf4:	02 80       	ldd	r0, Z+2	; 0x02
     bf6:	f3 81       	ldd	r31, Z+3	; 0x03
     bf8:	e0 2d       	mov	r30, r0
     bfa:	30 97       	sbiw	r30, 0x00	; 0
     bfc:	a9 f7       	brne	.-22     	; 0xbe8 <getLargestBlockInFreeList+0x10>
     bfe:	08 95       	ret
 */
 
size_t getLargestBlockInFreeList()
{
  FREELIST *fp;
  size_t maxsize=0;
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	90 e0       	ldi	r25, 0x00	; 0
  for(fp=__flp;fp;fp=fp->nx)
    if(fp->sz>maxsize)
      maxsize=fp->sz;
 
  return maxsize;
}
     c04:	08 95       	ret

00000c06 <getNumberOfBlocksInFreeList>:
int getNumberOfBlocksInFreeList()
{
  FREELIST *fp;
  int i;
 
  for(i=0,fp=__flp;fp;fp=fp->nx,i++);
     c06:	e0 91 f7 05 	lds	r30, 0x05F7	; 0x8005f7 <__flp>
     c0a:	f0 91 f8 05 	lds	r31, 0x05F8	; 0x8005f8 <__flp+0x1>
     c0e:	30 97       	sbiw	r30, 0x00	; 0
     c10:	49 f0       	breq	.+18     	; 0xc24 <getNumberOfBlocksInFreeList+0x1e>
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	02 80       	ldd	r0, Z+2	; 0x02
     c18:	f3 81       	ldd	r31, Z+3	; 0x03
     c1a:	e0 2d       	mov	r30, r0
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	30 97       	sbiw	r30, 0x00	; 0
     c20:	d1 f7       	brne	.-12     	; 0xc16 <getNumberOfBlocksInFreeList+0x10>
     c22:	08 95       	ret
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
  return i;
}
     c28:	08 95       	ret

00000c2a <getFreeListSize>:
size_t getFreeListSize()
{
  FREELIST *fp;
  size_t size;
 
  for(size=0,fp=__flp;fp;fp=fp->nx,size+=fp->sz+sizeof(size_t));
     c2a:	e0 91 f7 05 	lds	r30, 0x05F7	; 0x8005f7 <__flp>
     c2e:	f0 91 f8 05 	lds	r31, 0x05F8	; 0x8005f8 <__flp+0x1>
     c32:	30 97       	sbiw	r30, 0x00	; 0
     c34:	71 f0       	breq	.+28     	; 0xc52 <getFreeListSize+0x28>
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 80       	ldd	r0, Z+2	; 0x02
     c3c:	f3 81       	ldd	r31, Z+3	; 0x03
     c3e:	e0 2d       	mov	r30, r0
     c40:	20 81       	ld	r18, Z
     c42:	31 81       	ldd	r19, Z+1	; 0x01
     c44:	2e 5f       	subi	r18, 0xFE	; 254
     c46:	3f 4f       	sbci	r19, 0xFF	; 255
     c48:	82 0f       	add	r24, r18
     c4a:	93 1f       	adc	r25, r19
     c4c:	30 97       	sbiw	r30, 0x00	; 0
     c4e:	a9 f7       	brne	.-22     	; 0xc3a <getFreeListSize+0x10>
     c50:	08 95       	ret
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
  return size;
}
     c56:	08 95       	ret

00000c58 <getLargestNonFreeListBlock>:
{
  char *cp,*brkval;
 
// this code is an adapted fragment from malloc() itself
 
  brkval=__brkval == 0 ? __malloc_heap_start : __brkval;
     c58:	20 91 f5 05 	lds	r18, 0x05F5	; 0x8005f5 <__brkval>
     c5c:	30 91 f6 05 	lds	r19, 0x05F6	; 0x8005f6 <__brkval+0x1>
     c60:	21 15       	cp	r18, r1
     c62:	31 05       	cpc	r19, r1
     c64:	21 f4       	brne	.+8      	; 0xc6e <getLargestNonFreeListBlock+0x16>
     c66:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
     c6a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 
  if((cp=__malloc_heap_end)==NULL)
     c6e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     c72:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	41 f4       	brne	.+16     	; 0xc8a <getLargestNonFreeListBlock+0x32>
    cp=(char *)AVR_STACK_POINTER_REG-__malloc_margin;
     c7a:	8d b7       	in	r24, 0x3d	; 61
     c7c:	9e b7       	in	r25, 0x3e	; 62
     c7e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
     c82:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
     c86:	84 1b       	sub	r24, r20
     c88:	95 0b       	sbc	r25, r21
  if(cp<=brkval)
     c8a:	28 17       	cp	r18, r24
     c8c:	39 07       	cpc	r19, r25
     c8e:	18 f4       	brcc	.+6      	; 0xc96 <getLargestNonFreeListBlock+0x3e>
    return 0;
 
  return cp-brkval;
     c90:	82 1b       	sub	r24, r18
     c92:	93 0b       	sbc	r25, r19
     c94:	08 95       	ret
  brkval=__brkval == 0 ? __malloc_heap_start : __brkval;
 
  if((cp=__malloc_heap_end)==NULL)
    cp=(char *)AVR_STACK_POINTER_REG-__malloc_margin;
  if(cp<=brkval)
    return 0;
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
 
  return cp-brkval;
     c9a:	08 95       	ret

00000c9c <getLargestAvailableMemoryBlock>:
 * Get the largest available block that can be successfully
 * allocated by malloc()
 */
 
size_t getLargestAvailableMemoryBlock()
{
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
  size_t a,b;
 
  a=getLargestBlockInFreeList();
     ca0:	9b df       	rcall	.-202    	; 0xbd8 <getLargestBlockInFreeList>
     ca2:	ec 01       	movw	r28, r24
  b=getLargestNonFreeListBlock();
     ca4:	d9 df       	rcall	.-78     	; 0xc58 <getLargestNonFreeListBlock>
 
  return a>b ? a : b;
     ca6:	8c 17       	cp	r24, r28
     ca8:	9d 07       	cpc	r25, r29
     caa:	08 f4       	brcc	.+2      	; 0xcae <getLargestAvailableMemoryBlock+0x12>
     cac:	ce 01       	movw	r24, r28
}
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <lcd_write>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_home()
{
    lcd_command(1 << LCD_HOME);
     cb4:	66 23       	and	r22, r22
     cb6:	31 f0       	breq	.+12     	; 0xcc4 <lcd_write+0x10>
     cb8:	e2 e0       	ldi	r30, 0x02	; 2
     cba:	f1 e0       	ldi	r31, 0x01	; 1
     cbc:	90 81       	ld	r25, Z
     cbe:	90 62       	ori	r25, 0x20	; 32
     cc0:	90 83       	st	Z, r25
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <lcd_write+0x1a>
     cc4:	e2 e0       	ldi	r30, 0x02	; 2
     cc6:	f1 e0       	ldi	r31, 0x01	; 1
     cc8:	90 81       	ld	r25, Z
     cca:	9f 7d       	andi	r25, 0xDF	; 223
     ccc:	90 83       	st	Z, r25
     cce:	88 23       	and	r24, r24
     cd0:	34 f4       	brge	.+12     	; 0xcde <lcd_write+0x2a>
     cd2:	e2 e0       	ldi	r30, 0x02	; 2
     cd4:	f1 e0       	ldi	r31, 0x01	; 1
     cd6:	90 81       	ld	r25, Z
     cd8:	90 61       	ori	r25, 0x10	; 16
     cda:	90 83       	st	Z, r25
     cdc:	05 c0       	rjmp	.+10     	; 0xce8 <lcd_write+0x34>
     cde:	e2 e0       	ldi	r30, 0x02	; 2
     ce0:	f1 e0       	ldi	r31, 0x01	; 1
     ce2:	90 81       	ld	r25, Z
     ce4:	9f 7e       	andi	r25, 0xEF	; 239
     ce6:	90 83       	st	Z, r25
     ce8:	86 ff       	sbrs	r24, 6
     cea:	06 c0       	rjmp	.+12     	; 0xcf8 <lcd_write+0x44>
     cec:	e2 e0       	ldi	r30, 0x02	; 2
     cee:	f1 e0       	ldi	r31, 0x01	; 1
     cf0:	90 81       	ld	r25, Z
     cf2:	98 60       	ori	r25, 0x08	; 8
     cf4:	90 83       	st	Z, r25
     cf6:	05 c0       	rjmp	.+10     	; 0xd02 <lcd_write+0x4e>
     cf8:	e2 e0       	ldi	r30, 0x02	; 2
     cfa:	f1 e0       	ldi	r31, 0x01	; 1
     cfc:	90 81       	ld	r25, Z
     cfe:	97 7f       	andi	r25, 0xF7	; 247
     d00:	90 83       	st	Z, r25
     d02:	85 ff       	sbrs	r24, 5
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <lcd_write+0x56>
     d06:	73 9a       	sbi	0x0e, 3	; 14
     d08:	01 c0       	rjmp	.+2      	; 0xd0c <lcd_write+0x58>
     d0a:	73 98       	cbi	0x0e, 3	; 14
     d0c:	84 ff       	sbrs	r24, 4
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <lcd_write+0x60>
     d10:	a5 9a       	sbi	0x14, 5	; 20
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <lcd_write+0x62>
     d14:	a5 98       	cbi	0x14, 5	; 20
     d16:	00 c0       	rjmp	.+0      	; 0xd18 <lcd_write+0x64>
     d18:	e2 e0       	ldi	r30, 0x02	; 2
     d1a:	f1 e0       	ldi	r31, 0x01	; 1
     d1c:	90 81       	ld	r25, Z
     d1e:	90 64       	ori	r25, 0x40	; 64
     d20:	90 83       	st	Z, r25
     d22:	92 e0       	ldi	r25, 0x02	; 2
     d24:	9a 95       	dec	r25
     d26:	f1 f7       	brne	.-4      	; 0xd24 <lcd_write+0x70>
     d28:	00 c0       	rjmp	.+0      	; 0xd2a <lcd_write+0x76>
     d2a:	90 81       	ld	r25, Z
     d2c:	9f 7b       	andi	r25, 0xBF	; 191
     d2e:	90 83       	st	Z, r25
     d30:	83 ff       	sbrs	r24, 3
     d32:	04 c0       	rjmp	.+8      	; 0xd3c <lcd_write+0x88>
     d34:	90 81       	ld	r25, Z
     d36:	90 61       	ori	r25, 0x10	; 16
     d38:	90 83       	st	Z, r25
     d3a:	05 c0       	rjmp	.+10     	; 0xd46 <lcd_write+0x92>
     d3c:	e2 e0       	ldi	r30, 0x02	; 2
     d3e:	f1 e0       	ldi	r31, 0x01	; 1
     d40:	90 81       	ld	r25, Z
     d42:	9f 7e       	andi	r25, 0xEF	; 239
     d44:	90 83       	st	Z, r25
     d46:	82 ff       	sbrs	r24, 2
     d48:	06 c0       	rjmp	.+12     	; 0xd56 <lcd_write+0xa2>
     d4a:	e2 e0       	ldi	r30, 0x02	; 2
     d4c:	f1 e0       	ldi	r31, 0x01	; 1
     d4e:	90 81       	ld	r25, Z
     d50:	98 60       	ori	r25, 0x08	; 8
     d52:	90 83       	st	Z, r25
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <lcd_write+0xac>
     d56:	e2 e0       	ldi	r30, 0x02	; 2
     d58:	f1 e0       	ldi	r31, 0x01	; 1
     d5a:	90 81       	ld	r25, Z
     d5c:	97 7f       	andi	r25, 0xF7	; 247
     d5e:	90 83       	st	Z, r25
     d60:	81 ff       	sbrs	r24, 1
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <lcd_write+0xb4>
     d64:	73 9a       	sbi	0x0e, 3	; 14
     d66:	01 c0       	rjmp	.+2      	; 0xd6a <lcd_write+0xb6>
     d68:	73 98       	cbi	0x0e, 3	; 14
     d6a:	80 ff       	sbrs	r24, 0
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <lcd_write+0xbe>
     d6e:	a5 9a       	sbi	0x14, 5	; 20
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <lcd_write+0xc0>
     d72:	a5 98       	cbi	0x14, 5	; 20
     d74:	00 c0       	rjmp	.+0      	; 0xd76 <lcd_write+0xc2>
     d76:	e2 e0       	ldi	r30, 0x02	; 2
     d78:	f1 e0       	ldi	r31, 0x01	; 1
     d7a:	90 81       	ld	r25, Z
     d7c:	90 64       	ori	r25, 0x40	; 64
     d7e:	90 83       	st	Z, r25
     d80:	92 e0       	ldi	r25, 0x02	; 2
     d82:	9a 95       	dec	r25
     d84:	f1 f7       	brne	.-4      	; 0xd82 <lcd_write+0xce>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <lcd_write+0xd4>
     d88:	90 81       	ld	r25, Z
     d8a:	9f 7b       	andi	r25, 0xBF	; 191
     d8c:	90 83       	st	Z, r25
     d8e:	90 81       	ld	r25, Z
     d90:	90 61       	ori	r25, 0x10	; 16
     d92:	90 83       	st	Z, r25
     d94:	90 81       	ld	r25, Z
     d96:	98 60       	ori	r25, 0x08	; 8
     d98:	90 83       	st	Z, r25
     d9a:	73 9a       	sbi	0x0e, 3	; 14
     d9c:	a5 9a       	sbi	0x14, 5	; 20
     d9e:	61 11       	cpse	r22, r1
     da0:	09 c0       	rjmp	.+18     	; 0xdb4 <lcd_write+0x100>
     da2:	84 30       	cpi	r24, 0x04	; 4
     da4:	38 f4       	brcc	.+14     	; 0xdb4 <lcd_write+0x100>
     da6:	8f e9       	ldi	r24, 0x9F	; 159
     da8:	99 e1       	ldi	r25, 0x19	; 25
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <lcd_write+0xf6>
     dae:	00 c0       	rjmp	.+0      	; 0xdb0 <lcd_write+0xfc>
     db0:	00 00       	nop
     db2:	08 95       	ret
     db4:	95 ed       	ldi	r25, 0xD5	; 213
     db6:	9a 95       	dec	r25
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <lcd_write+0x102>
     dba:	00 00       	nop
     dbc:	08 95       	ret

00000dbe <lcd_command>:
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	79 cf       	rjmp	.-270    	; 0xcb4 <lcd_write>
     dc2:	08 95       	ret

00000dc4 <lcd_goto>:
     dc4:	cf 93       	push	r28
     dc6:	c8 2f       	mov	r28, r24
     dc8:	87 36       	cpi	r24, 0x67	; 103
     dca:	50 f0       	brcs	.+20     	; 0xde0 <lcd_goto+0x1c>
     dcc:	26 e2       	ldi	r18, 0x26	; 38
     dce:	32 e0       	ldi	r19, 0x02	; 2
     dd0:	44 e0       	ldi	r20, 0x04	; 4
     dd2:	52 e0       	ldi	r21, 0x02	; 2
     dd4:	69 e3       	ldi	r22, 0x39	; 57
     dd6:	72 e0       	ldi	r23, 0x02	; 2
     dd8:	86 e5       	ldi	r24, 0x56	; 86
     dda:	92 e0       	ldi	r25, 0x02	; 2
     ddc:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__assert>
     de0:	80 e8       	ldi	r24, 0x80	; 128
     de2:	8c 0f       	add	r24, r28
     de4:	ec df       	rcall	.-40     	; 0xdbe <lcd_command>
     de6:	cf 91       	pop	r28
     de8:	08 95       	ret

00000dea <lcd_clrscr>:
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	e8 cf       	rjmp	.-48     	; 0xdbe <lcd_command>
     dee:	08 95       	ret

00000df0 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
    lcd_write(c, 1);
     df0:	61 e0       	ldi	r22, 0x01	; 1
     df2:	60 cf       	rjmp	.-320    	; 0xcb4 <lcd_write>
     df4:	08 95       	ret

00000df6 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
    register char c;

    while ((c = *s++)) {
     dfa:	ec 01       	movw	r28, r24
     dfc:	21 96       	adiw	r28, 0x01	; 1
     dfe:	fc 01       	movw	r30, r24
     e00:	80 81       	ld	r24, Z
     e02:	88 23       	and	r24, r24
     e04:	21 f0       	breq	.+8      	; 0xe0e <lcd_puts+0x18>
        lcd_putc(c);
     e06:	f4 df       	rcall	.-24     	; 0xdf0 <lcd_putc>
*************************************************************************/
void lcd_puts(const char *s)
{
    register char c;

    while ((c = *s++)) {
     e08:	89 91       	ld	r24, Y+
     e0a:	81 11       	cpse	r24, r1
     e0c:	fc cf       	rjmp	.-8      	; 0xe06 <lcd_puts+0x10>
        lcd_putc(c);
    }
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
    register char c;

    while ((c = pgm_read_byte(progmem_s++))) {
     e18:	ec 01       	movw	r28, r24
     e1a:	21 96       	adiw	r28, 0x01	; 1
     e1c:	fc 01       	movw	r30, r24
     e1e:	84 91       	lpm	r24, Z
     e20:	88 23       	and	r24, r24
     e22:	31 f0       	breq	.+12     	; 0xe30 <lcd_puts_P+0x1c>
        lcd_putc(c);
     e24:	e5 df       	rcall	.-54     	; 0xdf0 <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    register char c;

    while ((c = pgm_read_byte(progmem_s++))) {
     e26:	fe 01       	movw	r30, r28
     e28:	84 91       	lpm	r24, Z
     e2a:	21 96       	adiw	r28, 0x01	; 1
     e2c:	81 11       	cpse	r24, r1
     e2e:	fa cf       	rjmp	.-12     	; 0xe24 <lcd_puts_P+0x10>
        lcd_putc(c);
    }
}
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <lcd_init>:
        break;
#endif

    default :
#endif
        DDR(LCD_E_PORT) |= _BV(LCD_E_PIN);
     e36:	e1 e0       	ldi	r30, 0x01	; 1
     e38:	f1 e0       	ldi	r31, 0x01	; 1
     e3a:	80 81       	ld	r24, Z
     e3c:	80 64       	ori	r24, 0x40	; 64
     e3e:	80 83       	st	Z, r24
*************************************************************************/
void lcd_init()
{
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
     e40:	80 81       	ld	r24, Z
     e42:	80 62       	ori	r24, 0x20	; 32
     e44:	80 83       	st	Z, r24
#if RW_LINE_IMPLEMENTED==1
    lcd_rw_ddr_high();
#endif
    lcd_db7_ddr_high();
     e46:	80 81       	ld	r24, Z
     e48:	80 61       	ori	r24, 0x10	; 16
     e4a:	80 83       	st	Z, r24
    lcd_db6_ddr_high();
     e4c:	80 81       	ld	r24, Z
     e4e:	88 60       	ori	r24, 0x08	; 8
     e50:	80 83       	st	Z, r24
    lcd_db5_ddr_high();
     e52:	6b 9a       	sbi	0x0d, 3	; 13
    lcd_db4_ddr_high();
     e54:	9d 9a       	sbi	0x13, 5	; 19
        break;
#endif

    default :
#endif
        LCD_E_PORT &= ~_BV(LCD_E_PIN);
     e56:	e2 e0       	ldi	r30, 0x02	; 2
     e58:	f1 e0       	ldi	r31, 0x01	; 1
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7b       	andi	r24, 0xBF	; 191
     e5e:	80 83       	st	Z, r24
    lcd_db1_ddr_high();
    lcd_db0_ddr_high();
#endif
    //Set All Control Lines Low
    lcd_e_port_low();
    lcd_rs_port_low();
     e60:	80 81       	ld	r24, Z
     e62:	8f 7d       	andi	r24, 0xDF	; 223
     e64:	80 83       	st	Z, r24
#if RW_LINE_IMPLEMENTED==1
    lcd_rw_port_low();
#endif
    //Set All Data Lines High
    lcd_db7_port_high();
     e66:	80 81       	ld	r24, Z
     e68:	80 61       	ori	r24, 0x10	; 16
     e6a:	80 83       	st	Z, r24
    lcd_db6_port_high();
     e6c:	80 81       	ld	r24, Z
     e6e:	88 60       	ori	r24, 0x08	; 8
     e70:	80 83       	st	Z, r24
    lcd_db5_port_high();
     e72:	73 9a       	sbi	0x0e, 3	; 14
    lcd_db4_port_high();
     e74:	a5 9a       	sbi	0x14, 5	; 20
    lcd_db2_port_high();
    lcd_db1_port_high();
    lcd_db0_port_high();
#endif
    //Startup Delay
    Delay_ms(DELAY_RESET);
     e76:	8f e5       	ldi	r24, 0x5F	; 95
     e78:	9a ee       	ldi	r25, 0xEA	; 234
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <lcd_init+0x44>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <lcd_init+0x4a>
     e80:	00 00       	nop
    //Initialize Display
    lcd_db7_port_low();
     e82:	80 81       	ld	r24, Z
     e84:	8f 7e       	andi	r24, 0xEF	; 239
     e86:	80 83       	st	Z, r24
    lcd_db6_port_low();
     e88:	80 81       	ld	r24, Z
     e8a:	87 7f       	andi	r24, 0xF7	; 247
     e8c:	80 83       	st	Z, r24
    Delay_ns(100);
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <lcd_init+0x5a>
        break;
#endif

    default :
#endif
        LCD_E_PORT |= _BV(LCD_E_PIN);
     e90:	80 81       	ld	r24, Z
     e92:	80 64       	ori	r24, 0x40	; 64
     e94:	80 83       	st	Z, r24
    //Initialize Display
    lcd_db7_port_low();
    lcd_db6_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	9a 95       	dec	r25
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <lcd_init+0x62>
     e9c:	00 c0       	rjmp	.+0      	; 0xe9e <lcd_init+0x68>
        break;
#endif

    default :
#endif
        LCD_E_PORT &= ~_BV(LCD_E_PIN);
     e9e:	80 81       	ld	r24, Z
     ea0:	8f 7b       	andi	r24, 0xBF	; 191
     ea2:	80 83       	st	Z, r24
    lcd_db6_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();
    Delay_us(4100);
     ea4:	8f e0       	ldi	r24, 0x0F	; 15
     ea6:	90 e4       	ldi	r25, 0x40	; 64
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <lcd_init+0x72>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <lcd_init+0x78>
     eae:	00 00       	nop
        break;
#endif

    default :
#endif
        LCD_E_PORT |= _BV(LCD_E_PIN);
     eb0:	80 81       	ld	r24, Z
     eb2:	80 64       	ori	r24, 0x40	; 64
     eb4:	80 83       	st	Z, r24
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();
    Delay_us(4100);
    lcd_e_port_high();
    Delay_ns(500);
     eb6:	92 e0       	ldi	r25, 0x02	; 2
     eb8:	9a 95       	dec	r25
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <lcd_init+0x82>
     ebc:	00 c0       	rjmp	.+0      	; 0xebe <lcd_init+0x88>
        break;
#endif

    default :
#endif
        LCD_E_PORT &= ~_BV(LCD_E_PIN);
     ebe:	80 81       	ld	r24, Z
     ec0:	8f 7b       	andi	r24, 0xBF	; 191
     ec2:	80 83       	st	Z, r24
    lcd_e_port_low();
    Delay_us(4100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();
    Delay_us(100);
     ec4:	8f e8       	ldi	r24, 0x8F	; 143
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <lcd_init+0x92>
     ecc:	00 c0       	rjmp	.+0      	; 0xece <lcd_init+0x98>
     ece:	00 00       	nop
        break;
#endif

    default :
#endif
        LCD_E_PORT |= _BV(LCD_E_PIN);
     ed0:	80 81       	ld	r24, Z
     ed2:	80 64       	ori	r24, 0x40	; 64
     ed4:	80 83       	st	Z, r24
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();
    Delay_us(100);
    lcd_e_port_high();
    Delay_ns(500);
     ed6:	92 e0       	ldi	r25, 0x02	; 2
     ed8:	9a 95       	dec	r25
     eda:	f1 f7       	brne	.-4      	; 0xed8 <lcd_init+0xa2>
     edc:	00 c0       	rjmp	.+0      	; 0xede <lcd_init+0xa8>
        break;
#endif

    default :
#endif
        LCD_E_PORT &= ~_BV(LCD_E_PIN);
     ede:	80 81       	ld	r24, Z
     ee0:	8f 7b       	andi	r24, 0xBF	; 191
     ee2:	80 83       	st	Z, r24
    lcd_e_port_low();
    Delay_us(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();
    Delay_us(40);
     ee4:	85 ed       	ldi	r24, 0xD5	; 213
     ee6:	8a 95       	dec	r24
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <lcd_init+0xb0>
     eea:	00 00       	nop
    //Init differs between 4-bit and 8-bit from here
#if (LCD_BITS==4)
    lcd_db4_port_low();
     eec:	a5 98       	cbi	0x14, 5	; 20
    Delay_ns(100);
     eee:	00 c0       	rjmp	.+0      	; 0xef0 <lcd_init+0xba>
        break;
#endif

    default :
#endif
        LCD_E_PORT |= _BV(LCD_E_PIN);
     ef0:	80 81       	ld	r24, Z
     ef2:	80 64       	ori	r24, 0x40	; 64
     ef4:	80 83       	st	Z, r24
    //Init differs between 4-bit and 8-bit from here
#if (LCD_BITS==4)
    lcd_db4_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
     ef6:	92 e0       	ldi	r25, 0x02	; 2
     ef8:	9a 95       	dec	r25
     efa:	f1 f7       	brne	.-4      	; 0xef8 <lcd_init+0xc2>
     efc:	00 c0       	rjmp	.+0      	; 0xefe <lcd_init+0xc8>
        break;
#endif

    default :
#endif
        LCD_E_PORT &= ~_BV(LCD_E_PIN);
     efe:	80 81       	ld	r24, Z
     f00:	8f 7b       	andi	r24, 0xBF	; 191
     f02:	80 83       	st	Z, r24
    lcd_db4_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();
    Delay_us(40);
     f04:	85 ed       	ldi	r24, 0xD5	; 213
     f06:	8a 95       	dec	r24
     f08:	f1 f7       	brne	.-4      	; 0xf06 <lcd_init+0xd0>
     f0a:	00 00       	nop
    lcd_db4_port_low();
     f0c:	a5 98       	cbi	0x14, 5	; 20
    Delay_ns(100);
     f0e:	00 c0       	rjmp	.+0      	; 0xf10 <lcd_init+0xda>
        break;
#endif

    default :
#endif
        LCD_E_PORT |= _BV(LCD_E_PIN);
     f10:	80 81       	ld	r24, Z
     f12:	80 64       	ori	r24, 0x40	; 64
     f14:	80 83       	st	Z, r24
    lcd_e_port_low();
    Delay_us(40);
    lcd_db4_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	9a 95       	dec	r25
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <lcd_init+0xe2>
     f1c:	00 c0       	rjmp	.+0      	; 0xf1e <lcd_init+0xe8>
        break;
#endif

    default :
#endif
        LCD_E_PORT &= ~_BV(LCD_E_PIN);
     f1e:	80 81       	ld	r24, Z
     f20:	8f 7b       	andi	r24, 0xBF	; 191
     f22:	80 83       	st	Z, r24
    lcd_db4_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();
    Delay_ns(500);
     f24:	82 e0       	ldi	r24, 0x02	; 2
     f26:	8a 95       	dec	r24
     f28:	f1 f7       	brne	.-4      	; 0xf26 <lcd_init+0xf0>
     f2a:	00 c0       	rjmp	.+0      	; 0xf2c <lcd_init+0xf6>
#if (LCD_DISPLAYS==1)

    if (LCD_DISPLAY_LINES > 1) {
        lcd_db7_port_high();
     f2c:	80 81       	ld	r24, Z
     f2e:	80 61       	ori	r24, 0x10	; 16
     f30:	80 83       	st	Z, r24
    if (c > 1) {
        lcd_db7_port_high();
    }

#endif
    Delay_ns(100);
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <lcd_init+0xfe>
        break;
#endif

    default :
#endif
        LCD_E_PORT |= _BV(LCD_E_PIN);
     f34:	80 81       	ld	r24, Z
     f36:	80 64       	ori	r24, 0x40	; 64
     f38:	80 83       	st	Z, r24
    }

#endif
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
     f3a:	92 e0       	ldi	r25, 0x02	; 2
     f3c:	9a 95       	dec	r25
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <lcd_init+0x106>
     f40:	00 c0       	rjmp	.+0      	; 0xf42 <lcd_init+0x10c>
        break;
#endif

    default :
#endif
        LCD_E_PORT &= ~_BV(LCD_E_PIN);
     f42:	80 81       	ld	r24, Z
     f44:	8f 7b       	andi	r24, 0xBF	; 191
     f46:	80 83       	st	Z, r24
#endif
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();
    Delay_us(40);
     f48:	85 ed       	ldi	r24, 0xD5	; 213
     f4a:	8a 95       	dec	r24
     f4c:	f1 f7       	brne	.-4      	; 0xf4a <lcd_init+0x114>
     f4e:	00 00       	nop
    Delay_ns(500);
    lcd_e_port_low();
    Delay_us(40);
#endif
    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
     f50:	88 e0       	ldi	r24, 0x08	; 8
     f52:	35 df       	rcall	.-406    	; 0xdbe <lcd_command>
    //Display Clear
    lcd_clrscr();
     f54:	4a df       	rcall	.-364    	; 0xdea <lcd_clrscr>
    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
     f56:	86 e0       	ldi	r24, 0x06	; 6
     f58:	32 df       	rcall	.-412    	; 0xdbe <lcd_command>
    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
     f5a:	8c e0       	ldi	r24, 0x0C	; 12
     f5c:	30 cf       	rjmp	.-416    	; 0xdbe <lcd_command>
     f5e:	08 95       	ret

00000f60 <lcd_clr>:
Clear characters at position until length
Input:    start position and lentgh
Returns:  none
*************************************************************************/
void lcd_clr(uint8_t pos, uint8_t len)
{
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
    for (int i = 0; i < len; i++) {
     f6a:	06 2f       	mov	r16, r22
     f6c:	10 e0       	ldi	r17, 0x00	; 0
     f6e:	10 16       	cp	r1, r16
     f70:	11 06       	cpc	r1, r17
     f72:	64 f4       	brge	.+24     	; 0xf8c <lcd_clr+0x2c>
     f74:	f8 2e       	mov	r15, r24
     f76:	c0 e0       	ldi	r28, 0x00	; 0
     f78:	d0 e0       	ldi	r29, 0x00	; 0
        lcd_goto(pos + i);
     f7a:	8c 2f       	mov	r24, r28
     f7c:	8f 0d       	add	r24, r15
     f7e:	22 df       	rcall	.-444    	; 0xdc4 <lcd_goto>
        lcd_putc(' ');
     f80:	80 e2       	ldi	r24, 0x20	; 32
     f82:	36 df       	rcall	.-404    	; 0xdf0 <lcd_putc>
Input:    start position and lentgh
Returns:  none
*************************************************************************/
void lcd_clr(uint8_t pos, uint8_t len)
{
    for (int i = 0; i < len; i++) {
     f84:	21 96       	adiw	r28, 0x01	; 1
     f86:	c0 17       	cp	r28, r16
     f88:	d1 07       	cpc	r29, r17
     f8a:	b9 f7       	brne	.-18     	; 0xf7a <lcd_clr+0x1a>
        lcd_goto(pos + i);
        lcd_putc(' ');
    }
}
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	08 95       	ret

00000f98 <terminal_reset_cursor>:
}

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
	pThis->get_completion = get_completion;
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	60 97       	sbiw	r28, 0x10	; 16
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	8c 01       	movw	r16, r24
     fb6:	1f 92       	push	r1
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	8f 93       	push	r24
     fbc:	1f 92       	push	r1
     fbe:	88 e6       	ldi	r24, 0x68	; 104
     fc0:	8f 93       	push	r24
     fc2:	8f e5       	ldi	r24, 0x5F	; 95
     fc4:	92 e0       	ldi	r25, 0x02	; 2
     fc6:	9f 93       	push	r25
     fc8:	8f 93       	push	r24
     fca:	1f 92       	push	r1
     fcc:	80 e1       	ldi	r24, 0x10	; 16
     fce:	8f 93       	push	r24
     fd0:	ce 01       	movw	r24, r28
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	7c 01       	movw	r14, r24
     fd6:	9f 93       	push	r25
     fd8:	8f 93       	push	r24
     fda:	0e 94 0d 19 	call	0x321a	; 0x321a <snprintf>
     fde:	f8 01       	movw	r30, r16
     fe0:	e1 59       	subi	r30, 0x91	; 145
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	01 90       	ld	r0, Z+
     fe6:	f0 81       	ld	r31, Z
     fe8:	e0 2d       	mov	r30, r0
     fea:	c7 01       	movw	r24, r14
     fec:	19 95       	eicall
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	60 96       	adiw	r28, 0x10	; 16
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	08 95       	ret

00001012 <terminal_move_cursor>:
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	60 97       	sbiw	r28, 0x10	; 16
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	8c 01       	movw	r16, r24
    102c:	fe 01       	movw	r30, r28
    102e:	31 96       	adiw	r30, 0x01	; 1
    1030:	80 e1       	ldi	r24, 0x10	; 16
    1032:	df 01       	movw	r26, r30
    1034:	1d 92       	st	X+, r1
    1036:	8a 95       	dec	r24
    1038:	e9 f7       	brne	.-6      	; 0x1034 <terminal_move_cursor+0x22>
    103a:	16 16       	cp	r1, r22
    103c:	17 06       	cpc	r1, r23
    103e:	9c f4       	brge	.+38     	; 0x1066 <terminal_move_cursor+0x54>
    1040:	7f 93       	push	r23
    1042:	6f 93       	push	r22
    1044:	84 e6       	ldi	r24, 0x64	; 100
    1046:	92 e0       	ldi	r25, 0x02	; 2
    1048:	9f 93       	push	r25
    104a:	8f 93       	push	r24
    104c:	1f 92       	push	r1
    104e:	80 e1       	ldi	r24, 0x10	; 16
    1050:	8f 93       	push	r24
    1052:	ff 93       	push	r31
    1054:	ef 93       	push	r30
    1056:	0e 94 0d 19 	call	0x321a	; 0x321a <snprintf>
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	19 c0       	rjmp	.+50     	; 0x1098 <terminal_move_cursor+0x86>
    1066:	77 23       	and	r23, r23
    1068:	bc f4       	brge	.+46     	; 0x1098 <terminal_move_cursor+0x86>
    106a:	71 95       	neg	r23
    106c:	61 95       	neg	r22
    106e:	71 09       	sbc	r23, r1
    1070:	7f 93       	push	r23
    1072:	6f 93       	push	r22
    1074:	8a e6       	ldi	r24, 0x6A	; 106
    1076:	92 e0       	ldi	r25, 0x02	; 2
    1078:	9f 93       	push	r25
    107a:	8f 93       	push	r24
    107c:	1f 92       	push	r1
    107e:	80 e1       	ldi	r24, 0x10	; 16
    1080:	8f 93       	push	r24
    1082:	ce 01       	movw	r24, r28
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	9f 93       	push	r25
    1088:	8f 93       	push	r24
    108a:	0e 94 0d 19 	call	0x321a	; 0x321a <snprintf>
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	f8 01       	movw	r30, r16
    109a:	e1 59       	subi	r30, 0x91	; 145
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	01 90       	ld	r0, Z+
    10a0:	f0 81       	ld	r31, Z
    10a2:	e0 2d       	mov	r30, r0
    10a4:	ce 01       	movw	r24, r28
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	19 95       	eicall
    10aa:	60 96       	adiw	r28, 0x10	; 16
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	08 95       	ret

000010c0 <terminal_print_line>:
    10c0:	5f 92       	push	r5
    10c2:	6f 92       	push	r6
    10c4:	7f 92       	push	r7
    10c6:	8f 92       	push	r8
    10c8:	9f 92       	push	r9
    10ca:	af 92       	push	r10
    10cc:	bf 92       	push	r11
    10ce:	cf 92       	push	r12
    10d0:	df 92       	push	r13
    10d2:	ef 92       	push	r14
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	1f 92       	push	r1
    10e0:	1f 92       	push	r1
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	4c 01       	movw	r8, r24
    10e8:	8b 01       	movw	r16, r22
    10ea:	3a 01       	movw	r6, r20
    10ec:	fc 01       	movw	r30, r24
    10ee:	e1 59       	subi	r30, 0x91	; 145
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	01 90       	ld	r0, Z+
    10f4:	f0 81       	ld	r31, Z
    10f6:	e0 2d       	mov	r30, r0
    10f8:	80 e7       	ldi	r24, 0x70	; 112
    10fa:	92 e0       	ldi	r25, 0x02	; 2
    10fc:	19 95       	eicall
    10fe:	19 82       	std	Y+1, r1	; 0x01
    1100:	1a 82       	std	Y+2, r1	; 0x02
    1102:	f4 01       	movw	r30, r8
    1104:	e9 59       	subi	r30, 0x99	; 153
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	80 81       	ld	r24, Z
    110a:	91 81       	ldd	r25, Z+1	; 0x01
    110c:	08 17       	cp	r16, r24
    110e:	19 07       	cpc	r17, r25
    1110:	24 f5       	brge	.+72     	; 0x115a <terminal_print_line+0x9a>
    1112:	78 01       	movw	r14, r16
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	e8 0e       	add	r14, r24
    1118:	f1 1c       	adc	r15, r1
    111a:	e8 0c       	add	r14, r8
    111c:	f9 1c       	adc	r15, r9
    111e:	68 94       	set
    1120:	55 24       	eor	r5, r5
    1122:	55 f8       	bld	r5, 5
    1124:	54 01       	movw	r10, r8
    1126:	af e6       	ldi	r26, 0x6F	; 111
    1128:	aa 0e       	add	r10, r26
    112a:	b1 1c       	adc	r11, r1
    112c:	6f 01       	movw	r12, r30
    112e:	f7 01       	movw	r30, r14
    1130:	81 91       	ld	r24, Z+
    1132:	7f 01       	movw	r14, r30
    1134:	88 23       	and	r24, r24
    1136:	11 f0       	breq	.+4      	; 0x113c <terminal_print_line+0x7c>
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	01 c0       	rjmp	.+2      	; 0x113e <terminal_print_line+0x7e>
    113c:	59 82       	std	Y+1, r5	; 0x01
    113e:	d5 01       	movw	r26, r10
    1140:	ed 91       	ld	r30, X+
    1142:	fc 91       	ld	r31, X
    1144:	ce 01       	movw	r24, r28
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	19 95       	eicall
    114a:	0f 5f       	subi	r16, 0xFF	; 255
    114c:	1f 4f       	sbci	r17, 0xFF	; 255
    114e:	f6 01       	movw	r30, r12
    1150:	80 81       	ld	r24, Z
    1152:	91 81       	ldd	r25, Z+1	; 0x01
    1154:	08 17       	cp	r16, r24
    1156:	19 07       	cpc	r17, r25
    1158:	54 f3       	brlt	.-44     	; 0x112e <terminal_print_line+0x6e>
    115a:	c4 01       	movw	r24, r8
    115c:	1d df       	rcall	.-454    	; 0xf98 <terminal_reset_cursor>
    115e:	b3 01       	movw	r22, r6
    1160:	c4 01       	movw	r24, r8
    1162:	57 df       	rcall	.-338    	; 0x1012 <terminal_move_cursor>
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	df 90       	pop	r13
    1176:	cf 90       	pop	r12
    1178:	bf 90       	pop	r11
    117a:	af 90       	pop	r10
    117c:	9f 90       	pop	r9
    117e:	8f 90       	pop	r8
    1180:	7f 90       	pop	r7
    1182:	6f 90       	pop	r6
    1184:	5f 90       	pop	r5
    1186:	08 95       	ret

00001188 <microrl_backspace>:
    1188:	ef 92       	push	r14
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	fc 01       	movw	r30, r24
    1196:	e7 59       	subi	r30, 0x97	; 151
    1198:	ff 4f       	sbci	r31, 0xFF	; 255
    119a:	20 81       	ld	r18, Z
    119c:	31 81       	ldd	r19, Z+1	; 0x01
    119e:	12 16       	cp	r1, r18
    11a0:	13 06       	cpc	r1, r19
    11a2:	94 f5       	brge	.+100    	; 0x1208 <microrl_backspace+0x80>
    11a4:	ec 01       	movw	r28, r24
    11a6:	36 96       	adiw	r30, 0x06	; 6
    11a8:	01 90       	ld	r0, Z+
    11aa:	f0 81       	ld	r31, Z
    11ac:	e0 2d       	mov	r30, r0
    11ae:	84 e7       	ldi	r24, 0x74	; 116
    11b0:	92 e0       	ldi	r25, 0x02	; 2
    11b2:	19 95       	eicall
    11b4:	7e 01       	movw	r14, r28
    11b6:	89 e6       	ldi	r24, 0x69	; 105
    11b8:	e8 0e       	add	r14, r24
    11ba:	f1 1c       	adc	r15, r1
    11bc:	f7 01       	movw	r30, r14
    11be:	80 81       	ld	r24, Z
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	8e 01       	movw	r16, r28
    11c4:	09 59       	subi	r16, 0x99	; 153
    11c6:	1f 4f       	sbci	r17, 0xFF	; 255
    11c8:	f8 01       	movw	r30, r16
    11ca:	40 81       	ld	r20, Z
    11cc:	51 81       	ldd	r21, Z+1	; 0x01
    11ce:	48 1b       	sub	r20, r24
    11d0:	59 0b       	sbc	r21, r25
    11d2:	4f 5f       	subi	r20, 0xFF	; 255
    11d4:	5f 4f       	sbci	r21, 0xFF	; 255
    11d6:	bc 01       	movw	r22, r24
    11d8:	6e 5f       	subi	r22, 0xFE	; 254
    11da:	7f 4f       	sbci	r23, 0xFF	; 255
    11dc:	6c 0f       	add	r22, r28
    11de:	7d 1f       	adc	r23, r29
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	8c 0f       	add	r24, r28
    11e4:	9d 1f       	adc	r25, r29
    11e6:	0e 94 44 18 	call	0x3088	; 0x3088 <memmove>
    11ea:	f7 01       	movw	r30, r14
    11ec:	80 81       	ld	r24, Z
    11ee:	91 81       	ldd	r25, Z+1	; 0x01
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	91 83       	std	Z+1, r25	; 0x01
    11f4:	80 83       	st	Z, r24
    11f6:	f8 01       	movw	r30, r16
    11f8:	80 81       	ld	r24, Z
    11fa:	91 81       	ldd	r25, Z+1	; 0x01
    11fc:	c8 0f       	add	r28, r24
    11fe:	d9 1f       	adc	r29, r25
    1200:	1a 82       	std	Y+2, r1	; 0x02
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	91 83       	std	Z+1, r25	; 0x01
    1206:	80 83       	st	Z, r24
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	ff 90       	pop	r15
    1212:	ef 90       	pop	r14
    1214:	08 95       	ret

00001216 <microrl_init>:
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	dc 01       	movw	r26, r24
    121c:	fc 01       	movw	r30, r24
    121e:	32 96       	adiw	r30, 0x02	; 2
    1220:	85 e6       	ldi	r24, 0x65	; 101
    1222:	ef 01       	movw	r28, r30
    1224:	19 92       	st	Y+, r1
    1226:	8a 95       	dec	r24
    1228:	e9 f7       	brne	.-6      	; 0x1224 <microrl_init+0xe>
    122a:	eb 59       	subi	r30, 0x9B	; 155
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	11 82       	std	Z+1, r1	; 0x01
    1230:	10 82       	st	Z, r1
    1232:	32 96       	adiw	r30, 0x02	; 2
    1234:	11 82       	std	Z+1, r1	; 0x01
    1236:	10 82       	st	Z, r1
    1238:	32 96       	adiw	r30, 0x02	; 2
    123a:	11 82       	std	Z+1, r1	; 0x01
    123c:	10 82       	st	Z, r1
    123e:	32 96       	adiw	r30, 0x02	; 2
    1240:	11 82       	std	Z+1, r1	; 0x01
    1242:	10 82       	st	Z, r1
    1244:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <prompt_default>
    1248:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <prompt_default+0x1>
    124c:	11 96       	adiw	r26, 0x01	; 1
    124e:	9c 93       	st	X, r25
    1250:	8e 93       	st	-X, r24
    1252:	a1 59       	subi	r26, 0x91	; 145
    1254:	bf 4f       	sbci	r27, 0xFF	; 255
    1256:	6d 93       	st	X+, r22
    1258:	7c 93       	st	X, r23
    125a:	fb 01       	movw	r30, r22
    125c:	19 95       	eicall
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <microrl_set_execute_callback>:
}

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
	pThis->execute = execute;
    1264:	fc 01       	movw	r30, r24
    1266:	e5 59       	subi	r30, 0x95	; 149
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	71 83       	std	Z+1, r23	; 0x01
    126c:	60 83       	st	Z, r22
    126e:	08 95       	ret

00001270 <new_line_handler>:
	} 
}
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
    1270:	ef 92       	push	r14
    1272:	ff 92       	push	r15
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	60 97       	sbiw	r28, 0x10	; 16
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	8c 01       	movw	r16, r24
}

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
	pThis->print (ENDL);
    128e:	fc 01       	movw	r30, r24
    1290:	e1 59       	subi	r30, 0x91	; 145
    1292:	ff 4f       	sbci	r31, 0xFF	; 255
    1294:	01 90       	ld	r0, Z+
    1296:	f0 81       	ld	r31, Z
    1298:	e0 2d       	mov	r30, r0
    129a:	8c e7       	ldi	r24, 0x7C	; 124
    129c:	92 e0       	ldi	r25, 0x02	; 2
    129e:	19 95       	eicall
	terminal_newline (pThis);
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
    12a0:	f8 01       	movw	r30, r16
    12a2:	e9 59       	subi	r30, 0x99	; 153
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	40 81       	ld	r20, Z
    12a8:	51 81       	ldd	r21, Z+1	; 0x01
//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
	int i = 0;
	int ind = 0;
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0

//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
	int i = 0;
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	06 c0       	rjmp	.+12     	; 0x12c0 <new_line_handler+0x50>
	int ind = 0;
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
			ind++;
    12b4:	2f 5f       	subi	r18, 0xFF	; 255
    12b6:	3f 4f       	sbci	r19, 0xFF	; 255
    12b8:	03 c0       	rjmp	.+6      	; 0x12c0 <new_line_handler+0x50>
		}
		if (!(ind < limit)) return i;
		tkn_arr[i++] = pThis->cmdline + ind;
    12ba:	bd 01       	movw	r22, r26
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <new_line_handler+0x50>
    12be:	bd 01       	movw	r22, r26
{
	int i = 0;
	int ind = 0;
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
    12c0:	f8 01       	movw	r30, r16
    12c2:	e2 0f       	add	r30, r18
    12c4:	f3 1f       	adc	r31, r19
    12c6:	82 81       	ldd	r24, Z+2	; 0x02
    12c8:	81 11       	cpse	r24, r1
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <new_line_handler+0x66>
    12cc:	24 17       	cp	r18, r20
    12ce:	35 07       	cpc	r19, r21
    12d0:	8c f3       	brlt	.-30     	; 0x12b4 <new_line_handler+0x44>
    12d2:	db 01       	movw	r26, r22
    12d4:	30 c0       	rjmp	.+96     	; 0x1336 <new_line_handler+0xc6>
			ind++;
		}
		if (!(ind < limit)) return i;
    12d6:	24 17       	cp	r18, r20
    12d8:	35 07       	cpc	r19, r21
    12da:	64 f5       	brge	.+88     	; 0x1334 <new_line_handler+0xc4>
		tkn_arr[i++] = pThis->cmdline + ind;
    12dc:	db 01       	movw	r26, r22
    12de:	11 96       	adiw	r26, 0x01	; 1
    12e0:	66 0f       	add	r22, r22
    12e2:	77 1f       	adc	r23, r23
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	8c 0f       	add	r24, r28
    12ea:	9d 1f       	adc	r25, r29
    12ec:	68 0f       	add	r22, r24
    12ee:	79 1f       	adc	r23, r25
    12f0:	c9 01       	movw	r24, r18
    12f2:	02 96       	adiw	r24, 0x02	; 2
    12f4:	80 0f       	add	r24, r16
    12f6:	91 1f       	adc	r25, r17
    12f8:	fb 01       	movw	r30, r22
    12fa:	91 83       	std	Z+1, r25	; 0x01
    12fc:	80 83       	st	Z, r24
		if (i >= _COMMAND_TOKEN_NMB) {
    12fe:	a8 30       	cpi	r26, 0x08	; 8
    1300:	b1 05       	cpc	r27, r1
    1302:	ec f4       	brge	.+58     	; 0x133e <new_line_handler+0xce>
			return -1;
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
    1304:	c8 01       	movw	r24, r16
    1306:	82 0f       	add	r24, r18
    1308:	93 1f       	adc	r25, r19
    130a:	fc 01       	movw	r30, r24
    130c:	82 81       	ldd	r24, Z+2	; 0x02
    130e:	88 23       	and	r24, r24
    1310:	a1 f2       	breq	.-88     	; 0x12ba <new_line_handler+0x4a>
    1312:	f9 01       	movw	r30, r18
    1314:	33 96       	adiw	r30, 0x03	; 3
    1316:	e0 0f       	add	r30, r16
    1318:	f1 1f       	adc	r31, r17
			ind++;
    131a:	2f 5f       	subi	r18, 0xFF	; 255
    131c:	3f 4f       	sbci	r19, 0xFF	; 255
		tkn_arr[i++] = pThis->cmdline + ind;
		if (i >= _COMMAND_TOKEN_NMB) {
			return -1;
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
    131e:	91 91       	ld	r25, Z+
    1320:	99 23       	and	r25, r25
    1322:	21 f0       	breq	.+8      	; 0x132c <new_line_handler+0xbc>
    1324:	24 17       	cp	r18, r20
    1326:	35 07       	cpc	r19, r21
    1328:	c4 f3       	brlt	.-16     	; 0x131a <new_line_handler+0xaa>
    132a:	05 c0       	rjmp	.+10     	; 0x1336 <new_line_handler+0xc6>
			ind++;
		}
		if (!(ind < limit)) return i;
    132c:	24 17       	cp	r18, r20
    132e:	35 07       	cpc	r19, r21
    1330:	34 f2       	brlt	.-116    	; 0x12be <new_line_handler+0x4e>
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <new_line_handler+0xc6>
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
			ind++;
		}
		if (!(ind < limit)) return i;
    1334:	db 01       	movw	r26, r22
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
	if (status == -1){
    1336:	af 3f       	cpi	r26, 0xFF	; 255
    1338:	ff ef       	ldi	r31, 0xFF	; 255
    133a:	bf 07       	cpc	r27, r31
    133c:	89 f4       	brne	.+34     	; 0x1360 <new_line_handler+0xf0>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
    133e:	78 01       	movw	r14, r16
    1340:	8f e6       	ldi	r24, 0x6F	; 111
    1342:	e8 0e       	add	r14, r24
    1344:	f1 1c       	adc	r15, r1
    1346:	d7 01       	movw	r26, r14
    1348:	ed 91       	ld	r30, X+
    134a:	fc 91       	ld	r31, X
    134c:	8e e7       	ldi	r24, 0x7E	; 126
    134e:	92 e0       	ldi	r25, 0x02	; 2
    1350:	19 95       	eicall
		pThis->print (ENDL);
    1352:	d7 01       	movw	r26, r14
    1354:	ed 91       	ld	r30, X+
    1356:	fc 91       	ld	r31, X
    1358:	8c e7       	ldi	r24, 0x7C	; 124
    135a:	92 e0       	ldi	r25, 0x02	; 2
    135c:	19 95       	eicall
    135e:	10 c0       	rjmp	.+32     	; 0x1380 <new_line_handler+0x110>
	}
	if ((status > 0) && (pThis->execute != NULL))
    1360:	1a 16       	cp	r1, r26
    1362:	1b 06       	cpc	r1, r27
    1364:	6c f4       	brge	.+26     	; 0x1380 <new_line_handler+0x110>
    1366:	f8 01       	movw	r30, r16
    1368:	e5 59       	subi	r30, 0x95	; 149
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	01 90       	ld	r0, Z+
    136e:	f0 81       	ld	r31, Z
    1370:	e0 2d       	mov	r30, r0
    1372:	30 97       	sbiw	r30, 0x00	; 0
    1374:	29 f0       	breq	.+10     	; 0x1380 <new_line_handler+0x110>
		pThis->execute (status, tkn_arr);
    1376:	be 01       	movw	r22, r28
    1378:	6f 5f       	subi	r22, 0xFF	; 255
    137a:	7f 4f       	sbci	r23, 0xFF	; 255
    137c:	cd 01       	movw	r24, r26
    137e:	19 95       	eicall


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
	pThis->print (pThis->prompt_str);
    1380:	f8 01       	movw	r30, r16
    1382:	e1 59       	subi	r30, 0x91	; 145
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	01 90       	ld	r0, Z+
    1388:	f0 81       	ld	r31, Z
    138a:	e0 2d       	mov	r30, r0
    138c:	d8 01       	movw	r26, r16
    138e:	8d 91       	ld	r24, X+
    1390:	9c 91       	ld	r25, X
    1392:	19 95       	eicall
		pThis->print (ENDL);
	}
	if ((status > 0) && (pThis->execute != NULL))
		pThis->execute (status, tkn_arr);
	print_prompt (pThis);
	pThis->cmdlen = 0;
    1394:	f8 01       	movw	r30, r16
    1396:	e9 59       	subi	r30, 0x99	; 153
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	11 82       	std	Z+1, r1	; 0x01
    139c:	10 82       	st	Z, r1
	pThis->cursor = 0;
    139e:	32 96       	adiw	r30, 0x02	; 2
    13a0:	11 82       	std	Z+1, r1	; 0x01
    13a2:	10 82       	st	Z, r1
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
    13a4:	e7 56       	subi	r30, 0x67	; 103
    13a6:	f1 09       	sbc	r31, r1
    13a8:	85 e6       	ldi	r24, 0x65	; 101
    13aa:	df 01       	movw	r26, r30
    13ac:	1d 92       	st	X+, r1
    13ae:	8a 95       	dec	r24
    13b0:	e9 f7       	brne	.-6      	; 0x13ac <new_line_handler+0x13c>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
#endif
}
    13b2:	60 96       	adiw	r28, 0x10	; 16
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	1f 91       	pop	r17
    13c4:	0f 91       	pop	r16
    13c6:	ff 90       	pop	r15
    13c8:	ef 90       	pop	r14
    13ca:	08 95       	ret

000013cc <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
    13cc:	cf 92       	push	r12
    13ce:	df 92       	push	r13
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	1f 92       	push	r1
    13de:	1f 92       	push	r1
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	8c 01       	movw	r16, r24
    13e6:	7a 83       	std	Y+2, r23	; 0x02
    13e8:	69 83       	std	Y+1, r22	; 0x01
	if (pThis->escape) {
		if (escape_process(pThis, ch))
			pThis->escape = 0;
	} else {
#endif
		switch (ch) {
    13ea:	26 2f       	mov	r18, r22
    13ec:	37 2f       	mov	r19, r23
    13ee:	f9 01       	movw	r30, r18
    13f0:	31 97       	sbiw	r30, 0x01	; 1
    13f2:	ef 37       	cpi	r30, 0x7F	; 127
    13f4:	f1 05       	cpc	r31, r1
    13f6:	08 f0       	brcs	.+2      	; 0x13fa <microrl_insert_char+0x2e>
    13f8:	91 c0       	rjmp	.+290    	; 0x151c <microrl_insert_char+0x150>
    13fa:	88 27       	eor	r24, r24
    13fc:	ee 58       	subi	r30, 0x8E	; 142
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	8f 4f       	sbci	r24, 0xFF	; 255
    1402:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__tablejump2__>
				pThis->escape = 1;
#endif
			break;
			//-----------------------------------------------------
			case KEY_NAK: // ^U
					while (pThis->cursor > 0) {
    1406:	f8 01       	movw	r30, r16
    1408:	e7 59       	subi	r30, 0x97	; 151
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	40 81       	ld	r20, Z
    140e:	51 81       	ldd	r21, Z+1	; 0x01
    1410:	14 16       	cp	r1, r20
    1412:	15 06       	cpc	r1, r21
    1414:	24 f0       	brlt	.+8      	; 0x141e <microrl_insert_char+0x52>
    1416:	0f c0       	rjmp	.+30     	; 0x1436 <microrl_insert_char+0x6a>
#endif
		switch (ch) {
			//-----------------------------------------------------
#ifdef _ENDL_CR
			case KEY_CR:
				new_line_handler(pThis);
    1418:	c8 01       	movw	r24, r16
    141a:	2a df       	rcall	.-428    	; 0x1270 <new_line_handler>
			break;
    141c:	d5 c0       	rjmp	.+426    	; 0x15c8 <microrl_insert_char+0x1fc>
				pThis->escape = 1;
#endif
			break;
			//-----------------------------------------------------
			case KEY_NAK: // ^U
					while (pThis->cursor > 0) {
    141e:	78 01       	movw	r14, r16
    1420:	89 e6       	ldi	r24, 0x69	; 105
    1422:	e8 0e       	add	r14, r24
    1424:	f1 1c       	adc	r15, r1
					microrl_backspace (pThis);
    1426:	c8 01       	movw	r24, r16
    1428:	af de       	rcall	.-674    	; 0x1188 <microrl_backspace>
				pThis->escape = 1;
#endif
			break;
			//-----------------------------------------------------
			case KEY_NAK: // ^U
					while (pThis->cursor > 0) {
    142a:	d7 01       	movw	r26, r14
    142c:	4d 91       	ld	r20, X+
    142e:	5c 91       	ld	r21, X
    1430:	14 16       	cp	r1, r20
    1432:	15 06       	cpc	r1, r21
    1434:	c4 f3       	brlt	.-16     	; 0x1426 <microrl_insert_char+0x5a>
					microrl_backspace (pThis);
				}
				terminal_print_line (pThis, 0, pThis->cursor);
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	c8 01       	movw	r24, r16
    143c:	41 de       	rcall	.-894    	; 0x10c0 <terminal_print_line>
			break;
    143e:	c4 c0       	rjmp	.+392    	; 0x15c8 <microrl_insert_char+0x1fc>
			//-----------------------------------------------------
			case KEY_VT:  // ^K
				pThis->print ("\033[K");
    1440:	f8 01       	movw	r30, r16
    1442:	e1 59       	subi	r30, 0x91	; 145
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	01 90       	ld	r0, Z+
    1448:	f0 81       	ld	r31, Z
    144a:	e0 2d       	mov	r30, r0
    144c:	80 e7       	ldi	r24, 0x70	; 112
    144e:	92 e0       	ldi	r25, 0x02	; 2
    1450:	19 95       	eicall
				pThis->cmdlen = pThis->cursor;
    1452:	f8 01       	movw	r30, r16
    1454:	e9 59       	subi	r30, 0x99	; 153
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	d8 01       	movw	r26, r16
    145a:	a7 59       	subi	r26, 0x97	; 151
    145c:	bf 4f       	sbci	r27, 0xFF	; 255
    145e:	8d 91       	ld	r24, X+
    1460:	9c 91       	ld	r25, X
    1462:	91 83       	std	Z+1, r25	; 0x01
    1464:	80 83       	st	Z, r24
			break;
    1466:	b0 c0       	rjmp	.+352    	; 0x15c8 <microrl_insert_char+0x1fc>
			//-----------------------------------------------------
			case KEY_ENQ: // ^E
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
    1468:	68 01       	movw	r12, r16
    146a:	b7 e6       	ldi	r27, 0x67	; 103
    146c:	cb 0e       	add	r12, r27
    146e:	d1 1c       	adc	r13, r1
    1470:	78 01       	movw	r14, r16
    1472:	e9 e6       	ldi	r30, 0x69	; 105
    1474:	ee 0e       	add	r14, r30
    1476:	f1 1c       	adc	r15, r1
    1478:	d6 01       	movw	r26, r12
    147a:	6d 91       	ld	r22, X+
    147c:	7c 91       	ld	r23, X
    147e:	f7 01       	movw	r30, r14
    1480:	80 81       	ld	r24, Z
    1482:	91 81       	ldd	r25, Z+1	; 0x01
    1484:	68 1b       	sub	r22, r24
    1486:	79 0b       	sbc	r23, r25
    1488:	c8 01       	movw	r24, r16
    148a:	c3 dd       	rcall	.-1146   	; 0x1012 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
    148c:	d6 01       	movw	r26, r12
    148e:	8d 91       	ld	r24, X+
    1490:	9c 91       	ld	r25, X
    1492:	f7 01       	movw	r30, r14
    1494:	91 83       	std	Z+1, r25	; 0x01
    1496:	80 83       	st	Z, r24
			break;
    1498:	97 c0       	rjmp	.+302    	; 0x15c8 <microrl_insert_char+0x1fc>
			//-----------------------------------------------------
			case KEY_SOH: // ^A
				terminal_reset_cursor (pThis);
    149a:	c8 01       	movw	r24, r16
    149c:	7d dd       	rcall	.-1286   	; 0xf98 <terminal_reset_cursor>
				pThis->cursor = 0;
    149e:	f8 01       	movw	r30, r16
    14a0:	e7 59       	subi	r30, 0x97	; 151
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	11 82       	std	Z+1, r1	; 0x01
    14a6:	10 82       	st	Z, r1
			break;
    14a8:	8f c0       	rjmp	.+286    	; 0x15c8 <microrl_insert_char+0x1fc>
			//-----------------------------------------------------
			case KEY_ACK: // ^F
			if (pThis->cursor < pThis->cmdlen) {
    14aa:	f8 01       	movw	r30, r16
    14ac:	e7 59       	subi	r30, 0x97	; 151
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	20 81       	ld	r18, Z
    14b2:	31 81       	ldd	r19, Z+1	; 0x01
    14b4:	32 97       	sbiw	r30, 0x02	; 2
    14b6:	80 81       	ld	r24, Z
    14b8:	91 81       	ldd	r25, Z+1	; 0x01
    14ba:	28 17       	cp	r18, r24
    14bc:	39 07       	cpc	r19, r25
    14be:	0c f0       	brlt	.+2      	; 0x14c2 <microrl_insert_char+0xf6>
    14c0:	83 c0       	rjmp	.+262    	; 0x15c8 <microrl_insert_char+0x1fc>
				terminal_move_cursor (pThis, 1);
    14c2:	61 e0       	ldi	r22, 0x01	; 1
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	c8 01       	movw	r24, r16
    14c8:	a4 dd       	rcall	.-1208   	; 0x1012 <terminal_move_cursor>
				pThis->cursor++;
    14ca:	f8 01       	movw	r30, r16
    14cc:	e7 59       	subi	r30, 0x97	; 151
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	80 81       	ld	r24, Z
    14d2:	91 81       	ldd	r25, Z+1	; 0x01
    14d4:	01 96       	adiw	r24, 0x01	; 1
    14d6:	91 83       	std	Z+1, r25	; 0x01
    14d8:	80 83       	st	Z, r24
    14da:	76 c0       	rjmp	.+236    	; 0x15c8 <microrl_insert_char+0x1fc>
			}
			break;
			//-----------------------------------------------------
			case KEY_STX: // ^B
			if (pThis->cursor) {
    14dc:	f8 01       	movw	r30, r16
    14de:	e7 59       	subi	r30, 0x97	; 151
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	89 2b       	or	r24, r25
    14e8:	09 f4       	brne	.+2      	; 0x14ec <microrl_insert_char+0x120>
    14ea:	6e c0       	rjmp	.+220    	; 0x15c8 <microrl_insert_char+0x1fc>
				terminal_move_cursor (pThis, -1);
    14ec:	6f ef       	ldi	r22, 0xFF	; 255
    14ee:	7f ef       	ldi	r23, 0xFF	; 255
    14f0:	c8 01       	movw	r24, r16
    14f2:	8f dd       	rcall	.-1250   	; 0x1012 <terminal_move_cursor>
				pThis->cursor--;
    14f4:	f8 01       	movw	r30, r16
    14f6:	e7 59       	subi	r30, 0x97	; 151
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	80 81       	ld	r24, Z
    14fc:	91 81       	ldd	r25, Z+1	; 0x01
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	91 83       	std	Z+1, r25	; 0x01
    1502:	80 83       	st	Z, r24
    1504:	61 c0       	rjmp	.+194    	; 0x15c8 <microrl_insert_char+0x1fc>
#endif
			break;
			//-----------------------------------------------------
			case KEY_DEL: // Backspace
			case KEY_BS: // ^U
				microrl_backspace (pThis);
    1506:	c8 01       	movw	r24, r16
    1508:	3f de       	rcall	.-898    	; 0x1188 <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
    150a:	f8 01       	movw	r30, r16
    150c:	e7 59       	subi	r30, 0x97	; 151
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	60 81       	ld	r22, Z
    1512:	71 81       	ldd	r23, Z+1	; 0x01
    1514:	ab 01       	movw	r20, r22
    1516:	c8 01       	movw	r24, r16
    1518:	d3 dd       	rcall	.-1114   	; 0x10c0 <terminal_print_line>
			break;
    151a:	56 c0       	rjmp	.+172    	; 0x15c8 <microrl_insert_char+0x1fc>
				pThis->sigint();
			break;
#endif
			//-----------------------------------------------------
			default:
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
    151c:	20 32       	cpi	r18, 0x20	; 32
    151e:	31 05       	cpc	r19, r1
    1520:	41 f4       	brne	.+16     	; 0x1532 <microrl_insert_char+0x166>
    1522:	f8 01       	movw	r30, r16
    1524:	e9 59       	subi	r30, 0x99	; 153
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	80 81       	ld	r24, Z
    152a:	91 81       	ldd	r25, Z+1	; 0x01
    152c:	89 2b       	or	r24, r25
    152e:	29 f4       	brne	.+10     	; 0x153a <microrl_insert_char+0x16e>
    1530:	4b c0       	rjmp	.+150    	; 0x15c8 <microrl_insert_char+0x1fc>
    1532:	20 32       	cpi	r18, 0x20	; 32
    1534:	31 05       	cpc	r19, r1
    1536:	0c f4       	brge	.+2      	; 0x153a <microrl_insert_char+0x16e>
    1538:	47 c0       	rjmp	.+142    	; 0x15c8 <microrl_insert_char+0x1fc>
//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
    153a:	f8 01       	movw	r30, r16
    153c:	e9 59       	subi	r30, 0x99	; 153
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	40 81       	ld	r20, Z
    1542:	51 81       	ldd	r21, Z+1	; 0x01
    1544:	ca 01       	movw	r24, r20
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	85 36       	cpi	r24, 0x65	; 101
    154a:	91 05       	cpc	r25, r1
    154c:	ec f5       	brge	.+122    	; 0x15c8 <microrl_insert_char+0x1fc>
		memmove (pThis->cmdline + pThis->cursor + len,
						 pThis->cmdline + pThis->cursor,
						 pThis->cmdlen - pThis->cursor);
    154e:	78 01       	movw	r14, r16
    1550:	f9 e6       	ldi	r31, 0x69	; 105
    1552:	ef 0e       	add	r14, r31
    1554:	f1 1c       	adc	r15, r1
    1556:	d7 01       	movw	r26, r14
    1558:	8d 91       	ld	r24, X+
    155a:	9c 91       	ld	r25, X
    155c:	48 1b       	sub	r20, r24
    155e:	59 0b       	sbc	r21, r25
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
		memmove (pThis->cmdline + pThis->cursor + len,
    1560:	bc 01       	movw	r22, r24
    1562:	6e 5f       	subi	r22, 0xFE	; 254
    1564:	7f 4f       	sbci	r23, 0xFF	; 255
    1566:	60 0f       	add	r22, r16
    1568:	71 1f       	adc	r23, r17
    156a:	03 96       	adiw	r24, 0x03	; 3
    156c:	80 0f       	add	r24, r16
    156e:	91 1f       	adc	r25, r17
    1570:	0e 94 44 18 	call	0x3088	; 0x3088 <memmove>
						 pThis->cmdline + pThis->cursor,
						 pThis->cmdlen - pThis->cursor);
		for (i = 0; i < len; i++) {
			pThis->cmdline [pThis->cursor + i] = text [i];
    1574:	d7 01       	movw	r26, r14
    1576:	ed 91       	ld	r30, X+
    1578:	fc 91       	ld	r31, X
    157a:	89 81       	ldd	r24, Y+1	; 0x01
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
    157c:	80 32       	cpi	r24, 0x20	; 32
    157e:	21 f0       	breq	.+8      	; 0x1588 <microrl_insert_char+0x1bc>
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
		memmove (pThis->cmdline + pThis->cursor + len,
						 pThis->cmdline + pThis->cursor,
						 pThis->cmdlen - pThis->cursor);
		for (i = 0; i < len; i++) {
			pThis->cmdline [pThis->cursor + i] = text [i];
    1580:	e0 0f       	add	r30, r16
    1582:	f1 1f       	adc	r31, r17
    1584:	82 83       	std	Z+2, r24	; 0x02
    1586:	03 c0       	rjmp	.+6      	; 0x158e <microrl_insert_char+0x1c2>
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
				pThis->cmdline [pThis->cursor + i] = 0;
    1588:	e0 0f       	add	r30, r16
    158a:	f1 1f       	adc	r31, r17
    158c:	12 82       	std	Z+2, r1	; 0x02
			}
		}
		pThis->cursor += len;
    158e:	f8 01       	movw	r30, r16
    1590:	e7 59       	subi	r30, 0x97	; 151
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	80 81       	ld	r24, Z
    1596:	91 81       	ldd	r25, Z+1	; 0x01
    1598:	01 96       	adiw	r24, 0x01	; 1
    159a:	91 83       	std	Z+1, r25	; 0x01
    159c:	80 83       	st	Z, r24
		pThis->cmdlen += len;
    159e:	d8 01       	movw	r26, r16
    15a0:	a9 59       	subi	r26, 0x99	; 153
    15a2:	bf 4f       	sbci	r27, 0xFF	; 255
    15a4:	8d 91       	ld	r24, X+
    15a6:	9c 91       	ld	r25, X
    15a8:	11 97       	sbiw	r26, 0x01	; 1
    15aa:	01 96       	adiw	r24, 0x01	; 1
    15ac:	8d 93       	st	X+, r24
    15ae:	9c 93       	st	X, r25
		pThis->cmdline [pThis->cmdlen] = '\0';
    15b0:	d8 01       	movw	r26, r16
    15b2:	a8 0f       	add	r26, r24
    15b4:	b9 1f       	adc	r27, r25
    15b6:	12 96       	adiw	r26, 0x02	; 2
    15b8:	1c 92       	st	X, r1
			//-----------------------------------------------------
			default:
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
				break;
			if (microrl_insert_text (pThis, (char*)&ch, 1))
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
    15ba:	40 81       	ld	r20, Z
    15bc:	51 81       	ldd	r21, Z+1	; 0x01
    15be:	ba 01       	movw	r22, r20
    15c0:	61 50       	subi	r22, 0x01	; 1
    15c2:	71 09       	sbc	r23, r1
    15c4:	c8 01       	movw	r24, r16
    15c6:	7c dd       	rcall	.-1288   	; 0x10c0 <terminal_print_line>
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	df 90       	pop	r13
    15da:	cf 90       	pop	r12
    15dc:	08 95       	ret

000015de <MFRC522_init>:
	if (result != STATUS_OK) {
		return result;
	}

	return STATUS_OK;
}
    15de:	20 9a       	sbi	0x04, 0	; 4
    15e0:	28 9a       	sbi	0x05, 0	; 5
    15e2:	ea e0       	ldi	r30, 0x0A	; 10
    15e4:	f1 e0       	ldi	r31, 0x01	; 1
    15e6:	80 81       	ld	r24, Z
    15e8:	81 60       	ori	r24, 0x01	; 1
    15ea:	80 83       	st	Z, r24
    15ec:	eb e0       	ldi	r30, 0x0B	; 11
    15ee:	f1 e0       	ldi	r31, 0x01	; 1
    15f0:	80 81       	ld	r24, Z
    15f2:	81 60       	ori	r24, 0x01	; 1
    15f4:	80 83       	st	Z, r24
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	56 c4       	rjmp	.+2220   	; 0x1ea6 <spi_init>
    15fa:	08 95       	ret

000015fc <PCD_WriteRegister>:
    15fc:	cf 93       	push	r28
    15fe:	c6 2f       	mov	r28, r22
    1600:	28 98       	cbi	0x05, 0	; 5
    1602:	8e 77       	andi	r24, 0x7E	; 126
    1604:	5f d4       	rcall	.+2238   	; 0x1ec4 <spi_rw>
    1606:	8c 2f       	mov	r24, r28
    1608:	5d d4       	rcall	.+2234   	; 0x1ec4 <spi_rw>
    160a:	28 9a       	sbi	0x05, 0	; 5
    160c:	cf 91       	pop	r28
    160e:	08 95       	ret

00001610 <PCD_WriteRegister2>:
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	16 2f       	mov	r17, r22
    161e:	7a 01       	movw	r14, r20
    1620:	28 98       	cbi	0x05, 0	; 5
    1622:	8e 77       	andi	r24, 0x7E	; 126
    1624:	4f d4       	rcall	.+2206   	; 0x1ec4 <spi_rw>
    1626:	11 23       	and	r17, r17
    1628:	69 f0       	breq	.+26     	; 0x1644 <PCD_WriteRegister2+0x34>
    162a:	e7 01       	movw	r28, r14
    162c:	11 50       	subi	r17, 0x01	; 1
    162e:	01 2f       	mov	r16, r17
    1630:	10 e0       	ldi	r17, 0x00	; 0
    1632:	0f 5f       	subi	r16, 0xFF	; 255
    1634:	1f 4f       	sbci	r17, 0xFF	; 255
    1636:	0e 0d       	add	r16, r14
    1638:	1f 1d       	adc	r17, r15
    163a:	89 91       	ld	r24, Y+
    163c:	43 d4       	rcall	.+2182   	; 0x1ec4 <spi_rw>
    163e:	c0 17       	cp	r28, r16
    1640:	d1 07       	cpc	r29, r17
    1642:	d9 f7       	brne	.-10     	; 0x163a <PCD_WriteRegister2+0x2a>
    1644:	28 9a       	sbi	0x05, 0	; 5
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	1f 91       	pop	r17
    164c:	0f 91       	pop	r16
    164e:	ff 90       	pop	r15
    1650:	ef 90       	pop	r14
    1652:	08 95       	ret

00001654 <PCD_ReadRegister>:
    1654:	28 98       	cbi	0x05, 0	; 5
    1656:	8e 77       	andi	r24, 0x7E	; 126
    1658:	80 68       	ori	r24, 0x80	; 128
    165a:	34 d4       	rcall	.+2152   	; 0x1ec4 <spi_rw>
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	32 d4       	rcall	.+2148   	; 0x1ec4 <spi_rw>
    1660:	28 9a       	sbi	0x05, 0	; 5
    1662:	08 95       	ret

00001664 <PCD_ReadRegister2>:
    1664:	7f 92       	push	r7
    1666:	8f 92       	push	r8
    1668:	9f 92       	push	r9
    166a:	af 92       	push	r10
    166c:	bf 92       	push	r11
    166e:	cf 92       	push	r12
    1670:	df 92       	push	r13
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	66 23       	and	r22, r22
    1680:	09 f4       	brne	.+2      	; 0x1684 <PCD_ReadRegister2+0x20>
    1682:	44 c0       	rjmp	.+136    	; 0x170c <PCD_ReadRegister2+0xa8>
    1684:	e2 2e       	mov	r14, r18
    1686:	6a 01       	movw	r12, r20
    1688:	8e 77       	andi	r24, 0x7E	; 126
    168a:	80 68       	ori	r24, 0x80	; 128
    168c:	f8 2e       	mov	r15, r24
    168e:	28 98       	cbi	0x05, 0	; 5
    1690:	df ef       	ldi	r29, 0xFF	; 255
    1692:	d6 0f       	add	r29, r22
    1694:	17 d4       	rcall	.+2094   	; 0x1ec4 <spi_rw>
    1696:	dd 23       	and	r29, r29
    1698:	89 f1       	breq	.+98     	; 0x16fc <PCD_ReadRegister2+0x98>
    169a:	86 01       	movw	r16, r12
    169c:	c0 e0       	ldi	r28, 0x00	; 0
    169e:	91 2c       	mov	r9, r1
    16a0:	8e 2c       	mov	r8, r14
    16a2:	aa 24       	eor	r10, r10
    16a4:	a3 94       	inc	r10
    16a6:	b1 2c       	mov	r11, r1
    16a8:	c1 11       	cpse	r28, r1
    16aa:	1f c0       	rjmp	.+62     	; 0x16ea <PCD_ReadRegister2+0x86>
    16ac:	ee 20       	and	r14, r14
    16ae:	e9 f0       	breq	.+58     	; 0x16ea <PCD_ReadRegister2+0x86>
    16b0:	87 e0       	ldi	r24, 0x07	; 7
    16b2:	8e 15       	cp	r24, r14
    16b4:	70 f0       	brcs	.+28     	; 0x16d2 <PCD_ReadRegister2+0x6e>
    16b6:	88 2d       	mov	r24, r8
    16b8:	79 2c       	mov	r7, r9
    16ba:	95 01       	movw	r18, r10
    16bc:	08 2e       	mov	r0, r24
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <PCD_ReadRegister2+0x60>
    16c0:	22 0f       	add	r18, r18
    16c2:	33 1f       	adc	r19, r19
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <PCD_ReadRegister2+0x5c>
    16c8:	72 2a       	or	r7, r18
    16ca:	8f 5f       	subi	r24, 0xFF	; 255
    16cc:	88 30       	cpi	r24, 0x08	; 8
    16ce:	a9 f7       	brne	.-22     	; 0x16ba <PCD_ReadRegister2+0x56>
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <PCD_ReadRegister2+0x70>
    16d2:	79 2c       	mov	r7, r9
    16d4:	8f 2d       	mov	r24, r15
    16d6:	f6 d3       	rcall	.+2028   	; 0x1ec4 <spi_rw>
    16d8:	27 2d       	mov	r18, r7
    16da:	20 95       	com	r18
    16dc:	f6 01       	movw	r30, r12
    16de:	90 81       	ld	r25, Z
    16e0:	92 23       	and	r25, r18
    16e2:	87 21       	and	r24, r7
    16e4:	89 2b       	or	r24, r25
    16e6:	80 83       	st	Z, r24
    16e8:	04 c0       	rjmp	.+8      	; 0x16f2 <PCD_ReadRegister2+0x8e>
    16ea:	8f 2d       	mov	r24, r15
    16ec:	eb d3       	rcall	.+2006   	; 0x1ec4 <spi_rw>
    16ee:	f8 01       	movw	r30, r16
    16f0:	80 83       	st	Z, r24
    16f2:	cf 5f       	subi	r28, 0xFF	; 255
    16f4:	0f 5f       	subi	r16, 0xFF	; 255
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	dc 13       	cpse	r29, r28
    16fa:	d6 cf       	rjmp	.-84     	; 0x16a8 <PCD_ReadRegister2+0x44>
    16fc:	c6 01       	movw	r24, r12
    16fe:	8d 0f       	add	r24, r29
    1700:	91 1d       	adc	r25, r1
    1702:	ec 01       	movw	r28, r24
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	de d3       	rcall	.+1980   	; 0x1ec4 <spi_rw>
    1708:	88 83       	st	Y, r24
    170a:	28 9a       	sbi	0x05, 0	; 5
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	1f 91       	pop	r17
    1712:	0f 91       	pop	r16
    1714:	ff 90       	pop	r15
    1716:	ef 90       	pop	r14
    1718:	df 90       	pop	r13
    171a:	cf 90       	pop	r12
    171c:	bf 90       	pop	r11
    171e:	af 90       	pop	r10
    1720:	9f 90       	pop	r9
    1722:	8f 90       	pop	r8
    1724:	7f 90       	pop	r7
    1726:	08 95       	ret

00001728 <PCD_SetRegisterBitMask>:
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	d8 2f       	mov	r29, r24
    172e:	c6 2f       	mov	r28, r22
    1730:	91 df       	rcall	.-222    	; 0x1654 <PCD_ReadRegister>
    1732:	68 2f       	mov	r22, r24
    1734:	6c 2b       	or	r22, r28
    1736:	8d 2f       	mov	r24, r29
    1738:	61 df       	rcall	.-318    	; 0x15fc <PCD_WriteRegister>
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	08 95       	ret

00001740 <PCD_ClearRegisterBitMask>:
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	d8 2f       	mov	r29, r24
    1746:	c6 2f       	mov	r28, r22
    1748:	85 df       	rcall	.-246    	; 0x1654 <PCD_ReadRegister>
    174a:	c0 95       	com	r28
    174c:	68 2f       	mov	r22, r24
    174e:	6c 23       	and	r22, r28
    1750:	8d 2f       	mov	r24, r29
    1752:	54 df       	rcall	.-344    	; 0x15fc <PCD_WriteRegister>
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	08 95       	ret

0000175a <PCD_CalculateCRC>:
    175a:	ef 92       	push	r14
    175c:	ff 92       	push	r15
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	7c 01       	movw	r14, r24
    1768:	c6 2f       	mov	r28, r22
    176a:	8a 01       	movw	r16, r20
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	82 e0       	ldi	r24, 0x02	; 2
    1770:	45 df       	rcall	.-374    	; 0x15fc <PCD_WriteRegister>
    1772:	64 e0       	ldi	r22, 0x04	; 4
    1774:	8a e0       	ldi	r24, 0x0A	; 10
    1776:	42 df       	rcall	.-380    	; 0x15fc <PCD_WriteRegister>
    1778:	60 e8       	ldi	r22, 0x80	; 128
    177a:	84 e1       	ldi	r24, 0x14	; 20
    177c:	d5 df       	rcall	.-86     	; 0x1728 <PCD_SetRegisterBitMask>
    177e:	a7 01       	movw	r20, r14
    1780:	6c 2f       	mov	r22, r28
    1782:	82 e1       	ldi	r24, 0x12	; 18
    1784:	45 df       	rcall	.-374    	; 0x1610 <PCD_WriteRegister2>
    1786:	63 e0       	ldi	r22, 0x03	; 3
    1788:	82 e0       	ldi	r24, 0x02	; 2
    178a:	38 df       	rcall	.-400    	; 0x15fc <PCD_WriteRegister>
    178c:	c8 e8       	ldi	r28, 0x88	; 136
    178e:	d3 e1       	ldi	r29, 0x13	; 19
    1790:	8a e0       	ldi	r24, 0x0A	; 10
    1792:	60 df       	rcall	.-320    	; 0x1654 <PCD_ReadRegister>
    1794:	82 fd       	sbrc	r24, 2
    1796:	03 c0       	rjmp	.+6      	; 0x179e <PCD_CalculateCRC+0x44>
    1798:	21 97       	sbiw	r28, 0x01	; 1
    179a:	d1 f7       	brne	.-12     	; 0x1790 <PCD_CalculateCRC+0x36>
    179c:	0d c0       	rjmp	.+26     	; 0x17b8 <PCD_CalculateCRC+0x5e>
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	82 e0       	ldi	r24, 0x02	; 2
    17a2:	2c df       	rcall	.-424    	; 0x15fc <PCD_WriteRegister>
    17a4:	84 e4       	ldi	r24, 0x44	; 68
    17a6:	56 df       	rcall	.-340    	; 0x1654 <PCD_ReadRegister>
    17a8:	f8 01       	movw	r30, r16
    17aa:	80 83       	st	Z, r24
    17ac:	82 e4       	ldi	r24, 0x42	; 66
    17ae:	52 df       	rcall	.-348    	; 0x1654 <PCD_ReadRegister>
    17b0:	f8 01       	movw	r30, r16
    17b2:	81 83       	std	Z+1, r24	; 0x01
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	01 c0       	rjmp	.+2      	; 0x17ba <PCD_CalculateCRC+0x60>
    17b8:	84 e0       	ldi	r24, 0x04	; 4
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	1f 91       	pop	r17
    17c0:	0f 91       	pop	r16
    17c2:	ff 90       	pop	r15
    17c4:	ef 90       	pop	r14
    17c6:	08 95       	ret

000017c8 <PCD_Reset>:
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	6f e0       	ldi	r22, 0x0F	; 15
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	15 df       	rcall	.-470    	; 0x15fc <PCD_WriteRegister>
    17d2:	83 ed       	ldi	r24, 0xD3	; 211
    17d4:	90 e3       	ldi	r25, 0x30	; 48
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	f1 f7       	brne	.-4      	; 0x17d6 <PCD_Reset+0xe>
    17da:	00 c0       	rjmp	.+0      	; 0x17dc <PCD_Reset+0x14>
    17dc:	00 00       	nop
    17de:	c8 e8       	ldi	r28, 0x88	; 136
    17e0:	d3 e1       	ldi	r29, 0x13	; 19
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <PCD_Reset+0x20>
    17e4:	21 97       	sbiw	r28, 0x01	; 1
    17e6:	31 f0       	breq	.+12     	; 0x17f4 <PCD_Reset+0x2c>
    17e8:	82 e0       	ldi	r24, 0x02	; 2
    17ea:	34 df       	rcall	.-408    	; 0x1654 <PCD_ReadRegister>
    17ec:	84 fd       	sbrc	r24, 4
    17ee:	fa cf       	rjmp	.-12     	; 0x17e4 <PCD_Reset+0x1c>
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <PCD_Reset+0x2e>
    17f4:	84 e0       	ldi	r24, 0x04	; 4
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	08 95       	ret

000017fc <PCD_AntennaOn>:
    17fc:	88 e2       	ldi	r24, 0x28	; 40
    17fe:	2a df       	rcall	.-428    	; 0x1654 <PCD_ReadRegister>
    1800:	98 2f       	mov	r25, r24
    1802:	93 70       	andi	r25, 0x03	; 3
    1804:	93 30       	cpi	r25, 0x03	; 3
    1806:	21 f0       	breq	.+8      	; 0x1810 <PCD_AntennaOn+0x14>
    1808:	68 2f       	mov	r22, r24
    180a:	63 60       	ori	r22, 0x03	; 3
    180c:	88 e2       	ldi	r24, 0x28	; 40
    180e:	f6 ce       	rjmp	.-532    	; 0x15fc <PCD_WriteRegister>
    1810:	08 95       	ret

00001812 <PCD_Init>:
    1812:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    1816:	80 fd       	sbrc	r24, 0
    1818:	0c c0       	rjmp	.+24     	; 0x1832 <PCD_Init+0x20>
    181a:	eb e0       	ldi	r30, 0x0B	; 11
    181c:	f1 e0       	ldi	r31, 0x01	; 1
    181e:	80 81       	ld	r24, Z
    1820:	81 60       	ori	r24, 0x01	; 1
    1822:	80 83       	st	Z, r24
    1824:	83 ed       	ldi	r24, 0xD3	; 211
    1826:	90 e3       	ldi	r25, 0x30	; 48
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <PCD_Init+0x16>
    182c:	00 c0       	rjmp	.+0      	; 0x182e <PCD_Init+0x1c>
    182e:	00 00       	nop
    1830:	03 c0       	rjmp	.+6      	; 0x1838 <PCD_Init+0x26>
    1832:	ca df       	rcall	.-108    	; 0x17c8 <PCD_Reset>
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	a9 f4       	brne	.+42     	; 0x1862 <PCD_Init+0x50>
    1838:	60 e8       	ldi	r22, 0x80	; 128
    183a:	84 e5       	ldi	r24, 0x54	; 84
    183c:	df de       	rcall	.-578    	; 0x15fc <PCD_WriteRegister>
    183e:	69 ea       	ldi	r22, 0xA9	; 169
    1840:	86 e5       	ldi	r24, 0x56	; 86
    1842:	dc de       	rcall	.-584    	; 0x15fc <PCD_WriteRegister>
    1844:	63 e0       	ldi	r22, 0x03	; 3
    1846:	88 e5       	ldi	r24, 0x58	; 88
    1848:	d9 de       	rcall	.-590    	; 0x15fc <PCD_WriteRegister>
    184a:	68 ee       	ldi	r22, 0xE8	; 232
    184c:	8a e5       	ldi	r24, 0x5A	; 90
    184e:	d6 de       	rcall	.-596    	; 0x15fc <PCD_WriteRegister>
    1850:	60 e4       	ldi	r22, 0x40	; 64
    1852:	8a e2       	ldi	r24, 0x2A	; 42
    1854:	d3 de       	rcall	.-602    	; 0x15fc <PCD_WriteRegister>
    1856:	6d e3       	ldi	r22, 0x3D	; 61
    1858:	82 e2       	ldi	r24, 0x22	; 34
    185a:	d0 de       	rcall	.-608    	; 0x15fc <PCD_WriteRegister>
    185c:	cf df       	rcall	.-98     	; 0x17fc <PCD_AntennaOn>
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	08 95       	ret
    1862:	84 e0       	ldi	r24, 0x04	; 4
    1864:	08 95       	ret

00001866 <PCD_CommunicateWithPICC>:
    1866:	4f 92       	push	r4
    1868:	5f 92       	push	r5
    186a:	6f 92       	push	r6
    186c:	7f 92       	push	r7
    186e:	8f 92       	push	r8
    1870:	9f 92       	push	r9
    1872:	af 92       	push	r10
    1874:	bf 92       	push	r11
    1876:	cf 92       	push	r12
    1878:	df 92       	push	r13
    187a:	ef 92       	push	r14
    187c:	ff 92       	push	r15
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	1f 92       	push	r1
    1888:	1f 92       	push	r1
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	98 2e       	mov	r9, r24
    1890:	b6 2e       	mov	r11, r22
    1892:	2a 01       	movw	r4, r20
    1894:	72 2e       	mov	r7, r18
    1896:	c1 14       	cp	r12, r1
    1898:	d1 04       	cpc	r13, r1
    189a:	19 f0       	breq	.+6      	; 0x18a2 <PCD_CommunicateWithPICC+0x3c>
    189c:	f6 01       	movw	r30, r12
    189e:	60 80       	ld	r6, Z
    18a0:	01 c0       	rjmp	.+2      	; 0x18a4 <PCD_CommunicateWithPICC+0x3e>
    18a2:	61 2c       	mov	r6, r1
    18a4:	f0 e1       	ldi	r31, 0x10	; 16
    18a6:	af 9e       	mul	r10, r31
    18a8:	60 0c       	add	r6, r0
    18aa:	11 24       	eor	r1, r1
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	a5 de       	rcall	.-694    	; 0x15fc <PCD_WriteRegister>
    18b2:	6f e7       	ldi	r22, 0x7F	; 127
    18b4:	88 e0       	ldi	r24, 0x08	; 8
    18b6:	a2 de       	rcall	.-700    	; 0x15fc <PCD_WriteRegister>
    18b8:	60 e8       	ldi	r22, 0x80	; 128
    18ba:	84 e1       	ldi	r24, 0x14	; 20
    18bc:	35 df       	rcall	.-406    	; 0x1728 <PCD_SetRegisterBitMask>
    18be:	a2 01       	movw	r20, r4
    18c0:	67 2d       	mov	r22, r7
    18c2:	82 e1       	ldi	r24, 0x12	; 18
    18c4:	a5 de       	rcall	.-694    	; 0x1610 <PCD_WriteRegister2>
    18c6:	66 2d       	mov	r22, r6
    18c8:	8a e1       	ldi	r24, 0x1A	; 26
    18ca:	98 de       	rcall	.-720    	; 0x15fc <PCD_WriteRegister>
    18cc:	69 2d       	mov	r22, r9
    18ce:	82 e0       	ldi	r24, 0x02	; 2
    18d0:	95 de       	rcall	.-726    	; 0x15fc <PCD_WriteRegister>
    18d2:	8c e0       	ldi	r24, 0x0C	; 12
    18d4:	98 12       	cpse	r9, r24
    18d6:	03 c0       	rjmp	.+6      	; 0x18de <PCD_CommunicateWithPICC+0x78>
    18d8:	60 e8       	ldi	r22, 0x80	; 128
    18da:	8a e1       	ldi	r24, 0x1A	; 26
    18dc:	25 df       	rcall	.-438    	; 0x1728 <PCD_SetRegisterBitMask>
    18de:	0f 2e       	mov	r0, r31
    18e0:	f0 ed       	ldi	r31, 0xD0	; 208
    18e2:	4f 2e       	mov	r4, r31
    18e4:	f7 e0       	ldi	r31, 0x07	; 7
    18e6:	5f 2e       	mov	r5, r31
    18e8:	f0 2d       	mov	r31, r0
    18ea:	88 e0       	ldi	r24, 0x08	; 8
    18ec:	b3 de       	rcall	.-666    	; 0x1654 <PCD_ReadRegister>
    18ee:	98 2f       	mov	r25, r24
    18f0:	9b 21       	and	r25, r11
    18f2:	39 f4       	brne	.+14     	; 0x1902 <PCD_CommunicateWithPICC+0x9c>
    18f4:	80 fd       	sbrc	r24, 0
    18f6:	6a c0       	rjmp	.+212    	; 0x19cc <PCD_CommunicateWithPICC+0x166>
    18f8:	e1 e0       	ldi	r30, 0x01	; 1
    18fa:	4e 1a       	sub	r4, r30
    18fc:	51 08       	sbc	r5, r1
    18fe:	a9 f7       	brne	.-22     	; 0x18ea <PCD_CommunicateWithPICC+0x84>
    1900:	67 c0       	rjmp	.+206    	; 0x19d0 <PCD_CommunicateWithPICC+0x16a>
    1902:	8c e0       	ldi	r24, 0x0C	; 12
    1904:	a7 de       	rcall	.-690    	; 0x1654 <PCD_ReadRegister>
    1906:	b8 2e       	mov	r11, r24
    1908:	83 71       	andi	r24, 0x13	; 19
    190a:	09 f0       	breq	.+2      	; 0x190e <PCD_CommunicateWithPICC+0xa8>
    190c:	63 c0       	rjmp	.+198    	; 0x19d4 <PCD_CommunicateWithPICC+0x16e>
    190e:	01 15       	cp	r16, r1
    1910:	11 05       	cpc	r17, r1
    1912:	d1 f0       	breq	.+52     	; 0x1948 <PCD_CommunicateWithPICC+0xe2>
    1914:	e1 14       	cp	r14, r1
    1916:	f1 04       	cpc	r15, r1
    1918:	b9 f0       	breq	.+46     	; 0x1948 <PCD_CommunicateWithPICC+0xe2>
    191a:	84 e1       	ldi	r24, 0x14	; 20
    191c:	9b de       	rcall	.-714    	; 0x1654 <PCD_ReadRegister>
    191e:	f7 01       	movw	r30, r14
    1920:	90 81       	ld	r25, Z
    1922:	98 17       	cp	r25, r24
    1924:	08 f4       	brcc	.+2      	; 0x1928 <PCD_CommunicateWithPICC+0xc2>
    1926:	58 c0       	rjmp	.+176    	; 0x19d8 <PCD_CommunicateWithPICC+0x172>
    1928:	80 83       	st	Z, r24
    192a:	2a 2d       	mov	r18, r10
    192c:	a8 01       	movw	r20, r16
    192e:	68 2f       	mov	r22, r24
    1930:	82 e1       	ldi	r24, 0x12	; 18
    1932:	98 de       	rcall	.-720    	; 0x1664 <PCD_ReadRegister2>
    1934:	88 e1       	ldi	r24, 0x18	; 24
    1936:	8e de       	rcall	.-740    	; 0x1654 <PCD_ReadRegister>
    1938:	87 70       	andi	r24, 0x07	; 7
    193a:	c1 14       	cp	r12, r1
    193c:	d1 04       	cpc	r13, r1
    193e:	09 f4       	brne	.+2      	; 0x1942 <PCD_CommunicateWithPICC+0xdc>
    1940:	57 c0       	rjmp	.+174    	; 0x19f0 <PCD_CommunicateWithPICC+0x18a>
    1942:	f6 01       	movw	r30, r12
    1944:	80 83       	st	Z, r24
    1946:	54 c0       	rjmp	.+168    	; 0x19f0 <PCD_CommunicateWithPICC+0x18a>
    1948:	b3 fc       	sbrc	r11, 3
    194a:	48 c0       	rjmp	.+144    	; 0x19dc <PCD_CommunicateWithPICC+0x176>
    194c:	01 15       	cp	r16, r1
    194e:	11 05       	cpc	r17, r1
    1950:	09 f4       	brne	.+2      	; 0x1954 <PCD_CommunicateWithPICC+0xee>
    1952:	46 c0       	rjmp	.+140    	; 0x19e0 <PCD_CommunicateWithPICC+0x17a>
    1954:	e1 14       	cp	r14, r1
    1956:	f1 04       	cpc	r15, r1
    1958:	09 f4       	brne	.+2      	; 0x195c <PCD_CommunicateWithPICC+0xf6>
    195a:	44 c0       	rjmp	.+136    	; 0x19e4 <PCD_CommunicateWithPICC+0x17e>
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	88 20       	and	r8, r8
    1960:	09 f4       	brne	.+2      	; 0x1964 <PCD_CommunicateWithPICC+0xfe>
    1962:	42 c0       	rjmp	.+132    	; 0x19e8 <PCD_CommunicateWithPICC+0x182>
    1964:	f7 01       	movw	r30, r14
    1966:	90 81       	ld	r25, Z
    1968:	91 30       	cpi	r25, 0x01	; 1
    196a:	21 f4       	brne	.+8      	; 0x1974 <PCD_CommunicateWithPICC+0x10e>
    196c:	84 30       	cpi	r24, 0x04	; 4
    196e:	21 f1       	breq	.+72     	; 0x19b8 <PCD_CommunicateWithPICC+0x152>
    1970:	88 e0       	ldi	r24, 0x08	; 8
    1972:	41 c0       	rjmp	.+130    	; 0x19f6 <PCD_CommunicateWithPICC+0x190>
    1974:	92 30       	cpi	r25, 0x02	; 2
    1976:	10 f1       	brcs	.+68     	; 0x19bc <PCD_CommunicateWithPICC+0x156>
    1978:	81 11       	cpse	r24, r1
    197a:	22 c0       	rjmp	.+68     	; 0x19c0 <PCD_CommunicateWithPICC+0x15a>
    197c:	6e ef       	ldi	r22, 0xFE	; 254
    197e:	69 0f       	add	r22, r25
    1980:	ae 01       	movw	r20, r28
    1982:	4f 5f       	subi	r20, 0xFF	; 255
    1984:	5f 4f       	sbci	r21, 0xFF	; 255
    1986:	c8 01       	movw	r24, r16
    1988:	e8 de       	rcall	.-560    	; 0x175a <PCD_CalculateCRC>
    198a:	81 30       	cpi	r24, 0x01	; 1
    198c:	a1 f5       	brne	.+104    	; 0x19f6 <PCD_CommunicateWithPICC+0x190>
    198e:	f7 01       	movw	r30, r14
    1990:	80 81       	ld	r24, Z
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	f8 01       	movw	r30, r16
    1996:	e8 0f       	add	r30, r24
    1998:	f9 1f       	adc	r31, r25
    199a:	32 97       	sbiw	r30, 0x02	; 2
    199c:	30 81       	ld	r19, Z
    199e:	29 81       	ldd	r18, Y+1	; 0x01
    19a0:	32 13       	cpse	r19, r18
    19a2:	10 c0       	rjmp	.+32     	; 0x19c4 <PCD_CommunicateWithPICC+0x15e>
    19a4:	80 0f       	add	r24, r16
    19a6:	91 1f       	adc	r25, r17
    19a8:	fc 01       	movw	r30, r24
    19aa:	31 97       	sbiw	r30, 0x01	; 1
    19ac:	90 81       	ld	r25, Z
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	98 13       	cpse	r25, r24
    19b2:	0a c0       	rjmp	.+20     	; 0x19c8 <PCD_CommunicateWithPICC+0x162>
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	1f c0       	rjmp	.+62     	; 0x19f6 <PCD_CommunicateWithPICC+0x190>
    19b8:	89 e0       	ldi	r24, 0x09	; 9
    19ba:	1d c0       	rjmp	.+58     	; 0x19f6 <PCD_CommunicateWithPICC+0x190>
    19bc:	88 e0       	ldi	r24, 0x08	; 8
    19be:	1b c0       	rjmp	.+54     	; 0x19f6 <PCD_CommunicateWithPICC+0x190>
    19c0:	88 e0       	ldi	r24, 0x08	; 8
    19c2:	19 c0       	rjmp	.+50     	; 0x19f6 <PCD_CommunicateWithPICC+0x190>
    19c4:	88 e0       	ldi	r24, 0x08	; 8
    19c6:	17 c0       	rjmp	.+46     	; 0x19f6 <PCD_CommunicateWithPICC+0x190>
    19c8:	88 e0       	ldi	r24, 0x08	; 8
    19ca:	15 c0       	rjmp	.+42     	; 0x19f6 <PCD_CommunicateWithPICC+0x190>
    19cc:	84 e0       	ldi	r24, 0x04	; 4
    19ce:	13 c0       	rjmp	.+38     	; 0x19f6 <PCD_CommunicateWithPICC+0x190>
    19d0:	84 e0       	ldi	r24, 0x04	; 4
    19d2:	11 c0       	rjmp	.+34     	; 0x19f6 <PCD_CommunicateWithPICC+0x190>
    19d4:	82 e0       	ldi	r24, 0x02	; 2
    19d6:	0f c0       	rjmp	.+30     	; 0x19f6 <PCD_CommunicateWithPICC+0x190>
    19d8:	85 e0       	ldi	r24, 0x05	; 5
    19da:	0d c0       	rjmp	.+26     	; 0x19f6 <PCD_CommunicateWithPICC+0x190>
    19dc:	83 e0       	ldi	r24, 0x03	; 3
    19de:	0b c0       	rjmp	.+22     	; 0x19f6 <PCD_CommunicateWithPICC+0x190>
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	09 c0       	rjmp	.+18     	; 0x19f6 <PCD_CommunicateWithPICC+0x190>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	07 c0       	rjmp	.+14     	; 0x19f6 <PCD_CommunicateWithPICC+0x190>
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	05 c0       	rjmp	.+10     	; 0x19f6 <PCD_CommunicateWithPICC+0x190>
    19ec:	83 e0       	ldi	r24, 0x03	; 3
    19ee:	03 c0       	rjmp	.+6      	; 0x19f6 <PCD_CommunicateWithPICC+0x190>
    19f0:	b3 fc       	sbrc	r11, 3
    19f2:	fc cf       	rjmp	.-8      	; 0x19ec <PCD_CommunicateWithPICC+0x186>
    19f4:	b4 cf       	rjmp	.-152    	; 0x195e <PCD_CommunicateWithPICC+0xf8>
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	1f 91       	pop	r17
    1a00:	0f 91       	pop	r16
    1a02:	ff 90       	pop	r15
    1a04:	ef 90       	pop	r14
    1a06:	df 90       	pop	r13
    1a08:	cf 90       	pop	r12
    1a0a:	bf 90       	pop	r11
    1a0c:	af 90       	pop	r10
    1a0e:	9f 90       	pop	r9
    1a10:	8f 90       	pop	r8
    1a12:	7f 90       	pop	r7
    1a14:	6f 90       	pop	r6
    1a16:	5f 90       	pop	r5
    1a18:	4f 90       	pop	r4
    1a1a:	08 95       	ret

00001a1c <PCD_TransceiveData>:
    1a1c:	8f 92       	push	r8
    1a1e:	af 92       	push	r10
    1a20:	cf 92       	push	r12
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	8c 2c       	mov	r8, r12
    1a2e:	ae 2c       	mov	r10, r14
    1a30:	68 01       	movw	r12, r16
    1a32:	79 01       	movw	r14, r18
    1a34:	8a 01       	movw	r16, r20
    1a36:	26 2f       	mov	r18, r22
    1a38:	ac 01       	movw	r20, r24
    1a3a:	60 e3       	ldi	r22, 0x30	; 48
    1a3c:	8c e0       	ldi	r24, 0x0C	; 12
    1a3e:	13 df       	rcall	.-474    	; 0x1866 <PCD_CommunicateWithPICC>
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	ff 90       	pop	r15
    1a46:	ef 90       	pop	r14
    1a48:	df 90       	pop	r13
    1a4a:	cf 90       	pop	r12
    1a4c:	af 90       	pop	r10
    1a4e:	8f 90       	pop	r8
    1a50:	08 95       	ret

00001a52 <PICC_REQA_or_WUPA>:
    1a52:	8f 92       	push	r8
    1a54:	9f 92       	push	r9
    1a56:	af 92       	push	r10
    1a58:	bf 92       	push	r11
    1a5a:	cf 92       	push	r12
    1a5c:	ef 92       	push	r14
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	1f 92       	push	r1
    1a68:	1f 92       	push	r1
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	8a 83       	std	Y+2, r24	; 0x02
    1a70:	61 15       	cp	r22, r1
    1a72:	71 05       	cpc	r23, r1
    1a74:	09 f1       	breq	.+66     	; 0x1ab8 <PICC_REQA_or_WUPA+0x66>
    1a76:	fa 01       	movw	r30, r20
    1a78:	80 81       	ld	r24, Z
    1a7a:	82 30       	cpi	r24, 0x02	; 2
    1a7c:	f8 f0       	brcs	.+62     	; 0x1abc <PICC_REQA_or_WUPA+0x6a>
    1a7e:	4a 01       	movw	r8, r20
    1a80:	5b 01       	movw	r10, r22
    1a82:	60 e8       	ldi	r22, 0x80	; 128
    1a84:	8c e1       	ldi	r24, 0x1C	; 28
    1a86:	5c de       	rcall	.-840    	; 0x1740 <PCD_ClearRegisterBitMask>
    1a88:	87 e0       	ldi	r24, 0x07	; 7
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	c1 2c       	mov	r12, r1
    1a8e:	e1 2c       	mov	r14, r1
    1a90:	8e 01       	movw	r16, r28
    1a92:	0f 5f       	subi	r16, 0xFF	; 255
    1a94:	1f 4f       	sbci	r17, 0xFF	; 255
    1a96:	94 01       	movw	r18, r8
    1a98:	a5 01       	movw	r20, r10
    1a9a:	61 e0       	ldi	r22, 0x01	; 1
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	02 96       	adiw	r24, 0x02	; 2
    1aa0:	bd df       	rcall	.-134    	; 0x1a1c <PCD_TransceiveData>
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	71 f4       	brne	.+28     	; 0x1ac2 <PICC_REQA_or_WUPA+0x70>
    1aa6:	f4 01       	movw	r30, r8
    1aa8:	80 81       	ld	r24, Z
    1aaa:	82 30       	cpi	r24, 0x02	; 2
    1aac:	49 f4       	brne	.+18     	; 0x1ac0 <PICC_REQA_or_WUPA+0x6e>
    1aae:	99 81       	ldd	r25, Y+1	; 0x01
    1ab0:	91 11       	cpse	r25, r1
    1ab2:	07 c0       	rjmp	.+14     	; 0x1ac2 <PICC_REQA_or_WUPA+0x70>
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <PICC_REQA_or_WUPA+0x70>
    1ab8:	85 e0       	ldi	r24, 0x05	; 5
    1aba:	03 c0       	rjmp	.+6      	; 0x1ac2 <PICC_REQA_or_WUPA+0x70>
    1abc:	85 e0       	ldi	r24, 0x05	; 5
    1abe:	01 c0       	rjmp	.+2      	; 0x1ac2 <PICC_REQA_or_WUPA+0x70>
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	ef 90       	pop	r14
    1ad0:	cf 90       	pop	r12
    1ad2:	bf 90       	pop	r11
    1ad4:	af 90       	pop	r10
    1ad6:	9f 90       	pop	r9
    1ad8:	8f 90       	pop	r8
    1ada:	08 95       	ret

00001adc <PICC_RequestA>:
    1adc:	ab 01       	movw	r20, r22
    1ade:	bc 01       	movw	r22, r24
    1ae0:	86 e2       	ldi	r24, 0x26	; 38
    1ae2:	b7 cf       	rjmp	.-146    	; 0x1a52 <PICC_REQA_or_WUPA>
    1ae4:	08 95       	ret

00001ae6 <PICC_Select>:
    1ae6:	2f 92       	push	r2
    1ae8:	3f 92       	push	r3
    1aea:	4f 92       	push	r4
    1aec:	5f 92       	push	r5
    1aee:	6f 92       	push	r6
    1af0:	7f 92       	push	r7
    1af2:	8f 92       	push	r8
    1af4:	9f 92       	push	r9
    1af6:	af 92       	push	r10
    1af8:	bf 92       	push	r11
    1afa:	cf 92       	push	r12
    1afc:	df 92       	push	r13
    1afe:	ef 92       	push	r14
    1b00:	ff 92       	push	r15
    1b02:	0f 93       	push	r16
    1b04:	1f 93       	push	r17
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	62 97       	sbiw	r28, 0x12	; 18
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	61 35       	cpi	r22, 0x51	; 81
    1b1c:	08 f0       	brcs	.+2      	; 0x1b20 <PICC_Select+0x3a>
    1b1e:	55 c1       	rjmp	.+682    	; 0x1dca <PICC_Select+0x2e4>
    1b20:	69 8b       	std	Y+17, r22	; 0x11
    1b22:	9d 87       	std	Y+13, r25	; 0x0d
    1b24:	8c 87       	std	Y+12, r24	; 0x0c
    1b26:	60 e8       	ldi	r22, 0x80	; 128
    1b28:	8c e1       	ldi	r24, 0x1C	; 28
    1b2a:	0a de       	rcall	.-1004   	; 0x1740 <PCD_ClearRegisterBitMask>
    1b2c:	29 89       	ldd	r18, Y+17	; 0x11
    1b2e:	20 53       	subi	r18, 0x30	; 48
    1b30:	28 8b       	std	Y+16, r18	; 0x10
    1b32:	92 2f       	mov	r25, r18
    1b34:	97 70       	andi	r25, 0x07	; 7
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <PICC_Select+0x56>
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	98 89       	ldd	r25, Y+16	; 0x10
    1b3e:	96 95       	lsr	r25
    1b40:	96 95       	lsr	r25
    1b42:	96 95       	lsr	r25
    1b44:	89 0f       	add	r24, r25
    1b46:	8a 8b       	std	Y+18, r24	; 0x12
    1b48:	31 e0       	ldi	r19, 0x01	; 1
    1b4a:	3f 87       	std	Y+15, r19	; 0x0f
    1b4c:	ae 01       	movw	r20, r28
    1b4e:	4f 5f       	subi	r20, 0xFF	; 255
    1b50:	5f 4f       	sbci	r21, 0xFF	; 255
    1b52:	2a 01       	movw	r4, r20
    1b54:	24 2e       	mov	r2, r20
    1b56:	85 2c       	mov	r8, r5
    1b58:	5f 85       	ldd	r21, Y+15	; 0x0f
    1b5a:	52 30       	cpi	r21, 0x02	; 2
    1b5c:	a9 f0       	breq	.+42     	; 0x1b88 <PICC_Select+0xa2>
    1b5e:	53 30       	cpi	r21, 0x03	; 3
    1b60:	21 f1       	breq	.+72     	; 0x1baa <PICC_Select+0xc4>
    1b62:	51 30       	cpi	r21, 0x01	; 1
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <PICC_Select+0x82>
    1b66:	33 c1       	rjmp	.+614    	; 0x1dce <PICC_Select+0x2e8>
    1b68:	83 e9       	ldi	r24, 0x93	; 147
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	89 89       	ldd	r24, Y+17	; 0x11
    1b6e:	88 23       	and	r24, r24
    1b70:	41 f0       	breq	.+16     	; 0x1b82 <PICC_Select+0x9c>
    1b72:	31 e0       	ldi	r19, 0x01	; 1
    1b74:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b76:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b78:	80 81       	ld	r24, Z
    1b7a:	85 30       	cpi	r24, 0x05	; 5
    1b7c:	18 f4       	brcc	.+6      	; 0x1b84 <PICC_Select+0x9e>
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	01 c0       	rjmp	.+2      	; 0x1b84 <PICC_Select+0x9e>
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	1e 86       	std	Y+14, r1	; 0x0e
    1b86:	1a c0       	rjmp	.+52     	; 0x1bbc <PICC_Select+0xd6>
    1b88:	85 e9       	ldi	r24, 0x95	; 149
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	f9 89       	ldd	r31, Y+17	; 0x11
    1b8e:	ff 23       	and	r31, r31
    1b90:	41 f0       	breq	.+16     	; 0x1ba2 <PICC_Select+0xbc>
    1b92:	31 e0       	ldi	r19, 0x01	; 1
    1b94:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b96:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b98:	80 81       	ld	r24, Z
    1b9a:	88 30       	cpi	r24, 0x08	; 8
    1b9c:	18 f4       	brcc	.+6      	; 0x1ba4 <PICC_Select+0xbe>
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	01 c0       	rjmp	.+2      	; 0x1ba4 <PICC_Select+0xbe>
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	f3 e0       	ldi	r31, 0x03	; 3
    1ba6:	fe 87       	std	Y+14, r31	; 0x0e
    1ba8:	09 c0       	rjmp	.+18     	; 0x1bbc <PICC_Select+0xd6>
    1baa:	87 e9       	ldi	r24, 0x97	; 151
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	2a 89       	ldd	r18, Y+18	; 0x12
    1bb0:	21 11       	cpse	r18, r1
    1bb2:	1d c0       	rjmp	.+58     	; 0x1bee <PICC_Select+0x108>
    1bb4:	f8 88       	ldd	r15, Y+16	; 0x10
    1bb6:	36 e0       	ldi	r19, 0x06	; 6
    1bb8:	3e 87       	std	Y+14, r19	; 0x0e
    1bba:	23 c1       	rjmp	.+582    	; 0x1e02 <PICC_Select+0x31c>
    1bbc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bbe:	88 0f       	add	r24, r24
    1bc0:	88 0f       	add	r24, r24
    1bc2:	88 0f       	add	r24, r24
    1bc4:	f9 88       	ldd	r15, Y+17	; 0x11
    1bc6:	f8 1a       	sub	r15, r24
    1bc8:	33 23       	and	r19, r19
    1bca:	09 f4       	brne	.+2      	; 0x1bce <PICC_Select+0xe8>
    1bcc:	0e c1       	rjmp	.+540    	; 0x1dea <PICC_Select+0x304>
    1bce:	88 e8       	ldi	r24, 0x88	; 136
    1bd0:	8b 83       	std	Y+3, r24	; 0x03
    1bd2:	91 e0       	ldi	r25, 0x01	; 1
    1bd4:	8f 2d       	mov	r24, r15
    1bd6:	87 70       	andi	r24, 0x07	; 7
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <PICC_Select+0xf6>
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	8f 2d       	mov	r24, r15
    1bde:	86 95       	lsr	r24
    1be0:	86 95       	lsr	r24
    1be2:	86 95       	lsr	r24
    1be4:	98 0f       	add	r25, r24
    1be6:	31 f1       	breq	.+76     	; 0x1c34 <PICC_Select+0x14e>
    1be8:	83 e0       	ldi	r24, 0x03	; 3
    1bea:	23 e0       	ldi	r18, 0x03	; 3
    1bec:	0a c0       	rjmp	.+20     	; 0x1c02 <PICC_Select+0x11c>
    1bee:	9a 89       	ldd	r25, Y+18	; 0x12
    1bf0:	f8 88       	ldd	r15, Y+16	; 0x10
    1bf2:	46 e0       	ldi	r20, 0x06	; 6
    1bf4:	4e 87       	std	Y+14, r20	; 0x0e
    1bf6:	82 e0       	ldi	r24, 0x02	; 2
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	24 e0       	ldi	r18, 0x04	; 4
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <PICC_Select+0x11c>
    1bfe:	82 e0       	ldi	r24, 0x02	; 2
    1c00:	24 e0       	ldi	r18, 0x04	; 4
    1c02:	29 17       	cp	r18, r25
    1c04:	08 f4       	brcc	.+2      	; 0x1c08 <PICC_Select+0x122>
    1c06:	92 2f       	mov	r25, r18
    1c08:	99 23       	and	r25, r25
    1c0a:	89 f0       	breq	.+34     	; 0x1c2e <PICC_Select+0x148>
    1c0c:	5e 85       	ldd	r21, Y+14	; 0x0e
    1c0e:	e5 2f       	mov	r30, r21
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	31 96       	adiw	r30, 0x01	; 1
    1c14:	4c 85       	ldd	r20, Y+12	; 0x0c
    1c16:	5d 85       	ldd	r21, Y+13	; 0x0d
    1c18:	e4 0f       	add	r30, r20
    1c1a:	f5 1f       	adc	r31, r21
    1c1c:	98 0f       	add	r25, r24
    1c1e:	21 91       	ld	r18, Z+
    1c20:	d2 01       	movw	r26, r4
    1c22:	a8 0f       	add	r26, r24
    1c24:	b1 1d       	adc	r27, r1
    1c26:	2c 93       	st	X, r18
    1c28:	8f 5f       	subi	r24, 0xFF	; 255
    1c2a:	89 13       	cpse	r24, r25
    1c2c:	f8 cf       	rjmp	.-16     	; 0x1c1e <PICC_Select+0x138>
    1c2e:	33 23       	and	r19, r19
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <PICC_Select+0x14e>
    1c32:	e7 c0       	rjmp	.+462    	; 0x1e02 <PICC_Select+0x31c>
    1c34:	58 e0       	ldi	r21, 0x08	; 8
    1c36:	f5 0e       	add	r15, r21
    1c38:	e4 c0       	rjmp	.+456    	; 0x1e02 <PICC_Select+0x31c>
    1c3a:	8f e1       	ldi	r24, 0x1F	; 31
    1c3c:	8f 15       	cp	r24, r15
    1c3e:	f0 f4       	brcc	.+60     	; 0x1c7c <PICC_Select+0x196>
    1c40:	3a 82       	std	Y+2, r3	; 0x02
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	89 27       	eor	r24, r25
    1c48:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4a:	89 27       	eor	r24, r25
    1c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4e:	89 27       	eor	r24, r25
    1c50:	8f 83       	std	Y+7, r24	; 0x07
    1c52:	ae 01       	movw	r20, r28
    1c54:	48 5f       	subi	r20, 0xF8	; 248
    1c56:	5f 4f       	sbci	r21, 0xFF	; 255
    1c58:	67 2d       	mov	r22, r7
    1c5a:	82 2d       	mov	r24, r2
    1c5c:	98 2d       	mov	r25, r8
    1c5e:	7d dd       	rcall	.-1286   	; 0x175a <PCD_CalculateCRC>
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <PICC_Select+0x180>
    1c64:	e6 c0       	rjmp	.+460    	; 0x1e32 <PICC_Select+0x34c>
    1c66:	9a 86       	std	Y+10, r9	; 0x0a
    1c68:	93 e0       	ldi	r25, 0x03	; 3
    1c6a:	9b 87       	std	Y+11, r25	; 0x0b
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	37 96       	adiw	r30, 0x07	; 7
    1c70:	5f 01       	movw	r10, r30
    1c72:	0f 2e       	mov	r0, r31
    1c74:	f9 e0       	ldi	r31, 0x09	; 9
    1c76:	df 2e       	mov	r13, r31
    1c78:	f0 2d       	mov	r31, r0
    1c7a:	1a c0       	rjmp	.+52     	; 0x1cb0 <PICC_Select+0x1ca>
    1c7c:	9f 2d       	mov	r25, r15
    1c7e:	97 70       	andi	r25, 0x07	; 7
    1c80:	9a 87       	std	Y+10, r25	; 0x0a
    1c82:	2f 2d       	mov	r18, r15
    1c84:	26 95       	lsr	r18
    1c86:	26 95       	lsr	r18
    1c88:	26 95       	lsr	r18
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	82 0f       	add	r24, r18
    1c8e:	39 2f       	mov	r19, r25
    1c90:	f0 e1       	ldi	r31, 0x10	; 16
    1c92:	8f 9f       	mul	r24, r31
    1c94:	30 0d       	add	r19, r0
    1c96:	11 24       	eor	r1, r1
    1c98:	3a 83       	std	Y+2, r19	; 0x02
    1c9a:	d6 2c       	mov	r13, r6
    1c9c:	91 11       	cpse	r25, r1
    1c9e:	01 c0       	rjmp	.+2      	; 0x1ca2 <PICC_Select+0x1bc>
    1ca0:	d9 2c       	mov	r13, r9
    1ca2:	d8 0e       	add	r13, r24
    1ca4:	52 01       	movw	r10, r4
    1ca6:	a8 0e       	add	r10, r24
    1ca8:	b1 1c       	adc	r11, r1
    1caa:	87 2d       	mov	r24, r7
    1cac:	82 1b       	sub	r24, r18
    1cae:	8b 87       	std	Y+11, r24	; 0x0b
    1cb0:	ea 84       	ldd	r14, Y+10	; 0x0a
    1cb2:	6e 2d       	mov	r22, r14
    1cb4:	62 95       	swap	r22
    1cb6:	60 7f       	andi	r22, 0xF0	; 240
    1cb8:	6e 0d       	add	r22, r14
    1cba:	8a e1       	ldi	r24, 0x1A	; 26
    1cbc:	9f dc       	rcall	.-1730   	; 0x15fc <PCD_WriteRegister>
    1cbe:	c9 2c       	mov	r12, r9
    1cc0:	8e 01       	movw	r16, r28
    1cc2:	06 5f       	subi	r16, 0xF6	; 246
    1cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc6:	9e 01       	movw	r18, r28
    1cc8:	25 5f       	subi	r18, 0xF5	; 245
    1cca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ccc:	a5 01       	movw	r20, r10
    1cce:	6d 2d       	mov	r22, r13
    1cd0:	82 2d       	mov	r24, r2
    1cd2:	98 2d       	mov	r25, r8
    1cd4:	a3 de       	rcall	.-698    	; 0x1a1c <PCD_TransceiveData>
    1cd6:	83 30       	cpi	r24, 0x03	; 3
    1cd8:	99 f5       	brne	.+102    	; 0x1d40 <PICC_Select+0x25a>
    1cda:	8c e1       	ldi	r24, 0x1C	; 28
    1cdc:	bb dc       	rcall	.-1674   	; 0x1654 <PCD_ReadRegister>
    1cde:	85 fd       	sbrc	r24, 5
    1ce0:	78 c0       	rjmp	.+240    	; 0x1dd2 <PICC_Select+0x2ec>
    1ce2:	8f 71       	andi	r24, 0x1F	; 31
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <PICC_Select+0x202>
    1ce6:	80 e2       	ldi	r24, 0x20	; 32
    1ce8:	f8 16       	cp	r15, r24
    1cea:	08 f0       	brcs	.+2      	; 0x1cee <PICC_Select+0x208>
    1cec:	74 c0       	rjmp	.+232    	; 0x1dd6 <PICC_Select+0x2f0>
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	21 50       	subi	r18, 0x01	; 1
    1cf4:	31 09       	sbc	r19, r1
    1cf6:	27 70       	andi	r18, 0x07	; 7
    1cf8:	30 78       	andi	r19, 0x80	; 128
    1cfa:	33 23       	and	r19, r19
    1cfc:	34 f4       	brge	.+12     	; 0x1d0a <PICC_Select+0x224>
    1cfe:	21 50       	subi	r18, 0x01	; 1
    1d00:	31 09       	sbc	r19, r1
    1d02:	28 6f       	ori	r18, 0xF8	; 248
    1d04:	3f 6f       	ori	r19, 0xFF	; 255
    1d06:	2f 5f       	subi	r18, 0xFF	; 255
    1d08:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0a:	98 2f       	mov	r25, r24
    1d0c:	96 95       	lsr	r25
    1d0e:	96 95       	lsr	r25
    1d10:	96 95       	lsr	r25
    1d12:	31 e0       	ldi	r19, 0x01	; 1
    1d14:	39 0f       	add	r19, r25
    1d16:	96 2d       	mov	r25, r6
    1d18:	21 11       	cpse	r18, r1
    1d1a:	01 c0       	rjmp	.+2      	; 0x1d1e <PICC_Select+0x238>
    1d1c:	99 2d       	mov	r25, r9
    1d1e:	93 0f       	add	r25, r19
    1d20:	f2 01       	movw	r30, r4
    1d22:	e9 0f       	add	r30, r25
    1d24:	f1 1d       	adc	r31, r1
    1d26:	41 e0       	ldi	r20, 0x01	; 1
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <PICC_Select+0x24a>
    1d2c:	44 0f       	add	r20, r20
    1d2e:	55 1f       	adc	r21, r21
    1d30:	2a 95       	dec	r18
    1d32:	e2 f7       	brpl	.-8      	; 0x1d2c <PICC_Select+0x246>
    1d34:	9a 01       	movw	r18, r20
    1d36:	90 81       	ld	r25, Z
    1d38:	29 2b       	or	r18, r25
    1d3a:	20 83       	st	Z, r18
    1d3c:	f8 2e       	mov	r15, r24
    1d3e:	7d cf       	rjmp	.-262    	; 0x1c3a <PICC_Select+0x154>
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	09 f0       	breq	.+2      	; 0x1d46 <PICC_Select+0x260>
    1d44:	76 c0       	rjmp	.+236    	; 0x1e32 <PICC_Select+0x34c>
    1d46:	5f e1       	ldi	r21, 0x1F	; 31
    1d48:	5f 15       	cp	r21, r15
    1d4a:	20 f0       	brcs	.+8      	; 0x1d54 <PICC_Select+0x26e>
    1d4c:	68 94       	set
    1d4e:	ff 24       	eor	r15, r15
    1d50:	f5 f8       	bld	r15, 5
    1d52:	73 cf       	rjmp	.-282    	; 0x1c3a <PICC_Select+0x154>
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	88 38       	cpi	r24, 0x88	; 136
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <PICC_Select+0x276>
    1d5a:	5f c0       	rjmp	.+190    	; 0x1e1a <PICC_Select+0x334>
    1d5c:	82 e0       	ldi	r24, 0x02	; 2
    1d5e:	94 e0       	ldi	r25, 0x04	; 4
    1d60:	5e c0       	rjmp	.+188    	; 0x1e1e <PICC_Select+0x338>
    1d62:	d2 01       	movw	r26, r4
    1d64:	a8 0f       	add	r26, r24
    1d66:	b1 1d       	adc	r27, r1
    1d68:	2c 91       	ld	r18, X
    1d6a:	21 93       	st	Z+, r18
    1d6c:	8f 5f       	subi	r24, 0xFF	; 255
    1d6e:	89 13       	cpse	r24, r25
    1d70:	f8 cf       	rjmp	.-16     	; 0x1d62 <PICC_Select+0x27c>
    1d72:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d74:	83 30       	cpi	r24, 0x03	; 3
    1d76:	89 f5       	brne	.+98     	; 0x1dda <PICC_Select+0x2f4>
    1d78:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d7a:	81 11       	cpse	r24, r1
    1d7c:	30 c0       	rjmp	.+96     	; 0x1dde <PICC_Select+0x2f8>
    1d7e:	ae 01       	movw	r20, r28
    1d80:	4d 5f       	subi	r20, 0xFD	; 253
    1d82:	5f 4f       	sbci	r21, 0xFF	; 255
    1d84:	61 e0       	ldi	r22, 0x01	; 1
    1d86:	c5 01       	movw	r24, r10
    1d88:	e8 dc       	rcall	.-1584   	; 0x175a <PCD_CalculateCRC>
    1d8a:	81 30       	cpi	r24, 0x01	; 1
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <PICC_Select+0x2aa>
    1d8e:	51 c0       	rjmp	.+162    	; 0x1e32 <PICC_Select+0x34c>
    1d90:	9b 81       	ldd	r25, Y+3	; 0x03
    1d92:	f5 01       	movw	r30, r10
    1d94:	81 81       	ldd	r24, Z+1	; 0x01
    1d96:	98 13       	cpse	r25, r24
    1d98:	24 c0       	rjmp	.+72     	; 0x1de2 <PICC_Select+0x2fc>
    1d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9c:	82 81       	ldd	r24, Z+2	; 0x02
    1d9e:	98 13       	cpse	r25, r24
    1da0:	22 c0       	rjmp	.+68     	; 0x1de6 <PICC_Select+0x300>
    1da2:	80 81       	ld	r24, Z
    1da4:	82 ff       	sbrs	r24, 2
    1da6:	04 c0       	rjmp	.+8      	; 0x1db0 <PICC_Select+0x2ca>
    1da8:	ff 85       	ldd	r31, Y+15	; 0x0f
    1daa:	ff 5f       	subi	r31, 0xFF	; 255
    1dac:	ff 87       	std	Y+15, r31	; 0x0f
    1dae:	d4 ce       	rjmp	.-600    	; 0x1b58 <PICC_Select+0x72>
    1db0:	ec 85       	ldd	r30, Y+12	; 0x0c
    1db2:	fd 85       	ldd	r31, Y+13	; 0x0d
    1db4:	83 87       	std	Z+11, r24	; 0x0b
    1db6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db8:	88 0f       	add	r24, r24
    1dba:	ff 85       	ldd	r31, Y+15	; 0x0f
    1dbc:	8f 0f       	add	r24, r31
    1dbe:	8f 5f       	subi	r24, 0xFF	; 255
    1dc0:	ec 85       	ldd	r30, Y+12	; 0x0c
    1dc2:	fd 85       	ldd	r31, Y+13	; 0x0d
    1dc4:	80 83       	st	Z, r24
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	34 c0       	rjmp	.+104    	; 0x1e32 <PICC_Select+0x34c>
    1dca:	87 e0       	ldi	r24, 0x07	; 7
    1dcc:	32 c0       	rjmp	.+100    	; 0x1e32 <PICC_Select+0x34c>
    1dce:	86 e0       	ldi	r24, 0x06	; 6
    1dd0:	30 c0       	rjmp	.+96     	; 0x1e32 <PICC_Select+0x34c>
    1dd2:	83 e0       	ldi	r24, 0x03	; 3
    1dd4:	2e c0       	rjmp	.+92     	; 0x1e32 <PICC_Select+0x34c>
    1dd6:	86 e0       	ldi	r24, 0x06	; 6
    1dd8:	2c c0       	rjmp	.+88     	; 0x1e32 <PICC_Select+0x34c>
    1dda:	82 e0       	ldi	r24, 0x02	; 2
    1ddc:	2a c0       	rjmp	.+84     	; 0x1e32 <PICC_Select+0x34c>
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	28 c0       	rjmp	.+80     	; 0x1e32 <PICC_Select+0x34c>
    1de2:	88 e0       	ldi	r24, 0x08	; 8
    1de4:	26 c0       	rjmp	.+76     	; 0x1e32 <PICC_Select+0x34c>
    1de6:	88 e0       	ldi	r24, 0x08	; 8
    1de8:	24 c0       	rjmp	.+72     	; 0x1e32 <PICC_Select+0x34c>
    1dea:	91 e0       	ldi	r25, 0x01	; 1
    1dec:	8f 2d       	mov	r24, r15
    1dee:	87 70       	andi	r24, 0x07	; 7
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <PICC_Select+0x30e>
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	8f 2d       	mov	r24, r15
    1df6:	86 95       	lsr	r24
    1df8:	86 95       	lsr	r24
    1dfa:	86 95       	lsr	r24
    1dfc:	98 0f       	add	r25, r24
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <PICC_Select+0x31c>
    1e00:	fe ce       	rjmp	.-516    	; 0x1bfe <PICC_Select+0x118>
    1e02:	66 24       	eor	r6, r6
    1e04:	63 94       	inc	r6
    1e06:	0f 2e       	mov	r0, r31
    1e08:	f7 e0       	ldi	r31, 0x07	; 7
    1e0a:	7f 2e       	mov	r7, r31
    1e0c:	f0 2d       	mov	r31, r0
    1e0e:	91 2c       	mov	r9, r1
    1e10:	0f 2e       	mov	r0, r31
    1e12:	f0 e7       	ldi	r31, 0x70	; 112
    1e14:	3f 2e       	mov	r3, r31
    1e16:	f0 2d       	mov	r31, r0
    1e18:	10 cf       	rjmp	.-480    	; 0x1c3a <PICC_Select+0x154>
    1e1a:	83 e0       	ldi	r24, 0x03	; 3
    1e1c:	93 e0       	ldi	r25, 0x03	; 3
    1e1e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1e20:	e2 2f       	mov	r30, r18
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	31 96       	adiw	r30, 0x01	; 1
    1e26:	4c 85       	ldd	r20, Y+12	; 0x0c
    1e28:	5d 85       	ldd	r21, Y+13	; 0x0d
    1e2a:	e4 0f       	add	r30, r20
    1e2c:	f5 1f       	adc	r31, r21
    1e2e:	98 0f       	add	r25, r24
    1e30:	98 cf       	rjmp	.-208    	; 0x1d62 <PICC_Select+0x27c>
    1e32:	62 96       	adiw	r28, 0x12	; 18
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	1f 91       	pop	r17
    1e44:	0f 91       	pop	r16
    1e46:	ff 90       	pop	r15
    1e48:	ef 90       	pop	r14
    1e4a:	df 90       	pop	r13
    1e4c:	cf 90       	pop	r12
    1e4e:	bf 90       	pop	r11
    1e50:	af 90       	pop	r10
    1e52:	9f 90       	pop	r9
    1e54:	8f 90       	pop	r8
    1e56:	7f 90       	pop	r7
    1e58:	6f 90       	pop	r6
    1e5a:	5f 90       	pop	r5
    1e5c:	4f 90       	pop	r4
    1e5e:	3f 90       	pop	r3
    1e60:	2f 90       	pop	r2
    1e62:	08 95       	ret

00001e64 <PICC_IsNewCardPresent>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 *
 * @return bool
 */
bool PICC_IsNewCardPresent() {
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <PICC_IsNewCardPresent+0x6>
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    1e6e:	82 e0       	ldi	r24, 0x02	; 2
    1e70:	8b 83       	std	Y+3, r24	; 0x03
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
    1e72:	be 01       	movw	r22, r28
    1e74:	6d 5f       	subi	r22, 0xFD	; 253
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	ce 01       	movw	r24, r28
    1e7a:	01 96       	adiw	r24, 0x01	; 1
    1e7c:	2f de       	rcall	.-930    	; 0x1adc <PICC_RequestA>
	return (result == STATUS_OK || result == STATUS_COLLISION);
    1e7e:	98 2f       	mov	r25, r24
    1e80:	9d 7f       	andi	r25, 0xFD	; 253
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	91 30       	cpi	r25, 0x01	; 1
    1e86:	09 f0       	breq	.+2      	; 0x1e8a <PICC_IsNewCardPresent+0x26>
    1e88:	80 e0       	ldi	r24, 0x00	; 0
}
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	df 91       	pop	r29
    1e92:	cf 91       	pop	r28
    1e94:	08 95       	ret

00001e96 <PICC_ReadCardSerial>:
 * The read UID is available in the class variable uid.
 *
 * @return bool
 */
bool PICC_ReadCardSerial(Uid* uid) {
	byte result = PICC_Select(uid, 0);
    1e96:	60 e0       	ldi	r22, 0x00	; 0
    1e98:	26 de       	rcall	.-948    	; 0x1ae6 <PICC_Select>
	return (result == STATUS_OK);
    1e9a:	91 e0       	ldi	r25, 0x01	; 1
    1e9c:	81 30       	cpi	r24, 0x01	; 1
    1e9e:	09 f0       	breq	.+2      	; 0x1ea2 <PICC_ReadCardSerial+0xc>
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
}
    1ea2:	89 2f       	mov	r24, r25
    1ea4:	08 95       	ret

00001ea6 <spi_init>:
words and MSB first.
@param[in]	fdiv		Baudrate prescaler, F_CPU dependent
*/
void spi_init(uint8_t fdiv)
{
	if( SPCR0 & _BV(SPE0) ) return;
    1ea6:	0c b4       	in	r0, 0x2c	; 44
    1ea8:	06 fc       	sbrc	r0, 6
    1eaa:	0b c0       	rjmp	.+22     	; 0x1ec2 <spi_init+0x1c>
	#ifdef SPI_USE_CMT
	spi_mutex.ac = 0;
	#endif

	// make SCK, MOSI pins outputs and MISO an input
	SCK_DDR |= _BV(SCK_BIT);
    1eac:	21 9a       	sbi	0x04, 1	; 4
	MOSI_DDR |= _BV(MOSI_BIT);
    1eae:	22 9a       	sbi	0x04, 2	; 4
	MISO_DDR &= ~_BV(MISO_BIT);
    1eb0:	23 98       	cbi	0x04, 3	; 4

	// init SPI, MSB first, SCK low when idle
	SPCR0 = _BV(SPE0) | _BV(MSTR0) | (fdiv & 3);
    1eb2:	98 2f       	mov	r25, r24
    1eb4:	93 70       	andi	r25, 0x03	; 3
    1eb6:	90 65       	ori	r25, 0x50	; 80
    1eb8:	9c bd       	out	0x2c, r25	; 44
	SPSR0 = (fdiv >> 2) & 1;
    1eba:	82 fb       	bst	r24, 2
    1ebc:	88 27       	eor	r24, r24
    1ebe:	80 f9       	bld	r24, 0
    1ec0:	8d bd       	out	0x2d, r24	; 45
    1ec2:	08 95       	ret

00001ec4 <spi_rw>:
{
	#ifdef SPI_USE_CMT
	cmt_acquire(&spi_mutex);
	#endif

	SPCR0 |= _BV(MSTR0);
    1ec4:	9c b5       	in	r25, 0x2c	; 44
    1ec6:	90 61       	ori	r25, 0x10	; 16
    1ec8:	9c bd       	out	0x2c, r25	; 44
	SPDR0 = d;
    1eca:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR0 & _BV(SPIF0)) ) {
    1ecc:	0d b4       	in	r0, 0x2d	; 45
    1ece:	07 fe       	sbrs	r0, 7
    1ed0:	fd cf       	rjmp	.-6      	; 0x1ecc <spi_rw+0x8>
		#ifdef SPI_USE_CMT
		cmt_delay_ticks(0);
		#endif
	}
	d = SPDR0;
    1ed2:	8e b5       	in	r24, 0x2e	; 46
	#ifdef SPI_USE_CMT
	cmt_release(&spi_mutex);
	#endif

	return d;
}
    1ed4:	08 95       	ret

00001ed6 <__vector_24>:
// ------------------------------------------------------------------
// INTERRUPTS
// ------------------------------------------------------------------

ISR(SPI_STC_vect)
{
    1ed6:	1f 92       	push	r1
    1ed8:	0f 92       	push	r0
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	0f 92       	push	r0
    1ede:	11 24       	eor	r1, r1
//
}
    1ee0:	0f 90       	pop	r0
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	0f 90       	pop	r0
    1ee6:	1f 90       	pop	r1
    1ee8:	18 95       	reti

00001eea <cli_print_help>:
    }
}


void cli_print_help(const char *const *argv)
{
    1eea:	cf 92       	push	r12
    1eec:	df 92       	push	r13
    1eee:	ef 92       	push	r14
    1ef0:	ff 92       	push	r15
    1ef2:	0f 93       	push	r16
    1ef4:	1f 93       	push	r17
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
    (void) argv;
    printf_P(PSTR("\n"));
    1efa:	89 e5       	ldi	r24, 0x59	; 89
    1efc:	94 e0       	ldi	r25, 0x04	; 4
    1efe:	9f 93       	push	r25
    1f00:	8f 93       	push	r24
    1f02:	0e 94 e6 18 	call	0x31cc	; 0x31cc <printf_P>
    printf_P(PSTR(CLI_HELP_MSG));
    1f06:	82 e4       	ldi	r24, 0x42	; 66
    1f08:	94 e0       	ldi	r25, 0x04	; 4
    1f0a:	9f 93       	push	r25
    1f0c:	8f 93       	push	r24
    1f0e:	0e 94 e6 18 	call	0x31cc	; 0x31cc <printf_P>
    1f12:	ce ea       	ldi	r28, 0xAE	; 174
    1f14:	d2 e0       	ldi	r29, 0x02	; 2
    1f16:	0f 2e       	mov	r0, r31
    1f18:	fd ee       	ldi	r31, 0xED	; 237
    1f1a:	cf 2e       	mov	r12, r31
    1f1c:	f2 e0       	ldi	r31, 0x02	; 2
    1f1e:	df 2e       	mov	r13, r31
    1f20:	f0 2d       	mov	r31, r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0

    for (uint8_t i = 0; i < NUM_ELEMS(cli_cmds); i++)
    {
        printf_P(cli_cmds[i].cmd);
        printf_P(PSTR(" : "));
    1f2a:	0f 2e       	mov	r0, r31
    1f2c:	fe e3       	ldi	r31, 0x3E	; 62
    1f2e:	ef 2e       	mov	r14, r31
    1f30:	f4 e0       	ldi	r31, 0x04	; 4
    1f32:	ff 2e       	mov	r15, r31
    1f34:	f0 2d       	mov	r31, r0
        printf_P(cli_cmds[i].help);
        printf_P(PSTR("\n"));
    1f36:	0c e3       	ldi	r16, 0x3C	; 60
    1f38:	14 e0       	ldi	r17, 0x04	; 4
    printf_P(PSTR("\n"));
    printf_P(PSTR(CLI_HELP_MSG));

    for (uint8_t i = 0; i < NUM_ELEMS(cli_cmds); i++)
    {
        printf_P(cli_cmds[i].cmd);
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	8f 93       	push	r24
    1f3e:	88 81       	ld	r24, Y
    1f40:	8f 93       	push	r24
    1f42:	0e 94 e6 18 	call	0x31cc	; 0x31cc <printf_P>
        printf_P(PSTR(" : "));
    1f46:	ff 92       	push	r15
    1f48:	ef 92       	push	r14
    1f4a:	0e 94 e6 18 	call	0x31cc	; 0x31cc <printf_P>
        printf_P(cli_cmds[i].help);
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	8f 93       	push	r24
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	8f 93       	push	r24
    1f56:	0e 94 e6 18 	call	0x31cc	; 0x31cc <printf_P>
        printf_P(PSTR("\n"));
    1f5a:	1f 93       	push	r17
    1f5c:	0f 93       	push	r16
    1f5e:	0e 94 e6 18 	call	0x31cc	; 0x31cc <printf_P>
    1f62:	27 96       	adiw	r28, 0x07	; 7
{
    (void) argv;
    printf_P(PSTR("\n"));
    printf_P(PSTR(CLI_HELP_MSG));

    for (uint8_t i = 0; i < NUM_ELEMS(cli_cmds); i++)
    1f64:	8d b7       	in	r24, 0x3d	; 61
    1f66:	9e b7       	in	r25, 0x3e	; 62
    1f68:	08 96       	adiw	r24, 0x08	; 8
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	9e bf       	out	0x3e, r25	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	8d bf       	out	0x3d, r24	; 61
    1f74:	cc 15       	cp	r28, r12
    1f76:	dd 05       	cpc	r29, r13
    1f78:	01 f7       	brne	.-64     	; 0x1f3a <cli_print_help+0x50>
        printf_P(cli_cmds[i].cmd);
        printf_P(PSTR(" : "));
        printf_P(cli_cmds[i].help);
        printf_P(PSTR("\n"));
    }
}
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	ff 90       	pop	r15
    1f84:	ef 90       	pop	r14
    1f86:	df 90       	pop	r13
    1f88:	cf 90       	pop	r12
    1f8a:	08 95       	ret

00001f8c <cli_print_ascii_tbls>:
    print_version (stdout);
}


void cli_print_ascii_tbls(const char *const *argv)
{
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	c0 58       	subi	r28, 0x80	; 128
    1f9a:	d1 09       	sbc	r29, r1
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    (void) argv;
    putc('\n', stdout);
    1fa6:	09 ef       	ldi	r16, 0xF9	; 249
    1fa8:	15 e0       	ldi	r17, 0x05	; 5
    1faa:	f8 01       	movw	r30, r16
    1fac:	62 81       	ldd	r22, Z+2	; 0x02
    1fae:	73 81       	ldd	r23, Z+3	; 0x03
    1fb0:	8a e0       	ldi	r24, 0x0A	; 10
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	0e 94 9b 18 	call	0x3136	; 0x3136 <fputc>
    //Print ASCII table
    print_ascii_tbl(stdout);
    1fb8:	f8 01       	movw	r30, r16
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	0f d4       	rcall	.+2078   	; 0x27de <print_ascii_tbl>
    1fc0:	9e 01       	movw	r18, r28
    1fc2:	2f 5f       	subi	r18, 0xFF	; 255
    1fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc6:	ae 01       	movw	r20, r28
    1fc8:	4f 57       	subi	r20, 0x7F	; 127
    1fca:	5f 4f       	sbci	r21, 0xFF	; 255
    1fcc:	f9 01       	movw	r30, r18
    1fce:	8e 2f       	mov	r24, r30
    1fd0:	82 1b       	sub	r24, r18
    unsigned char charArray[128];

    for (unsigned char i = 0; i < sizeof(charArray); i++)
    {
        charArray[i] = i;
    1fd2:	81 93       	st	Z+, r24
    putc('\n', stdout);
    //Print ASCII table
    print_ascii_tbl(stdout);
    unsigned char charArray[128];

    for (unsigned char i = 0; i < sizeof(charArray); i++)
    1fd4:	e4 17       	cp	r30, r20
    1fd6:	f5 07       	cpc	r31, r21
    1fd8:	d1 f7       	brne	.-12     	; 0x1fce <cli_print_ascii_tbls+0x42>
    {
        charArray[i] = i;
    }

    print_for_human(stdout, charArray, 128);
    1fda:	40 e8       	ldi	r20, 0x80	; 128
    1fdc:	50 e0       	ldi	r21, 0x00	; 0
    1fde:	be 01       	movw	r22, r28
    1fe0:	6f 5f       	subi	r22, 0xFF	; 255
    1fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe4:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <__iob+0x2>
    1fe8:	90 91 fc 05 	lds	r25, 0x05FC	; 0x8005fc <__iob+0x3>
    1fec:	29 d4       	rcall	.+2130   	; 0x2840 <print_for_human>
}
    1fee:	c0 58       	subi	r28, 0x80	; 128
    1ff0:	df 4f       	sbci	r29, 0xFF	; 255
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	de bf       	out	0x3e, r29	; 62
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	cd bf       	out	0x3d, r28	; 61
    1ffc:	df 91       	pop	r29
    1ffe:	cf 91       	pop	r28
    2000:	1f 91       	pop	r17
    2002:	0f 91       	pop	r16
    2004:	08 95       	ret

00002006 <cli_handle_month>:


void cli_handle_month(const char *const *argv)
{
    2006:	af 92       	push	r10
    2008:	bf 92       	push	r11
    200a:	cf 92       	push	r12
    200c:	df 92       	push	r13
    200e:	ef 92       	push	r14
    2010:	ff 92       	push	r15
    2012:	0f 93       	push	r16
    2014:	1f 93       	push	r17
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	7c 01       	movw	r14, r24
    putc('\n', stdout);
    201c:	60 91 fb 05 	lds	r22, 0x05FB	; 0x8005fb <__iob+0x2>
    2020:	70 91 fc 05 	lds	r23, 0x05FC	; 0x8005fc <__iob+0x3>
    2024:	8a e0       	ldi	r24, 0x0A	; 10
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	0e 94 9b 18 	call	0x3136	; 0x3136 <fputc>
    // Clear second line of display. Then goto beginning of line on display
    lcd_clr(0X40, 16);
    202c:	60 e1       	ldi	r22, 0x10	; 16
    202e:	80 e4       	ldi	r24, 0x40	; 64
    2030:	0e 94 b0 07 	call	0xf60	; 0xf60 <lcd_clr>
    lcd_goto(0x40);
    2034:	80 e4       	ldi	r24, 0x40	; 64
    2036:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <lcd_goto>
    203a:	c4 ee       	ldi	r28, 0xE4	; 228
    203c:	d5 e0       	ldi	r29, 0x05	; 5
    203e:	00 ef       	ldi	r16, 0xF0	; 240
    2040:	15 e0       	ldi	r17, 0x05	; 5

    // Compare the counted input chars with same amount of chars in strings in months[] and in case of success output month to LCD.
    for (int i = 0; i < 6; i++) {
        if (!strncmp_P(argv[1], (PGM_P)pgm_read_word(&months[i]), strlen(argv[1])))
        {
            fprintf_P(stdout, PSTR("%S\n"), (PGM_P)pgm_read_word(&months[i]));
    2042:	0f 2e       	mov	r0, r31
    2044:	fb eb       	ldi	r31, 0xBB	; 187
    2046:	af 2e       	mov	r10, r31
    2048:	f3 e0       	ldi	r31, 0x03	; 3
    204a:	bf 2e       	mov	r11, r31
    204c:	f0 2d       	mov	r31, r0
    204e:	0f 2e       	mov	r0, r31
    2050:	f9 ef       	ldi	r31, 0xF9	; 249
    2052:	cf 2e       	mov	r12, r31
    2054:	f5 e0       	ldi	r31, 0x05	; 5
    2056:	df 2e       	mov	r13, r31
    2058:	f0 2d       	mov	r31, r0
    lcd_clr(0X40, 16);
    lcd_goto(0x40);

    // Compare the counted input chars with same amount of chars in strings in months[] and in case of success output month to LCD.
    for (int i = 0; i < 6; i++) {
        if (!strncmp_P(argv[1], (PGM_P)pgm_read_word(&months[i]), strlen(argv[1])))
    205a:	f7 01       	movw	r30, r14
    205c:	82 81       	ldd	r24, Z+2	; 0x02
    205e:	93 81       	ldd	r25, Z+3	; 0x03
    2060:	fc 01       	movw	r30, r24
    2062:	01 90       	ld	r0, Z+
    2064:	00 20       	and	r0, r0
    2066:	e9 f7       	brne	.-6      	; 0x2062 <cli_handle_month+0x5c>
    2068:	31 97       	sbiw	r30, 0x01	; 1
    206a:	af 01       	movw	r20, r30
    206c:	48 1b       	sub	r20, r24
    206e:	59 0b       	sbc	r21, r25
    2070:	fe 01       	movw	r30, r28
    2072:	65 91       	lpm	r22, Z+
    2074:	74 91       	lpm	r23, Z
    2076:	e4 d7       	rcall	.+4040   	; 0x3040 <strncmp_P>
    2078:	89 2b       	or	r24, r25
    207a:	e1 f4       	brne	.+56     	; 0x20b4 <cli_handle_month+0xae>
        {
            fprintf_P(stdout, PSTR("%S\n"), (PGM_P)pgm_read_word(&months[i]));
    207c:	fe 01       	movw	r30, r28
    207e:	85 91       	lpm	r24, Z+
    2080:	94 91       	lpm	r25, Z
    2082:	9f 93       	push	r25
    2084:	8f 93       	push	r24
    2086:	bf 92       	push	r11
    2088:	af 92       	push	r10
    208a:	f6 01       	movw	r30, r12
    208c:	83 81       	ldd	r24, Z+3	; 0x03
    208e:	8f 93       	push	r24
    2090:	82 81       	ldd	r24, Z+2	; 0x02
    2092:	8f 93       	push	r24
    2094:	0e 94 7f 18 	call	0x30fe	; 0x30fe <fprintf_P>
            // Output month(s) to display
            lcd_puts_P((PGM_P)pgm_read_word(&months[i]));
    2098:	fe 01       	movw	r30, r28
    209a:	85 91       	lpm	r24, Z+
    209c:	94 91       	lpm	r25, Z
    209e:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_puts_P>
            lcd_putc(' '); //Put space between months, if more than 1 matches
    20a2:	80 e2       	ldi	r24, 0x20	; 32
    20a4:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd_putc>
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	22 96       	adiw	r28, 0x02	; 2
    // Clear second line of display. Then goto beginning of line on display
    lcd_clr(0X40, 16);
    lcd_goto(0x40);

    // Compare the counted input chars with same amount of chars in strings in months[] and in case of success output month to LCD.
    for (int i = 0; i < 6; i++) {
    20b6:	c0 17       	cp	r28, r16
    20b8:	d1 07       	cpc	r29, r17
    20ba:	79 f6       	brne	.-98     	; 0x205a <cli_handle_month+0x54>
            // Output month(s) to display
            lcd_puts_P((PGM_P)pgm_read_word(&months[i]));
            lcd_putc(' '); //Put space between months, if more than 1 matches
        }
    }
}
    20bc:	df 91       	pop	r29
    20be:	cf 91       	pop	r28
    20c0:	1f 91       	pop	r17
    20c2:	0f 91       	pop	r16
    20c4:	ff 90       	pop	r15
    20c6:	ef 90       	pop	r14
    20c8:	df 90       	pop	r13
    20ca:	cf 90       	pop	r12
    20cc:	bf 90       	pop	r11
    20ce:	af 90       	pop	r10
    20d0:	08 95       	ret

000020d2 <cli_rfid_read>:
    printf_P(PSTR(CLI_ARGS_MSG));
}


void cli_rfid_read(const char *const *argv)
{
    20d2:	ef 92       	push	r14
    20d4:	ff 92       	push	r15
    20d6:	1f 93       	push	r17
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	2c 97       	sbiw	r28, 0x0c	; 12
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    (void) argv;
    Uid uid;
    Uid *uid_ptr = &uid;
    if (PICC_IsNewCardPresent())
    20ec:	bb de       	rcall	.-650    	; 0x1e64 <PICC_IsNewCardPresent>
    20ee:	88 23       	and	r24, r24
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <cli_rfid_read+0x22>
    20f2:	4e c0       	rjmp	.+156    	; 0x2190 <cli_rfid_read+0xbe>
    {
        printf(CARD_SELECTED_MSG);
    20f4:	86 e9       	ldi	r24, 0x96	; 150
    20f6:	92 e0       	ldi	r25, 0x02	; 2
    20f8:	9f 93       	push	r25
    20fa:	8f 93       	push	r24
    20fc:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <printf>
        PICC_ReadCardSerial(uid_ptr);
    2100:	ce 01       	movw	r24, r28
    2102:	01 96       	adiw	r24, 0x01	; 1
    2104:	c8 de       	rcall	.-624    	; 0x1e96 <PICC_ReadCardSerial>
        printf_P(PSTR(CARD_UID_SIZE_MSG), uid.size);
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	1f 92       	push	r1
    210a:	8f 93       	push	r24
    210c:	89 e3       	ldi	r24, 0x39	; 57
    210e:	93 e0       	ldi	r25, 0x03	; 3
    2110:	9f 93       	push	r25
    2112:	8f 93       	push	r24
    2114:	0e 94 e6 18 	call	0x31cc	; 0x31cc <printf_P>
        printf_P(PSTR(CARD_UID_SAK_MSG), uid.sak);
    2118:	8c 85       	ldd	r24, Y+12	; 0x0c
    211a:	1f 92       	push	r1
    211c:	8f 93       	push	r24
    211e:	88 e2       	ldi	r24, 0x28	; 40
    2120:	93 e0       	ldi	r25, 0x03	; 3
    2122:	9f 93       	push	r25
    2124:	8f 93       	push	r24
    2126:	0e 94 e6 18 	call	0x31cc	; 0x31cc <printf_P>
        printf_P(PSTR(CARD_UID_MSG));
    212a:	8d e1       	ldi	r24, 0x1D	; 29
    212c:	93 e0       	ldi	r25, 0x03	; 3
    212e:	9f 93       	push	r25
    2130:	8f 93       	push	r24
    2132:	0e 94 e6 18 	call	0x31cc	; 0x31cc <printf_P>

        for (uint8_t i = 0; i < uid.size; i++)
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	88 23       	and	r24, r24
    2144:	e1 f0       	breq	.+56     	; 0x217e <cli_rfid_read+0xac>
    2146:	10 e0       	ldi	r17, 0x00	; 0
        {
            printf("%02X", uid.uidByte[i]);
    2148:	0f 2e       	mov	r0, r31
    214a:	f6 ea       	ldi	r31, 0xA6	; 166
    214c:	ef 2e       	mov	r14, r31
    214e:	f2 e0       	ldi	r31, 0x02	; 2
    2150:	ff 2e       	mov	r15, r31
    2152:	f0 2d       	mov	r31, r0
    2154:	e2 e0       	ldi	r30, 0x02	; 2
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	ec 0f       	add	r30, r28
    215a:	fd 1f       	adc	r31, r29
    215c:	e1 0f       	add	r30, r17
    215e:	f1 1d       	adc	r31, r1
    2160:	80 81       	ld	r24, Z
    2162:	1f 92       	push	r1
    2164:	8f 93       	push	r24
    2166:	ff 92       	push	r15
    2168:	ef 92       	push	r14
    216a:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <printf>
        PICC_ReadCardSerial(uid_ptr);
        printf_P(PSTR(CARD_UID_SIZE_MSG), uid.size);
        printf_P(PSTR(CARD_UID_SAK_MSG), uid.sak);
        printf_P(PSTR(CARD_UID_MSG));

        for (uint8_t i = 0; i < uid.size; i++)
    216e:	1f 5f       	subi	r17, 0xFF	; 255
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	18 17       	cp	r17, r24
    217c:	58 f3       	brcs	.-42     	; 0x2154 <cli_rfid_read+0x82>
        {
            printf("%02X", uid.uidByte[i]);
        }

        printf_P(PSTR("\n"));
    217e:	8b e1       	ldi	r24, 0x1B	; 27
    2180:	93 e0       	ldi	r25, 0x03	; 3
    2182:	9f 93       	push	r25
    2184:	8f 93       	push	r24
    2186:	0e 94 e6 18 	call	0x31cc	; 0x31cc <printf_P>
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	08 c0       	rjmp	.+16     	; 0x21a0 <cli_rfid_read+0xce>
    }
    else
    {
        printf_P((PSTR(CARD_UNABLE_TO_SELECT_MSG)));
    2190:	82 e0       	ldi	r24, 0x02	; 2
    2192:	93 e0       	ldi	r25, 0x03	; 3
    2194:	9f 93       	push	r25
    2196:	8f 93       	push	r24
    2198:	0e 94 e6 18 	call	0x31cc	; 0x31cc <printf_P>
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    }
}
    21a0:	2c 96       	adiw	r28, 0x0c	; 12
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	df 91       	pop	r29
    21ae:	cf 91       	pop	r28
    21b0:	1f 91       	pop	r17
    21b2:	ff 90       	pop	r15
    21b4:	ef 90       	pop	r14
    21b6:	08 95       	ret

000021b8 <cli_rfid_add>:


void cli_rfid_add(const char *const *argv)
{
    21b8:	ef 92       	push	r14
    21ba:	ff 92       	push	r15
    21bc:	0f 93       	push	r16
    21be:	1f 93       	push	r17
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	6b 97       	sbiw	r28, 0x1b	; 27
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	8c 01       	movw	r16, r24
    (void) argv;
    Uid uid;
    card_t card;
    if (PICC_IsNewCardPresent())
    21d6:	46 de       	rcall	.-884    	; 0x1e64 <PICC_IsNewCardPresent>
    21d8:	88 23       	and	r24, r24
    21da:	11 f1       	breq	.+68     	; 0x2220 <__stack+0x21>
    {
        PICC_ReadCardSerial(&uid);
    21dc:	ce 01       	movw	r24, r28
    21de:	01 96       	adiw	r24, 0x01	; 1
    21e0:	5a de       	rcall	.-844    	; 0x1e96 <PICC_ReadCardSerial>
        card.uid_size = uid.size;
    21e2:	49 81       	ldd	r20, Y+1	; 0x01
    21e4:	4d 87       	std	Y+13, r20	; 0x0d
        memcpy(&card.uid, &uid.uidByte, uid.size);
    21e6:	50 e0       	ldi	r21, 0x00	; 0
    21e8:	be 01       	movw	r22, r28
    21ea:	6e 5f       	subi	r22, 0xFE	; 254
    21ec:	7f 4f       	sbci	r23, 0xFF	; 255
    21ee:	ce 01       	movw	r24, r28
    21f0:	0e 96       	adiw	r24, 0x0e	; 14
    21f2:	41 d7       	rcall	.+3714   	; 0x3076 <memcpy>
        char *user = malloc(strlen(argv[1]) + 1);
    21f4:	f8 01       	movw	r30, r16
    21f6:	e2 80       	ldd	r14, Z+2	; 0x02
    21f8:	f3 80       	ldd	r15, Z+3	; 0x03
    21fa:	f7 01       	movw	r30, r14
    21fc:	01 90       	ld	r0, Z+
    21fe:	00 20       	and	r0, r0
    2200:	e9 f7       	brne	.-6      	; 0x21fc <cli_rfid_add+0x44>
    2202:	cf 01       	movw	r24, r30
    2204:	8e 19       	sub	r24, r14
    2206:	9f 09       	sbc	r25, r15
    2208:	e1 d5       	rcall	.+3010   	; 0x2dcc <malloc>
    220a:	8c 01       	movw	r16, r24
        strcpy(user, argv[1]);
    220c:	b7 01       	movw	r22, r14
    220e:	61 d7       	rcall	.+3778   	; 0x30d2 <strcpy>
        card.user = user;
    2210:	19 8f       	std	Y+25, r17	; 0x19
    2212:	08 8f       	std	Y+24, r16	; 0x18
        rfid_add_card(&card);
    2214:	ce 01       	movw	r24, r28
    2216:	0d 96       	adiw	r24, 0x0d	; 13
    2218:	2e d4       	rcall	.+2140   	; 0x2a76 <rfid_add_card>
        free(user);
    221a:	c8 01       	movw	r24, r16
    221c:	6c d6       	rcall	.+3288   	; 0x2ef6 <free>
    221e:	07 c0       	rjmp	.+14     	; 0x222e <__stack+0x2f>
    }
    else
    {
        printf_P(PSTR(CARD_UNABLE_TO_SELECT_MSG));
    2220:	89 ee       	ldi	r24, 0xE9	; 233
    2222:	92 e0       	ldi	r25, 0x02	; 2
    2224:	9f 93       	push	r25
    2226:	8f 93       	push	r24
    2228:	d1 d7       	rcall	.+4002   	; 0x31cc <printf_P>
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    }
}
    222e:	6b 96       	adiw	r28, 0x1b	; 27
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	f8 94       	cli
    2234:	de bf       	out	0x3e, r29	; 62
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	cd bf       	out	0x3d, r28	; 61
    223a:	df 91       	pop	r29
    223c:	cf 91       	pop	r28
    223e:	1f 91       	pop	r17
    2240:	0f 91       	pop	r16
    2242:	ff 90       	pop	r15
    2244:	ef 90       	pop	r14
    2246:	08 95       	ret

00002248 <cli_rfid_remove>:


void cli_rfid_remove(const char *const *argv)
{
    (void) argv;
    rfid_remove_card_by_uid(argv[1]);
    2248:	fc 01       	movw	r30, r24
    224a:	82 81       	ldd	r24, Z+2	; 0x02
    224c:	93 81       	ldd	r25, Z+3	; 0x03
    224e:	7a c4       	rjmp	.+2292   	; 0x2b44 <rfid_remove_card_by_uid>
    2250:	08 95       	ret

00002252 <cli_rfid_print>:


void cli_rfid_print(const char *const *argv)
{
    (void) argv;
    rfid_print_card_list();
    2252:	b2 c3       	rjmp	.+1892   	; 0x29b8 <rfid_print_card_list>
    2254:	08 95       	ret

00002256 <cli_mem_stat>:
}


void cli_mem_stat(const char *const *argv)
{
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	1f 92       	push	r1
    2260:	1f 92       	push	r1
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    (void) argv;
    extern int __heap_start, *__brkval;
    int v;
    int space;
    static int prev_space;
    space = (int) &v - (__brkval == 0 ? (int) & __heap_start : (int) __brkval);
    2266:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <__brkval>
    226a:	90 91 f6 05 	lds	r25, 0x05F6	; 0x8005f6 <__brkval+0x1>
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	11 f4       	brne	.+4      	; 0x2276 <cli_mem_stat+0x20>
    2272:	8f ef       	ldi	r24, 0xFF	; 255
    2274:	95 e0       	ldi	r25, 0x05	; 5
    2276:	8e 01       	movw	r16, r28
    2278:	0f 5f       	subi	r16, 0xFF	; 255
    227a:	1f 4f       	sbci	r17, 0xFF	; 255
    227c:	08 1b       	sub	r16, r24
    227e:	19 0b       	sbc	r17, r25
    printf_P(PSTR(MEM_HEAPSTAT_MSG));
    2280:	87 ed       	ldi	r24, 0xD7	; 215
    2282:	92 e0       	ldi	r25, 0x02	; 2
    2284:	9f 93       	push	r25
    2286:	8f 93       	push	r24
    2288:	a1 d7       	rcall	.+3906   	; 0x31cc <printf_P>
    printf_P(PSTR(MEM_USEDMEM_MSG), getMemoryUsed());
    228a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <getMemoryUsed>
    228e:	9f 93       	push	r25
    2290:	8f 93       	push	r24
    2292:	8d ec       	ldi	r24, 0xCD	; 205
    2294:	92 e0       	ldi	r25, 0x02	; 2
    2296:	9f 93       	push	r25
    2298:	8f 93       	push	r24
    229a:	98 d7       	rcall	.+3888   	; 0x31cc <printf_P>
    printf_P(PSTR(MEM_FREEMEM_MSG), getFreeMemory());
    229c:	0e 94 d4 05 	call	0xba8	; 0xba8 <getFreeMemory>
    22a0:	9f 93       	push	r25
    22a2:	8f 93       	push	r24
    22a4:	83 ec       	ldi	r24, 0xC3	; 195
    22a6:	92 e0       	ldi	r25, 0x02	; 2
    22a8:	9f 93       	push	r25
    22aa:	8f 93       	push	r24
    22ac:	8f d7       	rcall	.+3870   	; 0x31cc <printf_P>
    printf_P(PSTR(MEM_SPACE_HEAP_STACK_MSG));
    22ae:	83 ea       	ldi	r24, 0xA3	; 163
    22b0:	92 e0       	ldi	r25, 0x02	; 2
    22b2:	9f 93       	push	r25
    22b4:	8f 93       	push	r24
    22b6:	8a d7       	rcall	.+3860   	; 0x31cc <printf_P>
    printf_P(PSTR(MEM_SPACE_CURRENT_MSG), space);
    22b8:	1f 93       	push	r17
    22ba:	0f 93       	push	r16
    22bc:	86 e9       	ldi	r24, 0x96	; 150
    22be:	92 e0       	ldi	r25, 0x02	; 2
    22c0:	9f 93       	push	r25
    22c2:	8f 93       	push	r24
    22c4:	83 d7       	rcall	.+3846   	; 0x31cc <printf_P>
    printf_P(PSTR(MEM_SPACE_PREV_MSG), prev_space);
    22c6:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <prev_space.2668+0x1>
    22ca:	8f 93       	push	r24
    22cc:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <prev_space.2668>
    22d0:	8f 93       	push	r24
    22d2:	89 e8       	ldi	r24, 0x89	; 137
    22d4:	92 e0       	ldi	r25, 0x02	; 2
    22d6:	9f 93       	push	r25
    22d8:	8f 93       	push	r24
    22da:	78 d7       	rcall	.+3824   	; 0x31cc <printf_P>
    printf_P(PSTR(MEM_SPACE_CHANGE_MSG), space - prev_space);
    22dc:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <prev_space.2668>
    22e0:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <prev_space.2668+0x1>
    22e4:	98 01       	movw	r18, r16
    22e6:	28 1b       	sub	r18, r24
    22e8:	39 0b       	sbc	r19, r25
    22ea:	c9 01       	movw	r24, r18
    22ec:	9f 93       	push	r25
    22ee:	2f 93       	push	r18
    22f0:	8c e7       	ldi	r24, 0x7C	; 124
    22f2:	92 e0       	ldi	r25, 0x02	; 2
    22f4:	9f 93       	push	r25
    22f6:	8f 93       	push	r24
    22f8:	69 d7       	rcall	.+3794   	; 0x31cc <printf_P>
    printf_P(PSTR(MEM_FREELIST_MSG));
    22fa:	81 e7       	ldi	r24, 0x71	; 113
    22fc:	92 e0       	ldi	r25, 0x02	; 2
    22fe:	9f 93       	push	r25
    2300:	8f 93       	push	r24
    2302:	64 d7       	rcall	.+3784   	; 0x31cc <printf_P>
    printf_P(PSTR(MEM_FREELIST_SIZE_MSG), getFreeListSize());
    2304:	0e 94 15 06 	call	0xc2a	; 0xc2a <getFreeListSize>
    2308:	9f 93       	push	r25
    230a:	8f 93       	push	r24
    230c:	8e e5       	ldi	r24, 0x5E	; 94
    230e:	92 e0       	ldi	r25, 0x02	; 2
    2310:	9f 93       	push	r25
    2312:	8f 93       	push	r24
    2314:	5b d7       	rcall	.+3766   	; 0x31cc <printf_P>
    printf_P(PSTR(MEM_FREELIST_BLOCKS_MSG),
    2316:	0e 94 03 06 	call	0xc06	; 0xc06 <getNumberOfBlocksInFreeList>
    231a:	9f 93       	push	r25
    231c:	8f 93       	push	r24
    231e:	8f e3       	ldi	r24, 0x3F	; 63
    2320:	92 e0       	ldi	r25, 0x02	; 2
    2322:	9f 93       	push	r25
    2324:	8f 93       	push	r24
    2326:	52 d7       	rcall	.+3748   	; 0x31cc <printf_P>
    getNumberOfBlocksInFreeList());
    printf_P(PSTR(MEM_LARGEST_BLOCK_MSG), getLargestBlockInFreeList());
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <getLargestBlockInFreeList>
    2336:	9f 93       	push	r25
    2338:	8f 93       	push	r24
    233a:	80 e2       	ldi	r24, 0x20	; 32
    233c:	92 e0       	ldi	r25, 0x02	; 2
    233e:	9f 93       	push	r25
    2340:	8f 93       	push	r24
    2342:	44 d7       	rcall	.+3720   	; 0x31cc <printf_P>
    printf_P(PSTR(MEM_LARGEST_FL_BLOCK_MSG),
    2344:	0e 94 4e 06 	call	0xc9c	; 0xc9c <getLargestAvailableMemoryBlock>
    2348:	9f 93       	push	r25
    234a:	8f 93       	push	r24
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	92 e0       	ldi	r25, 0x02	; 2
    2350:	9f 93       	push	r25
    2352:	8f 93       	push	r24
    2354:	3b d7       	rcall	.+3702   	; 0x31cc <printf_P>
    getLargestAvailableMemoryBlock());
    printf_P(PSTR(MEM_LARGEST_ALL_BLOCK_MSG), getLargestNonFreeListBlock());
    2356:	0e 94 2c 06 	call	0xc58	; 0xc58 <getLargestNonFreeListBlock>
    235a:	9f 93       	push	r25
    235c:	8f 93       	push	r24
    235e:	82 ee       	ldi	r24, 0xE2	; 226
    2360:	91 e0       	ldi	r25, 0x01	; 1
    2362:	9f 93       	push	r25
    2364:	8f 93       	push	r24
    2366:	32 d7       	rcall	.+3684   	; 0x31cc <printf_P>
    prev_space = space;
    2368:	10 93 71 05 	sts	0x0571, r17	; 0x800571 <prev_space.2668+0x1>
    236c:	00 93 70 05 	sts	0x0570, r16	; 0x800570 <prev_space.2668>
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
}
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	df 91       	pop	r29
    2380:	cf 91       	pop	r28
    2382:	1f 91       	pop	r17
    2384:	0f 91       	pop	r16
    2386:	08 95       	ret

00002388 <cli_print>:
};


void cli_print(const char *str)
{
    printf("%s", str);
    2388:	9f 93       	push	r25
    238a:	8f 93       	push	r24
    238c:	8b ea       	ldi	r24, 0xAB	; 171
    238e:	92 e0       	ldi	r25, 0x02	; 2
    2390:	9f 93       	push	r25
    2392:	8f 93       	push	r24
    2394:	08 d7       	rcall	.+3600   	; 0x31a6 <printf>
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	08 95       	ret

000023a0 <cli_get_char>:
}


char cli_get_char(void)
{
    if (uart0_peek() != UART_NO_DATA)
    23a0:	0e 94 df 04 	call	0x9be	; 0x9be <uart0_peek>
    23a4:	81 15       	cp	r24, r1
    23a6:	91 40       	sbci	r25, 0x01	; 1
    23a8:	19 f0       	breq	.+6      	; 0x23b0 <cli_get_char+0x10>
    {
        return uart0_getc() & UART_STATUS_MASK;
    23aa:	0c 94 c2 04 	jmp	0x984	; 0x984 <uart0_getc>
    23ae:	08 95       	ret
    }
    else
    {
        return 0x00;
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    23b2:	08 95       	ret

000023b4 <print_version>:
    }
}


void print_version(FILE *stream)
{
    23b4:	cf 93       	push	r28
    23b6:	df 93       	push	r29
    23b8:	c8 2f       	mov	r28, r24
    23ba:	d9 2f       	mov	r29, r25
    //Print version to UART3 console
    fprintf_P(stream, PSTR(VER_FW),
    23bc:	83 e3       	ldi	r24, 0x33	; 51
    23be:	94 e0       	ldi	r25, 0x04	; 4
    23c0:	9f 93       	push	r25
    23c2:	8f 93       	push	r24
    23c4:	87 e2       	ldi	r24, 0x27	; 39
    23c6:	94 e0       	ldi	r25, 0x04	; 4
    23c8:	9f 93       	push	r25
    23ca:	8f 93       	push	r24
    23cc:	81 e1       	ldi	r24, 0x11	; 17
    23ce:	94 e0       	ldi	r25, 0x04	; 4
    23d0:	9f 93       	push	r25
    23d2:	8f 93       	push	r24
    23d4:	84 ef       	ldi	r24, 0xF4	; 244
    23d6:	93 e0       	ldi	r25, 0x03	; 3
    23d8:	9f 93       	push	r25
    23da:	8f 93       	push	r24
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	8e d6       	rcall	.+3356   	; 0x30fe <fprintf_P>
    PSTR("GIT VERSION! Replace!"/*GIT_DESCR*/), PSTR(__DATE__), PSTR(__TIME__));
    fprintf_P(stream, PSTR(VER_LIBC " " VER_GCC "\n"),
    23e2:	8e ee       	ldi	r24, 0xEE	; 238
    23e4:	93 e0       	ldi	r25, 0x03	; 3
    23e6:	9f 93       	push	r25
    23e8:	8f 93       	push	r24
    23ea:	81 ec       	ldi	r24, 0xC1	; 193
    23ec:	93 e0       	ldi	r25, 0x03	; 3
    23ee:	9f 93       	push	r25
    23f0:	8f 93       	push	r24
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	83 d6       	rcall	.+3334   	; 0x30fe <fprintf_P>
    23f8:	8d b7       	in	r24, 0x3d	; 61
    23fa:	9e b7       	in	r25, 0x3e	; 62
    23fc:	40 96       	adiw	r24, 0x10	; 16
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	9e bf       	out	0x3e, r25	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	8d bf       	out	0x3d, r24	; 61
    PSTR(__AVR_LIBC_VERSION_STRING__));
}
    2408:	df 91       	pop	r29
    240a:	cf 91       	pop	r28
    240c:	08 95       	ret

0000240e <cli_print_ver>:


void cli_print_ver(const char *const *argv)
{
    (void) argv;
    printf_P(PSTR("\n"));
    240e:	8f eb       	ldi	r24, 0xBF	; 191
    2410:	93 e0       	ldi	r25, 0x03	; 3
    2412:	9f 93       	push	r25
    2414:	8f 93       	push	r24
    2416:	da d6       	rcall	.+3508   	; 0x31cc <printf_P>
    print_version (stdout);
    2418:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <__iob+0x2>
    241c:	90 91 fc 05 	lds	r25, 0x05FC	; 0x8005fc <__iob+0x3>
    2420:	c9 df       	rcall	.-110    	; 0x23b4 <print_version>
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	08 95       	ret

00002428 <cli_print_cmd_error>:
}


void cli_print_cmd_error(void)
{
    printf_P(PSTR("\n"));
    2428:	89 eb       	ldi	r24, 0xB9	; 185
    242a:	93 e0       	ldi	r25, 0x03	; 3
    242c:	9f 93       	push	r25
    242e:	8f 93       	push	r24
    2430:	cd d6       	rcall	.+3482   	; 0x31cc <printf_P>
    printf_P(PSTR(CLI_MISSING_CMD_MSG));
    2432:	87 e8       	ldi	r24, 0x87	; 135
    2434:	93 e0       	ldi	r25, 0x03	; 3
    2436:	9f 93       	push	r25
    2438:	8f 93       	push	r24
    243a:	c8 d6       	rcall	.+3472   	; 0x31cc <printf_P>
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	08 95       	ret

00002446 <cli_print_cmd_arg_error>:
}


void cli_print_cmd_arg_error(void)
{
    printf_P(PSTR("\n"));
    2446:	85 e8       	ldi	r24, 0x85	; 133
    2448:	93 e0       	ldi	r25, 0x03	; 3
    244a:	9f 93       	push	r25
    244c:	8f 93       	push	r24
    244e:	be d6       	rcall	.+3452   	; 0x31cc <printf_P>
    printf_P(PSTR(CLI_ARGS_MSG));
    2450:	8c e4       	ldi	r24, 0x4C	; 76
    2452:	93 e0       	ldi	r25, 0x03	; 3
    2454:	9f 93       	push	r25
    2456:	8f 93       	push	r24
    2458:	b9 d6       	rcall	.+3442   	; 0x31cc <printf_P>
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	08 95       	ret

00002464 <cli_execute>:
    prev_space = space;
}


int cli_execute(int argc, const char *const *argv)
{
    2464:	8f 92       	push	r8
    2466:	9f 92       	push	r9
    2468:	af 92       	push	r10
    246a:	bf 92       	push	r11
    246c:	cf 92       	push	r12
    246e:	df 92       	push	r13
    2470:	ef 92       	push	r14
    2472:	ff 92       	push	r15
    2474:	0f 93       	push	r16
    2476:	1f 93       	push	r17
    2478:	cf 93       	push	r28
    247a:	df 93       	push	r29
    247c:	5c 01       	movw	r10, r24
    247e:	6b 01       	movw	r12, r22

    for (uint8_t i = 0; i < NUM_ELEMS(cli_cmds); i++)
    {
        if (!strcmp_P(argv[0], cli_cmds[i].cmd))
    2480:	fb 01       	movw	r30, r22
    2482:	00 81       	ld	r16, Z
    2484:	11 81       	ldd	r17, Z+1	; 0x01
    2486:	0f 2e       	mov	r0, r31
    2488:	fe ea       	ldi	r31, 0xAE	; 174
    248a:	8f 2e       	mov	r8, r31
    248c:	f2 e0       	ldi	r31, 0x02	; 2
    248e:	9f 2e       	mov	r9, r31
    2490:	f0 2d       	mov	r31, r0
    2492:	c0 e0       	ldi	r28, 0x00	; 0
    2494:	d0 e0       	ldi	r29, 0x00	; 0
    2496:	f4 01       	movw	r30, r8
    2498:	60 81       	ld	r22, Z
    249a:	71 81       	ldd	r23, Z+1	; 0x01
    249c:	c8 01       	movw	r24, r16
    249e:	c7 d5       	rcall	.+2958   	; 0x302e <strcmp_P>
    24a0:	89 2b       	or	r24, r25
    24a2:	31 f5       	brne	.+76     	; 0x24f0 <cli_execute+0x8c>
        {
            // Test do we have correct arguments to run command
            // Function arguments count shall be defined in struct
            if ((argc - 1) != cli_cmds[i].func_argc)
    24a4:	f1 e0       	ldi	r31, 0x01	; 1
    24a6:	af 1a       	sub	r10, r31
    24a8:	b1 08       	sbc	r11, r1
    24aa:	fe 01       	movw	r30, r28
    24ac:	ee 0f       	add	r30, r30
    24ae:	ff 1f       	adc	r31, r31
    24b0:	ee 0f       	add	r30, r30
    24b2:	ff 1f       	adc	r31, r31
    24b4:	ee 0f       	add	r30, r30
    24b6:	ff 1f       	adc	r31, r31
    24b8:	ec 1b       	sub	r30, r28
    24ba:	fd 0b       	sbc	r31, r29
    24bc:	e2 55       	subi	r30, 0x52	; 82
    24be:	fd 4f       	sbci	r31, 0xFD	; 253
    24c0:	86 81       	ldd	r24, Z+6	; 0x06
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	a8 16       	cp	r10, r24
    24c6:	b9 06       	cpc	r11, r25
    24c8:	11 f0       	breq	.+4      	; 0x24ce <cli_execute+0x6a>
            {
                cli_print_cmd_arg_error();
    24ca:	bd df       	rcall	.-134    	; 0x2446 <cli_print_cmd_arg_error>
                return 0;
    24cc:	19 c0       	rjmp	.+50     	; 0x2500 <cli_execute+0x9c>
            }

            // Hand argv over to function pointer,
            // cross fingers and hope that function handles it properly
            cli_cmds[i].func_p (argv);
    24ce:	fe 01       	movw	r30, r28
    24d0:	ee 0f       	add	r30, r30
    24d2:	ff 1f       	adc	r31, r31
    24d4:	ee 0f       	add	r30, r30
    24d6:	ff 1f       	adc	r31, r31
    24d8:	ee 0f       	add	r30, r30
    24da:	ff 1f       	adc	r31, r31
    24dc:	ec 1b       	sub	r30, r28
    24de:	fd 0b       	sbc	r31, r29
    24e0:	e2 55       	subi	r30, 0x52	; 82
    24e2:	fd 4f       	sbci	r31, 0xFD	; 253
    24e4:	04 80       	ldd	r0, Z+4	; 0x04
    24e6:	f5 81       	ldd	r31, Z+5	; 0x05
    24e8:	e0 2d       	mov	r30, r0
    24ea:	c6 01       	movw	r24, r12
    24ec:	19 95       	eicall
            return 0;
    24ee:	08 c0       	rjmp	.+16     	; 0x2500 <cli_execute+0x9c>
    24f0:	21 96       	adiw	r28, 0x01	; 1
    24f2:	87 e0       	ldi	r24, 0x07	; 7
    24f4:	88 0e       	add	r8, r24
    24f6:	91 1c       	adc	r9, r1


int cli_execute(int argc, const char *const *argv)
{

    for (uint8_t i = 0; i < NUM_ELEMS(cli_cmds); i++)
    24f8:	c9 30       	cpi	r28, 0x09	; 9
    24fa:	d1 05       	cpc	r29, r1
    24fc:	61 f6       	brne	.-104    	; 0x2496 <cli_execute+0x32>
            cli_cmds[i].func_p (argv);
            return 0;
        }
    }

    cli_print_cmd_error();
    24fe:	94 df       	rcall	.-216    	; 0x2428 <cli_print_cmd_error>
    return 0;
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	1f 91       	pop	r17
    250a:	0f 91       	pop	r16
    250c:	ff 90       	pop	r15
    250e:	ef 90       	pop	r14
    2510:	df 90       	pop	r13
    2512:	cf 90       	pop	r12
    2514:	bf 90       	pop	r11
    2516:	af 90       	pop	r10
    2518:	9f 90       	pop	r9
    251a:	8f 90       	pop	r8
    251c:	08 95       	ret

0000251e <main>:
    }
}


void main (void)
{
    251e:	cf 93       	push	r28
    2520:	df 93       	push	r29
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	6b 97       	sbiw	r28, 0x1b	; 27
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61


static inline void initialize_io()
{
    /* Set pin 3 of PORTA for output */
    DDRA |= _BV(DDA3);
    2532:	0b 9a       	sbi	0x01, 3	; 1
    /* Init in/out console in UART0*/
    uart0_init(UART_BAUD_SELECT(BAUD, F_CPU));
    2534:	87 e6       	ldi	r24, 0x67	; 103
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	0e 94 a9 04 	call	0x952	; 0x952 <uart0_init>
    stdin = stdout = &uart0_io;
    253c:	09 ef       	ldi	r16, 0xF9	; 249
    253e:	15 e0       	ldi	r17, 0x05	; 5
    2540:	88 e1       	ldi	r24, 0x18	; 24
    2542:	92 e0       	ldi	r25, 0x02	; 2
    2544:	f8 01       	movw	r30, r16
    2546:	93 83       	std	Z+3, r25	; 0x03
    2548:	82 83       	std	Z+2, r24	; 0x02
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	80 83       	st	Z, r24
    /* Init error console in UART3*/
    uart3_init(UART_BAUD_SELECT(BAUD, F_CPU));
    254e:	87 e6       	ldi	r24, 0x67	; 103
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <uart3_init>
    stderr = &uart3_out;
    2556:	8a e0       	ldi	r24, 0x0A	; 10
    2558:	92 e0       	ldi	r25, 0x02	; 2
    255a:	f8 01       	movw	r30, r16
    255c:	95 83       	std	Z+5, r25	; 0x05
    255e:	84 83       	std	Z+4, r24	; 0x04
microrl_t *prl = &rl;


static inline void init_system_clock(void)
{
    TCCR5A = 0; // Clear control register A
    2560:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    TCCR5B = 0; // Clear control register B
    2564:	e1 e2       	ldi	r30, 0x21	; 33
    2566:	f1 e0       	ldi	r31, 0x01	; 1
    2568:	10 82       	st	Z, r1
    TCCR5B |= _BV(WGM52) | _BV(CS52); // CTC and fCPU/256
    256a:	80 81       	ld	r24, Z
    256c:	8c 60       	ori	r24, 0x0C	; 12
    256e:	80 83       	st	Z, r24
    OCR5A = 62549; // 1 s
    2570:	85 e5       	ldi	r24, 0x55	; 85
    2572:	94 ef       	ldi	r25, 0xF4	; 244
    2574:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    2578:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    TIMSK5 |= _BV(OCIE5A); // Output Compare A match Interrupt Enable
    257c:	e3 e7       	ldi	r30, 0x73	; 115
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	82 60       	ori	r24, 0x02	; 2
    2584:	80 83       	st	Z, r24


static inline void initialize_lcd()
{
    /* Initialize display and clear screen */
    lcd_init();
    2586:	0e 94 1b 07 	call	0xe36	; 0xe36 <lcd_init>
    lcd_clrscr();
    258a:	0e 94 f5 06 	call	0xdea	; 0xdea <lcd_clrscr>


static inline void initialize_interrupts()
{
    /* System Enable Interrupts */
    sei();
    258e:	78 94       	sei


static inline void initialize_rfid(void)
{
    //Initialize RFID reader HW
    MFRC522_init();
    2590:	26 d8       	rcall	.-4020   	; 0x15de <MFRC522_init>
    PCD_Init();
    2592:	3f d9       	rcall	.-3458   	; 0x1812 <PCD_Init>
}


static inline void print_console (void)
{
    print_version(stderr);
    2594:	f8 01       	movw	r30, r16
    2596:	84 81       	ldd	r24, Z+4	; 0x04
    2598:	95 81       	ldd	r25, Z+5	; 0x05
    259a:	0c df       	rcall	.-488    	; 0x23b4 <print_version>
    //print student name
    fprintf_P(stdout, PSTR(STUD_NAME));
    259c:	8d eb       	ldi	r24, 0xBD	; 189
    259e:	96 e0       	ldi	r25, 0x06	; 6
    25a0:	9f 93       	push	r25
    25a2:	8f 93       	push	r24
    25a4:	f8 01       	movw	r30, r16
    25a6:	83 81       	ldd	r24, Z+3	; 0x03
    25a8:	8f 93       	push	r24
    25aa:	82 81       	ldd	r24, Z+2	; 0x02
    25ac:	8f 93       	push	r24
    25ae:	a7 d5       	rcall	.+2894   	; 0x30fe <fprintf_P>
    fputc('\n', stdout); // Add a new line to the uart printout
    25b0:	f8 01       	movw	r30, r16
    25b2:	62 81       	ldd	r22, Z+2	; 0x02
    25b4:	73 81       	ldd	r23, Z+3	; 0x03
    25b6:	8a e0       	ldi	r24, 0x0A	; 10
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	bd d5       	rcall	.+2938   	; 0x3136 <fputc>
    fprintf_P(stdout, PSTR(CLI_START_MSG));
    25bc:	86 e3       	ldi	r24, 0x36	; 54
    25be:	96 e0       	ldi	r25, 0x06	; 6
    25c0:	9f 93       	push	r25
    25c2:	8f 93       	push	r24
    25c4:	f8 01       	movw	r30, r16
    25c6:	83 81       	ldd	r24, Z+3	; 0x03
    25c8:	8f 93       	push	r24
    25ca:	82 81       	ldd	r24, Z+2	; 0x02
    25cc:	8f 93       	push	r24
    25ce:	97 d5       	rcall	.+2862   	; 0x30fe <fprintf_P>
    lcd_puts_P(PSTR(STUD_NAME));
    25d0:	85 e2       	ldi	r24, 0x25	; 37
    25d2:	96 e0       	ldi	r25, 0x06	; 6
    25d4:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_puts_P>
    fputc('\n', stdout); // Add a new line to the uart printout
    25d8:	f8 01       	movw	r30, r16
    25da:	62 81       	ldd	r22, Z+2	; 0x02
    25dc:	73 81       	ldd	r23, Z+3	; 0x03
    25de:	8a e0       	ldi	r24, 0x0A	; 10
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	a9 d5       	rcall	.+2898   	; 0x3136 <fputc>


static inline void start_cli(void)
{
    // Call init with ptr to microrl instance and print callback
    microrl_init (prl, cli_print);
    25e4:	64 ec       	ldi	r22, 0xC4	; 196
    25e6:	71 e1       	ldi	r23, 0x11	; 17
    25e8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <prl>
    25ec:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <prl+0x1>
    25f0:	0e 94 0b 09 	call	0x1216	; 0x1216 <microrl_init>
    // Set callback for execute
    microrl_set_execute_callback (prl, cli_execute);
    25f4:	62 e3       	ldi	r22, 0x32	; 50
    25f6:	72 e1       	ldi	r23, 0x12	; 18
    25f8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <prl>
    25fc:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <prl+0x1>
    2600:	0e 94 32 09 	call	0x1264	; 0x1264 <microrl_set_execute_callback>
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
        system_time_copy = system_time;
    }

    if (current_time != system_time_copy) {
        /* Toggle led */
        PORTA ^= _BV(PORTA3);
    260e:	68 94       	set
    2610:	99 24       	eor	r9, r9
    2612:	93 f8       	bld	r9, 3
        /* Printout system uptime */
        fprintf_P(stderr, PSTR(LBL_UPTIME ": %lu s\n"), system_time_copy);
    2614:	0f 2e       	mov	r0, r31
    2616:	f6 e1       	ldi	r31, 0x16	; 22
    2618:	af 2e       	mov	r10, r31
    261a:	f6 e0       	ldi	r31, 0x06	; 6
    261c:	bf 2e       	mov	r11, r31
    261e:	f0 2d       	mov	r31, r0
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2620:	f8 94       	cli
{
    static uint32_t current_time;
    uint32_t system_time_copy;
    /*Copy of system_time using atomic block*/
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
        system_time_copy = system_time;
    2622:	c0 90 f1 05 	lds	r12, 0x05F1	; 0x8005f1 <system_time>
    2626:	d0 90 f2 05 	lds	r13, 0x05F2	; 0x8005f2 <system_time+0x1>
    262a:	e0 90 f3 05 	lds	r14, 0x05F3	; 0x8005f3 <system_time+0x2>
    262e:	f0 90 f4 05 	lds	r15, 0x05F4	; 0x8005f4 <system_time+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    2632:	78 94       	sei
    }

    if (current_time != system_time_copy) {
    2634:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <current_time.2463>
    2638:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <current_time.2463+0x1>
    263c:	a0 91 7c 05 	lds	r26, 0x057C	; 0x80057c <current_time.2463+0x2>
    2640:	b0 91 7d 05 	lds	r27, 0x057D	; 0x80057d <current_time.2463+0x3>
    2644:	c8 16       	cp	r12, r24
    2646:	d9 06       	cpc	r13, r25
    2648:	ea 06       	cpc	r14, r26
    264a:	fb 06       	cpc	r15, r27
    264c:	a1 f0       	breq	.+40     	; 0x2676 <main+0x158>
        /* Toggle led */
        PORTA ^= _BV(PORTA3);
    264e:	82 b1       	in	r24, 0x02	; 2
    2650:	89 25       	eor	r24, r9
    2652:	82 b9       	out	0x02, r24	; 2
        /* Printout system uptime */
        fprintf_P(stderr, PSTR(LBL_UPTIME ": %lu s\n"), system_time_copy);
    2654:	ff 92       	push	r15
    2656:	ef 92       	push	r14
    2658:	df 92       	push	r13
    265a:	cf 92       	push	r12
    265c:	bf 92       	push	r11
    265e:	af 92       	push	r10
    2660:	f8 01       	movw	r30, r16
    2662:	85 81       	ldd	r24, Z+5	; 0x05
    2664:	8f 93       	push	r24
    2666:	84 81       	ldd	r24, Z+4	; 0x04
    2668:	8f 93       	push	r24
    266a:	49 d5       	rcall	.+2706   	; 0x30fe <fprintf_P>
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    }

    current_time = system_time_copy;
    2676:	c0 92 7a 05 	sts	0x057A, r12	; 0x80057a <current_time.2463>
    267a:	d0 92 7b 05 	sts	0x057B, r13	; 0x80057b <current_time.2463+0x1>
    267e:	e0 92 7c 05 	sts	0x057C, r14	; 0x80057c <current_time.2463+0x2>
    2682:	f0 92 7d 05 	sts	0x057D, r15	; 0x80057d <current_time.2463+0x3>
    start_cli();

    while (1) {
        heartbeat();
        // CLI commands are handled in cli_execute()
        microrl_insert_char(prl, cli_get_char());
    2686:	8c de       	rcall	.-744    	; 0x23a0 <cli_get_char>
    2688:	68 2f       	mov	r22, r24
    268a:	70 e0       	ldi	r23, 0x00	; 0
    268c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <prl>
    2690:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <prl+0x1>
    2694:	0e 94 e6 09 	call	0x13cc	; 0x13cc <microrl_insert_char>

static inline void handle_door()
{
    Uid uid;
    card_t card;
    uint32_t time_cur = system_time;//time();
    2698:	40 90 f1 05 	lds	r4, 0x05F1	; 0x8005f1 <system_time>
    269c:	50 90 f2 05 	lds	r5, 0x05F2	; 0x8005f2 <system_time+0x1>
    26a0:	60 90 f3 05 	lds	r6, 0x05F3	; 0x8005f3 <system_time+0x2>
    26a4:	70 90 f4 05 	lds	r7, 0x05F4	; 0x8005f4 <system_time+0x3>
    static uint32_t message_start;
    static uint32_t door_open_start;
    if (PICC_IsNewCardPresent())
    26a8:	dd db       	rcall	.-2118   	; 0x1e64 <PICC_IsNewCardPresent>
    26aa:	88 23       	and	r24, r24
    26ac:	09 f4       	brne	.+2      	; 0x26b0 <main+0x192>
    26ae:	3e c0       	rjmp	.+124    	; 0x272c <main+0x20e>
    {
        PICC_ReadCardSerial(&uid);
    26b0:	ce 01       	movw	r24, r28
    26b2:	40 96       	adiw	r24, 0x10	; 16
    26b4:	f0 db       	rcall	.-2080   	; 0x1e96 <PICC_ReadCardSerial>
        card.uid_size = uid.size;
    26b6:	48 89       	ldd	r20, Y+16	; 0x10
    26b8:	49 83       	std	Y+1, r20	; 0x01
        memcpy(&card.uid, &uid.uidByte, uid.size);
    26ba:	50 e0       	ldi	r21, 0x00	; 0
    26bc:	be 01       	movw	r22, r28
    26be:	6f 5e       	subi	r22, 0xEF	; 239
    26c0:	7f 4f       	sbci	r23, 0xFF	; 255
    26c2:	ce 01       	movw	r24, r28
    26c4:	02 96       	adiw	r24, 0x02	; 2
    26c6:	d7 d4       	rcall	.+2478   	; 0x3076 <memcpy>
        card.user = NULL;
    26c8:	1d 86       	std	Y+13, r1	; 0x0d
    26ca:	1c 86       	std	Y+12, r1	; 0x0c
        card_t *found_card = rfid_find_card(&card);
    26cc:	ce 01       	movw	r24, r28
    26ce:	01 96       	adiw	r24, 0x01	; 1
    26d0:	ab d1       	rcall	.+854    	; 0x2a28 <rfid_find_card>
    26d2:	7c 01       	movw	r14, r24
        if (found_card)
    26d4:	89 2b       	or	r24, r25
    26d6:	71 f0       	breq	.+28     	; 0x26f4 <main+0x1d6>
        {
            lcd_clr(0X40, 16);
    26d8:	60 e1       	ldi	r22, 0x10	; 16
    26da:	80 e4       	ldi	r24, 0x40	; 64
    26dc:	0e 94 b0 07 	call	0xf60	; 0xf60 <lcd_clr>
            lcd_goto(0x40);
    26e0:	80 e4       	ldi	r24, 0x40	; 64
    26e2:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <lcd_goto>
            lcd_puts(found_card->user);
    26e6:	f7 01       	movw	r30, r14
    26e8:	83 85       	ldd	r24, Z+11	; 0x0b
    26ea:	94 85       	ldd	r25, Z+12	; 0x0c
    26ec:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <lcd_puts>

            DOOR_OPEN;
    26f0:	11 9a       	sbi	0x02, 1	; 2
    26f2:	0c c0       	rjmp	.+24     	; 0x270c <main+0x1ee>
        }
        else
        {
            DOOR_CLOSE;
    26f4:	11 98       	cbi	0x02, 1	; 2
            lcd_clr(0X40, 16);
    26f6:	60 e1       	ldi	r22, 0x10	; 16
    26f8:	80 e4       	ldi	r24, 0x40	; 64
    26fa:	0e 94 b0 07 	call	0xf60	; 0xf60 <lcd_clr>
            lcd_goto(0x40);
    26fe:	80 e4       	ldi	r24, 0x40	; 64
    2700:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <lcd_goto>
            lcd_puts_P(access_denied_msg);
    2704:	87 e9       	ldi	r24, 0x97	; 151
    2706:	94 e0       	ldi	r25, 0x04	; 4
    2708:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_puts_P>
        }
        door_open_start = time_cur;
    270c:	40 92 76 05 	sts	0x0576, r4	; 0x800576 <door_open_start.2478>
    2710:	50 92 77 05 	sts	0x0577, r5	; 0x800577 <door_open_start.2478+0x1>
    2714:	60 92 78 05 	sts	0x0578, r6	; 0x800578 <door_open_start.2478+0x2>
    2718:	70 92 79 05 	sts	0x0579, r7	; 0x800579 <door_open_start.2478+0x3>
        message_start = time_cur;
    271c:	40 92 72 05 	sts	0x0572, r4	; 0x800572 <message_start.2477>
    2720:	50 92 73 05 	sts	0x0573, r5	; 0x800573 <message_start.2477+0x1>
    2724:	60 92 74 05 	sts	0x0574, r6	; 0x800574 <message_start.2477+0x2>
    2728:	70 92 75 05 	sts	0x0575, r7	; 0x800575 <message_start.2477+0x3>
    }

    if ((message_start + 3) < time_cur)
    272c:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <message_start.2477>
    2730:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <message_start.2477+0x1>
    2734:	a0 91 74 05 	lds	r26, 0x0574	; 0x800574 <message_start.2477+0x2>
    2738:	b0 91 75 05 	lds	r27, 0x0575	; 0x800575 <message_start.2477+0x3>
    273c:	03 96       	adiw	r24, 0x03	; 3
    273e:	a1 1d       	adc	r26, r1
    2740:	b1 1d       	adc	r27, r1
    2742:	84 15       	cp	r24, r4
    2744:	95 05       	cpc	r25, r5
    2746:	a6 05       	cpc	r26, r6
    2748:	b7 05       	cpc	r27, r7
    274a:	88 f4       	brcc	.+34     	; 0x276e <main+0x250>
    {
        message_start = time_cur + 3;
    274c:	d3 01       	movw	r26, r6
    274e:	c2 01       	movw	r24, r4
    2750:	03 96       	adiw	r24, 0x03	; 3
    2752:	a1 1d       	adc	r26, r1
    2754:	b1 1d       	adc	r27, r1
    2756:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <message_start.2477>
    275a:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <message_start.2477+0x1>
    275e:	a0 93 74 05 	sts	0x0574, r26	; 0x800574 <message_start.2477+0x2>
    2762:	b0 93 75 05 	sts	0x0575, r27	; 0x800575 <message_start.2477+0x3>
        lcd_clr(0X40, 16);
    2766:	60 e1       	ldi	r22, 0x10	; 16
    2768:	80 e4       	ldi	r24, 0x40	; 64
    276a:	0e 94 b0 07 	call	0xf60	; 0xf60 <lcd_clr>
    }

    if ((door_open_start + 2) < time_cur)
    276e:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <door_open_start.2478>
    2772:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <door_open_start.2478+0x1>
    2776:	a0 91 78 05 	lds	r26, 0x0578	; 0x800578 <door_open_start.2478+0x2>
    277a:	b0 91 79 05 	lds	r27, 0x0579	; 0x800579 <door_open_start.2478+0x3>
    277e:	02 96       	adiw	r24, 0x02	; 2
    2780:	a1 1d       	adc	r26, r1
    2782:	b1 1d       	adc	r27, r1
    2784:	84 15       	cp	r24, r4
    2786:	95 05       	cpc	r25, r5
    2788:	a6 05       	cpc	r26, r6
    278a:	b7 05       	cpc	r27, r7
    278c:	08 f0       	brcs	.+2      	; 0x2790 <main+0x272>
    278e:	48 cf       	rjmp	.-368    	; 0x2620 <main+0x102>
    {
        DOOR_CLOSE;
    2790:	11 98       	cbi	0x02, 1	; 2
    2792:	46 cf       	rjmp	.-372    	; 0x2620 <main+0x102>

00002794 <__vector_47>:
}


/* System clock ISR */
ISR(TIMER5_COMPA_vect)
{
    2794:	1f 92       	push	r1
    2796:	0f 92       	push	r0
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	0f 92       	push	r0
    279c:	11 24       	eor	r1, r1
    279e:	8f 93       	push	r24
    27a0:	9f 93       	push	r25
    27a2:	af 93       	push	r26
    27a4:	bf 93       	push	r27
    system_time++;
    27a6:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <system_time>
    27aa:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <system_time+0x1>
    27ae:	a0 91 f3 05 	lds	r26, 0x05F3	; 0x8005f3 <system_time+0x2>
    27b2:	b0 91 f4 05 	lds	r27, 0x05F4	; 0x8005f4 <system_time+0x3>
    27b6:	01 96       	adiw	r24, 0x01	; 1
    27b8:	a1 1d       	adc	r26, r1
    27ba:	b1 1d       	adc	r27, r1
    27bc:	80 93 f1 05 	sts	0x05F1, r24	; 0x8005f1 <system_time>
    27c0:	90 93 f2 05 	sts	0x05F2, r25	; 0x8005f2 <system_time+0x1>
    27c4:	a0 93 f3 05 	sts	0x05F3, r26	; 0x8005f3 <system_time+0x2>
    27c8:	b0 93 f4 05 	sts	0x05F4, r27	; 0x8005f4 <system_time+0x3>
    27cc:	bf 91       	pop	r27
    27ce:	af 91       	pop	r26
    27d0:	9f 91       	pop	r25
    27d2:	8f 91       	pop	r24
    27d4:	0f 90       	pop	r0
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	0f 90       	pop	r0
    27da:	1f 90       	pop	r1
    27dc:	18 95       	reti

000027de <print_ascii_tbl>:
#include <stdio.h>
#include "print_helper.h"

int print_ascii_tbl (FILE *stream)
{
    27de:	ef 92       	push	r14
    27e0:	ff 92       	push	r15
    27e2:	0f 93       	push	r16
    27e4:	1f 93       	push	r17
    27e6:	cf 93       	push	r28
    27e8:	df 93       	push	r29
    27ea:	f8 2e       	mov	r15, r24
    27ec:	e9 2e       	mov	r14, r25
    27ee:	c0 e2       	ldi	r28, 0x20	; 32
    27f0:	d0 e0       	ldi	r29, 0x00	; 0
    for (char c = ' '; c <= '~'; c++) {
        if (!fprintf(stream, "%c ", c))   {
    27f2:	0d ee       	ldi	r16, 0xED	; 237
    27f4:	12 e0       	ldi	r17, 0x02	; 2
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	1f 93       	push	r17
    27fc:	0f 93       	push	r16
    27fe:	ef 92       	push	r14
    2800:	ff 92       	push	r15
    2802:	6e d4       	rcall	.+2268   	; 0x30e0 <fprintf>
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	0f 90       	pop	r0
    2810:	00 97       	sbiw	r24, 0x00	; 0
    2812:	79 f0       	breq	.+30     	; 0x2832 <print_ascii_tbl+0x54>
    2814:	21 96       	adiw	r28, 0x01	; 1
#include <stdio.h>
#include "print_helper.h"

int print_ascii_tbl (FILE *stream)
{
    for (char c = ' '; c <= '~'; c++) {
    2816:	cf 37       	cpi	r28, 0x7F	; 127
    2818:	d1 05       	cpc	r29, r1
    281a:	69 f7       	brne	.-38     	; 0x27f6 <print_ascii_tbl+0x18>
        if (!fprintf(stream, "%c ", c))   {
            return 0;
        }
    }

    return fprintf(stream, "\n");
    281c:	8c e2       	ldi	r24, 0x2C	; 44
    281e:	93 e0       	ldi	r25, 0x03	; 3
    2820:	9f 93       	push	r25
    2822:	8f 93       	push	r24
    2824:	ef 92       	push	r14
    2826:	ff 92       	push	r15
    2828:	5b d4       	rcall	.+2230   	; 0x30e0 <fprintf>
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
}
    2832:	df 91       	pop	r29
    2834:	cf 91       	pop	r28
    2836:	1f 91       	pop	r17
    2838:	0f 91       	pop	r16
    283a:	ff 90       	pop	r15
    283c:	ef 90       	pop	r14
    283e:	08 95       	ret

00002840 <print_for_human>:


int print_for_human (FILE *stream, const unsigned char *array, const int len)
{
    2840:	af 92       	push	r10
    2842:	bf 92       	push	r11
    2844:	cf 92       	push	r12
    2846:	df 92       	push	r13
    2848:	ef 92       	push	r14
    284a:	ff 92       	push	r15
    284c:	0f 93       	push	r16
    284e:	1f 93       	push	r17
    2850:	cf 93       	push	r28
    2852:	df 93       	push	r29
    2854:	b8 2e       	mov	r11, r24
    2856:	a9 2e       	mov	r10, r25
    for (int i = 0; i < len; i++) {
    2858:	14 16       	cp	r1, r20
    285a:	15 06       	cpc	r1, r21
    285c:	bc f5       	brge	.+110    	; 0x28cc <print_for_human+0x8c>
    285e:	eb 01       	movw	r28, r22
    2860:	8b 01       	movw	r16, r22
    2862:	04 0f       	add	r16, r20
    2864:	15 1f       	adc	r17, r21
        if (array[i] >= ' ' && array[i] <= '~') {
            if (!fprintf(stream, "%c", array[i])) {
                return 0;
            }
        } else {
            if (!fprintf(stream, "\"0x%02x\"", array[i])) {
    2866:	0f 2e       	mov	r0, r31
    2868:	f4 ef       	ldi	r31, 0xF4	; 244
    286a:	cf 2e       	mov	r12, r31
    286c:	f2 e0       	ldi	r31, 0x02	; 2
    286e:	df 2e       	mov	r13, r31
    2870:	f0 2d       	mov	r31, r0

int print_for_human (FILE *stream, const unsigned char *array, const int len)
{
    for (int i = 0; i < len; i++) {
        if (array[i] >= ' ' && array[i] <= '~') {
            if (!fprintf(stream, "%c", array[i])) {
    2872:	0f 2e       	mov	r0, r31
    2874:	f1 ef       	ldi	r31, 0xF1	; 241
    2876:	ef 2e       	mov	r14, r31
    2878:	f2 e0       	ldi	r31, 0x02	; 2
    287a:	ff 2e       	mov	r15, r31
    287c:	f0 2d       	mov	r31, r0


int print_for_human (FILE *stream, const unsigned char *array, const int len)
{
    for (int i = 0; i < len; i++) {
        if (array[i] >= ' ' && array[i] <= '~') {
    287e:	29 91       	ld	r18, Y+
    2880:	30 ee       	ldi	r19, 0xE0	; 224
    2882:	32 0f       	add	r19, r18
    2884:	3f 35       	cpi	r19, 0x5F	; 95
    2886:	80 f4       	brcc	.+32     	; 0x28a8 <print_for_human+0x68>
            if (!fprintf(stream, "%c", array[i])) {
    2888:	1f 92       	push	r1
    288a:	2f 93       	push	r18
    288c:	ff 92       	push	r15
    288e:	ef 92       	push	r14
    2890:	af 92       	push	r10
    2892:	bf 92       	push	r11
    2894:	25 d4       	rcall	.+2122   	; 0x30e0 <fprintf>
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	00 97       	sbiw	r24, 0x00	; 0
    28a4:	81 f4       	brne	.+32     	; 0x28c6 <print_for_human+0x86>
    28a6:	1d c0       	rjmp	.+58     	; 0x28e2 <print_for_human+0xa2>
                return 0;
            }
        } else {
            if (!fprintf(stream, "\"0x%02x\"", array[i])) {
    28a8:	1f 92       	push	r1
    28aa:	2f 93       	push	r18
    28ac:	df 92       	push	r13
    28ae:	cf 92       	push	r12
    28b0:	af 92       	push	r10
    28b2:	bf 92       	push	r11
    28b4:	15 d4       	rcall	.+2090   	; 0x30e0 <fprintf>
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	0f 90       	pop	r0
    28bc:	0f 90       	pop	r0
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	00 97       	sbiw	r24, 0x00	; 0
    28c4:	71 f0       	breq	.+28     	; 0x28e2 <print_for_human+0xa2>
}


int print_for_human (FILE *stream, const unsigned char *array, const int len)
{
    for (int i = 0; i < len; i++) {
    28c6:	c0 17       	cp	r28, r16
    28c8:	d1 07       	cpc	r29, r17
    28ca:	c9 f6       	brne	.-78     	; 0x287e <print_for_human+0x3e>
                return 0;
            }
        }
    }

    return fprintf(stream, "\n");
    28cc:	8c e2       	ldi	r24, 0x2C	; 44
    28ce:	93 e0       	ldi	r25, 0x03	; 3
    28d0:	9f 93       	push	r25
    28d2:	8f 93       	push	r24
    28d4:	af 92       	push	r10
    28d6:	bf 92       	push	r11
    28d8:	03 d4       	rcall	.+2054   	; 0x30e0 <fprintf>
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	df 91       	pop	r29
    28e4:	cf 91       	pop	r28
    28e6:	1f 91       	pop	r17
    28e8:	0f 91       	pop	r16
    28ea:	ff 90       	pop	r15
    28ec:	ef 90       	pop	r14
    28ee:	df 90       	pop	r13
    28f0:	cf 90       	pop	r12
    28f2:	bf 90       	pop	r11
    28f4:	af 90       	pop	r10
    28f6:	08 95       	ret

000028f8 <rfid_print_card_info>:

card_t *head = NULL;

/*Summary: function will receive pointer to card struct and print out its info to stdout*/
void rfid_print_card_info(const card_t *card)
{
    28f8:	ef 92       	push	r14
    28fa:	ff 92       	push	r15
    28fc:	0f 93       	push	r16
    28fe:	1f 93       	push	r17
    2900:	cf 93       	push	r28
    2902:	8c 01       	movw	r16, r24
    printf_P(PSTR(CARD_UID_BRACK_MSG1));
    2904:	84 e3       	ldi	r24, 0x34	; 52
    2906:	98 e0       	ldi	r25, 0x08	; 8
    2908:	9f 93       	push	r25
    290a:	8f 93       	push	r24
    290c:	5f d4       	rcall	.+2238   	; 0x31cc <printf_P>
    printf("%d", card->uid_size);
    290e:	f8 01       	movw	r30, r16
    2910:	80 81       	ld	r24, Z
    2912:	1f 92       	push	r1
    2914:	8f 93       	push	r24
    2916:	8d ef       	ldi	r24, 0xFD	; 253
    2918:	92 e0       	ldi	r25, 0x02	; 2
    291a:	9f 93       	push	r25
    291c:	8f 93       	push	r24
    291e:	43 d4       	rcall	.+2182   	; 0x31a6 <printf>
    printf_P(PSTR(CARD_UID_BRACK_MSG2));
    2920:	80 e3       	ldi	r24, 0x30	; 48
    2922:	98 e0       	ldi	r25, 0x08	; 8
    2924:	9f 93       	push	r25
    2926:	8f 93       	push	r24
    2928:	51 d4       	rcall	.+2210   	; 0x31cc <printf_P>

    for (uint8_t i = 0; i < card->uid_size; i++)
    292a:	8d b7       	in	r24, 0x3d	; 61
    292c:	9e b7       	in	r25, 0x3e	; 62
    292e:	08 96       	adiw	r24, 0x08	; 8
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	f8 94       	cli
    2934:	9e bf       	out	0x3e, r25	; 62
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	8d bf       	out	0x3d, r24	; 61
    293a:	f8 01       	movw	r30, r16
    293c:	80 81       	ld	r24, Z
    293e:	88 23       	and	r24, r24
    2940:	c9 f0       	breq	.+50     	; 0x2974 <rfid_print_card_info+0x7c>
    2942:	c0 e0       	ldi	r28, 0x00	; 0
    {
        printf("%02X", card->uid[i]);
    2944:	0f 2e       	mov	r0, r31
    2946:	f6 ea       	ldi	r31, 0xA6	; 166
    2948:	ef 2e       	mov	r14, r31
    294a:	f2 e0       	ldi	r31, 0x02	; 2
    294c:	ff 2e       	mov	r15, r31
    294e:	f0 2d       	mov	r31, r0
    2950:	f8 01       	movw	r30, r16
    2952:	ec 0f       	add	r30, r28
    2954:	f1 1d       	adc	r31, r1
    2956:	81 81       	ldd	r24, Z+1	; 0x01
    2958:	1f 92       	push	r1
    295a:	8f 93       	push	r24
    295c:	ff 92       	push	r15
    295e:	ef 92       	push	r14
    2960:	22 d4       	rcall	.+2116   	; 0x31a6 <printf>
{
    printf_P(PSTR(CARD_UID_BRACK_MSG1));
    printf("%d", card->uid_size);
    printf_P(PSTR(CARD_UID_BRACK_MSG2));

    for (uint8_t i = 0; i < card->uid_size; i++)
    2962:	cf 5f       	subi	r28, 0xFF	; 255
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	f8 01       	movw	r30, r16
    296e:	80 81       	ld	r24, Z
    2970:	c8 17       	cp	r28, r24
    2972:	70 f3       	brcs	.-36     	; 0x2950 <rfid_print_card_info+0x58>
    {
        printf("%02X", card->uid[i]);
    }
    printf_P(PSTR(CARD_HOLDER_MSG));
    2974:	87 e2       	ldi	r24, 0x27	; 39
    2976:	98 e0       	ldi	r25, 0x08	; 8
    2978:	9f 93       	push	r25
    297a:	8f 93       	push	r24
    297c:	27 d4       	rcall	.+2126   	; 0x31cc <printf_P>
    printf("%s", card->user);
    297e:	f8 01       	movw	r30, r16
    2980:	84 85       	ldd	r24, Z+12	; 0x0c
    2982:	8f 93       	push	r24
    2984:	83 85       	ldd	r24, Z+11	; 0x0b
    2986:	8f 93       	push	r24
    2988:	8b ea       	ldi	r24, 0xAB	; 171
    298a:	92 e0       	ldi	r25, 0x02	; 2
    298c:	9f 93       	push	r25
    298e:	8f 93       	push	r24
    2990:	0a d4       	rcall	.+2068   	; 0x31a6 <printf>
    printf_P(PSTR("\n"));
    2992:	85 e2       	ldi	r24, 0x25	; 37
    2994:	98 e0       	ldi	r25, 0x08	; 8
    2996:	9f 93       	push	r25
    2998:	8f 93       	push	r24
    299a:	18 d4       	rcall	.+2096   	; 0x31cc <printf_P>
    299c:	8d b7       	in	r24, 0x3d	; 61
    299e:	9e b7       	in	r25, 0x3e	; 62
    29a0:	08 96       	adiw	r24, 0x08	; 8
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	f8 94       	cli
    29a6:	9e bf       	out	0x3e, r25	; 62
    29a8:	0f be       	out	0x3f, r0	; 63
    29aa:	8d bf       	out	0x3d, r24	; 61
}
    29ac:	cf 91       	pop	r28
    29ae:	1f 91       	pop	r17
    29b0:	0f 91       	pop	r16
    29b2:	ff 90       	pop	r15
    29b4:	ef 90       	pop	r14
    29b6:	08 95       	ret

000029b8 <rfid_print_card_list>:


/*Summary: function iterates through linked list and prints out all cards in the list using rfid_print_card_info*/
void rfid_print_card_list(void)
{
    29b8:	ef 92       	push	r14
    29ba:	ff 92       	push	r15
    29bc:	1f 93       	push	r17
    29be:	cf 93       	push	r28
    29c0:	df 93       	push	r29
    if (head == NULL)
    29c2:	c0 91 7e 05 	lds	r28, 0x057E	; 0x80057e <head>
    29c6:	d0 91 7f 05 	lds	r29, 0x057F	; 0x80057f <head+0x1>
    29ca:	20 97       	sbiw	r28, 0x00	; 0
    29cc:	41 f4       	brne	.+16     	; 0x29de <rfid_print_card_list+0x26>
    {
        printf_P(PSTR(CARD_LIST_EMPTY_MSG));
    29ce:	8f e0       	ldi	r24, 0x0F	; 15
    29d0:	98 e0       	ldi	r25, 0x08	; 8
    29d2:	9f 93       	push	r25
    29d4:	8f 93       	push	r24
    29d6:	fa d3       	rcall	.+2036   	; 0x31cc <printf_P>
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	1f c0       	rjmp	.+62     	; 0x2a1c <rfid_print_card_list+0x64>
    else
    {
        card_t *current;
        current = head;
        uint8_t list_nr = 1;
        printf_P(PSTR(CARD_LIST_PRINT_MSG));
    29de:	87 ef       	ldi	r24, 0xF7	; 247
    29e0:	97 e0       	ldi	r25, 0x07	; 7
    29e2:	9f 93       	push	r25
    29e4:	8f 93       	push	r24
    29e6:	f2 d3       	rcall	.+2020   	; 0x31cc <printf_P>
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	11 e0       	ldi	r17, 0x01	; 1
        while (current != NULL)
        {
            printf("%d", list_nr);
    29ee:	0f 2e       	mov	r0, r31
    29f0:	fd ef       	ldi	r31, 0xFD	; 253
    29f2:	ef 2e       	mov	r14, r31
    29f4:	f2 e0       	ldi	r31, 0x02	; 2
    29f6:	ff 2e       	mov	r15, r31
    29f8:	f0 2d       	mov	r31, r0
    29fa:	1f 92       	push	r1
    29fc:	1f 93       	push	r17
    29fe:	ff 92       	push	r15
    2a00:	ef 92       	push	r14
    2a02:	d1 d3       	rcall	.+1954   	; 0x31a6 <printf>

            rfid_print_card_info(current);
    2a04:	ce 01       	movw	r24, r28
    2a06:	78 df       	rcall	.-272    	; 0x28f8 <rfid_print_card_info>

            list_nr ++;
    2a08:	1f 5f       	subi	r17, 0xFF	; 255
            current = current->next;
    2a0a:	0d 84       	ldd	r0, Y+13	; 0x0d
    2a0c:	de 85       	ldd	r29, Y+14	; 0x0e
    2a0e:	c0 2d       	mov	r28, r0
    {
        card_t *current;
        current = head;
        uint8_t list_nr = 1;
        printf_P(PSTR(CARD_LIST_PRINT_MSG));
        while (current != NULL)
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	20 97       	sbiw	r28, 0x00	; 0
    2a1a:	79 f7       	brne	.-34     	; 0x29fa <rfid_print_card_list+0x42>

            list_nr ++;
            current = current->next;
        }
    }
}
    2a1c:	df 91       	pop	r29
    2a1e:	cf 91       	pop	r28
    2a20:	1f 91       	pop	r17
    2a22:	ff 90       	pop	r15
    2a24:	ef 90       	pop	r14
    2a26:	08 95       	ret

00002a28 <rfid_find_card>:


/*Summary: function will receive pointer to card struct as a parameter, iterate through linked list of cards,
and do comparison of username and memory areas of UID for each card in list with received card. Returns pointer to card, if found match*/
card_t* rfid_find_card(const card_t *card)
{
    2a28:	0f 93       	push	r16
    2a2a:	1f 93       	push	r17
    2a2c:	cf 93       	push	r28
    2a2e:	df 93       	push	r29
    if (head == NULL)
    2a30:	c0 91 7e 05 	lds	r28, 0x057E	; 0x80057e <head>
    2a34:	d0 91 7f 05 	lds	r29, 0x057F	; 0x80057f <head+0x1>
    2a38:	20 97       	sbiw	r28, 0x00	; 0
    2a3a:	99 f0       	breq	.+38     	; 0x2a62 <rfid_find_card+0x3a>
        card_t *current;
        current = head;
        while (current != NULL)
        {

            if (!memcmp(current->uid, card->uid, current->uid_size))
    2a3c:	8c 01       	movw	r16, r24
    2a3e:	0f 5f       	subi	r16, 0xFF	; 255
    2a40:	1f 4f       	sbci	r17, 0xFF	; 255
    2a42:	fe 01       	movw	r30, r28
    2a44:	41 91       	ld	r20, Z+
    2a46:	50 e0       	ldi	r21, 0x00	; 0
    2a48:	b8 01       	movw	r22, r16
    2a4a:	cf 01       	movw	r24, r30
    2a4c:	07 d3       	rcall	.+1550   	; 0x305c <memcmp>
    2a4e:	89 2b       	or	r24, r25
    2a50:	59 f0       	breq	.+22     	; 0x2a68 <rfid_find_card+0x40>
            {
                return current;
            }

            current = current->next;
    2a52:	0d 84       	ldd	r0, Y+13	; 0x0d
    2a54:	de 85       	ldd	r29, Y+14	; 0x0e
    2a56:	c0 2d       	mov	r28, r0
    }
    else
    {
        card_t *current;
        current = head;
        while (current != NULL)
    2a58:	20 97       	sbiw	r28, 0x00	; 0
    2a5a:	99 f7       	brne	.-26     	; 0x2a42 <rfid_find_card+0x1a>
            }

            current = current->next;
        }
    }
    return NULL;
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	05 c0       	rjmp	.+10     	; 0x2a6c <rfid_find_card+0x44>
and do comparison of username and memory areas of UID for each card in list with received card. Returns pointer to card, if found match*/
card_t* rfid_find_card(const card_t *card)
{
    if (head == NULL)
    {
        return NULL;
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	02 c0       	rjmp	.+4      	; 0x2a6c <rfid_find_card+0x44>
    2a68:	8c 2f       	mov	r24, r28
    2a6a:	9d 2f       	mov	r25, r29

            current = current->next;
        }
    }
    return NULL;
}
    2a6c:	df 91       	pop	r29
    2a6e:	cf 91       	pop	r28
    2a70:	1f 91       	pop	r17
    2a72:	0f 91       	pop	r16
    2a74:	08 95       	ret

00002a76 <rfid_add_card>:


/*Summary: function will check if scanned card(receives pointer to card struck as param) already in the list,
check memory and add card structure to linked list*/
void rfid_add_card(const card_t *card)
{
    2a76:	cf 92       	push	r12
    2a78:	df 92       	push	r13
    2a7a:	ef 92       	push	r14
    2a7c:	ff 92       	push	r15
    2a7e:	0f 93       	push	r16
    2a80:	1f 93       	push	r17
    2a82:	cf 93       	push	r28
    2a84:	df 93       	push	r29
    2a86:	ec 01       	movw	r28, r24
    card_t *found_card = rfid_find_card(card);
    2a88:	cf df       	rcall	.-98     	; 0x2a28 <rfid_find_card>
    2a8a:	8c 01       	movw	r16, r24
    if (found_card)
    2a8c:	89 2b       	or	r24, r25
    2a8e:	51 f0       	breq	.+20     	; 0x2aa4 <rfid_add_card+0x2e>
    {
        printf_P(PSTR(CARD_EXISTS_MSG));
    2a90:	82 eb       	ldi	r24, 0xB2	; 178
    2a92:	97 e0       	ldi	r25, 0x07	; 7
    2a94:	9f 93       	push	r25
    2a96:	8f 93       	push	r24
    2a98:	99 d3       	rcall	.+1842   	; 0x31cc <printf_P>
        rfid_print_card_info(found_card);
    2a9a:	c8 01       	movw	r24, r16
    2a9c:	2d df       	rcall	.-422    	; 0x28f8 <rfid_print_card_info>
        return;
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	47 c0       	rjmp	.+142    	; 0x2b32 <rfid_add_card+0xbc>
    }

    // Create structure with new card, and check possibility to allocate memory for new card, in no space - give error to console
    card_t *new_card;
    char *new_card_user;
    new_card = malloc(sizeof(card_t));
    2aa4:	8f e0       	ldi	r24, 0x0F	; 15
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	91 d1       	rcall	.+802    	; 0x2dcc <malloc>
    2aaa:	8c 01       	movw	r16, r24
    new_card_user = malloc(strlen(card->user) + 1);
    2aac:	eb 84       	ldd	r14, Y+11	; 0x0b
    2aae:	fc 84       	ldd	r15, Y+12	; 0x0c
    2ab0:	f7 01       	movw	r30, r14
    2ab2:	01 90       	ld	r0, Z+
    2ab4:	00 20       	and	r0, r0
    2ab6:	e9 f7       	brne	.-6      	; 0x2ab2 <rfid_add_card+0x3c>
    2ab8:	cf 01       	movw	r24, r30
    2aba:	8e 19       	sub	r24, r14
    2abc:	9f 09       	sbc	r25, r15
    2abe:	86 d1       	rcall	.+780    	; 0x2dcc <malloc>
    2ac0:	6c 01       	movw	r12, r24
    if (!new_card || !new_card_user)
    2ac2:	01 15       	cp	r16, r1
    2ac4:	11 05       	cpc	r17, r1
    2ac6:	11 f0       	breq	.+4      	; 0x2acc <rfid_add_card+0x56>
    2ac8:	89 2b       	or	r24, r25
    2aca:	41 f4       	brne	.+16     	; 0x2adc <rfid_add_card+0x66>
    {
        printf_P(PSTR(CARD_LIST_FULL_MSG));
    2acc:	80 e6       	ldi	r24, 0x60	; 96
    2ace:	97 e0       	ldi	r25, 0x07	; 7
    2ad0:	9f 93       	push	r25
    2ad2:	8f 93       	push	r24
    2ad4:	7b d3       	rcall	.+1782   	; 0x31cc <printf_P>
        return;
    2ad6:	0f 90       	pop	r0
    2ad8:	0f 90       	pop	r0
    2ada:	2b c0       	rjmp	.+86     	; 0x2b32 <rfid_add_card+0xbc>
    }
    else
    {
        new_card->uid_size = card->uid_size;
    2adc:	49 91       	ld	r20, Y+
    2ade:	f8 01       	movw	r30, r16
    2ae0:	41 93       	st	Z+, r20
    2ae2:	cf 01       	movw	r24, r30
        memcpy(new_card->uid, card->uid, card->uid_size);
    2ae4:	50 e0       	ldi	r21, 0x00	; 0
    2ae6:	be 01       	movw	r22, r28
    2ae8:	c6 d2       	rcall	.+1420   	; 0x3076 <memcpy>
        strcpy(new_card_user, card->user);
    2aea:	b7 01       	movw	r22, r14
    2aec:	c6 01       	movw	r24, r12
    2aee:	f1 d2       	rcall	.+1506   	; 0x30d2 <strcpy>
        new_card->user = new_card_user;
    2af0:	f8 01       	movw	r30, r16
    2af2:	d4 86       	std	Z+12, r13	; 0x0c
    2af4:	c3 86       	std	Z+11, r12	; 0x0b
        new_card->next = NULL;
    2af6:	16 86       	std	Z+14, r1	; 0x0e
    2af8:	15 86       	std	Z+13, r1	; 0x0d
    }

    // Add card struct to linked list
    // if this is the first card in the list
    if (head == NULL)
    2afa:	e0 91 7e 05 	lds	r30, 0x057E	; 0x80057e <head>
    2afe:	f0 91 7f 05 	lds	r31, 0x057F	; 0x80057f <head+0x1>
    2b02:	30 97       	sbiw	r30, 0x00	; 0
    2b04:	31 f4       	brne	.+12     	; 0x2b12 <rfid_add_card+0x9c>
    {
        head = new_card;
    2b06:	10 93 7f 05 	sts	0x057F, r17	; 0x80057f <head+0x1>
    2b0a:	00 93 7e 05 	sts	0x057E, r16	; 0x80057e <head>
    2b0e:	08 c0       	rjmp	.+16     	; 0x2b20 <rfid_add_card+0xaa>
    {
        card_t *current;
        current = head;
        while (current->next != NULL)
        {
            current = current->next;
    2b10:	f9 01       	movw	r30, r18
    }
    else
    {
        card_t *current;
        current = head;
        while (current->next != NULL)
    2b12:	25 85       	ldd	r18, Z+13	; 0x0d
    2b14:	36 85       	ldd	r19, Z+14	; 0x0e
    2b16:	21 15       	cp	r18, r1
    2b18:	31 05       	cpc	r19, r1
    2b1a:	d1 f7       	brne	.-12     	; 0x2b10 <rfid_add_card+0x9a>
        {
            current = current->next;
        }
        current->next = new_card;
    2b1c:	16 87       	std	Z+14, r17	; 0x0e
    2b1e:	05 87       	std	Z+13, r16	; 0x0d
    }
    printf_P(PSTR(CARD_ADDING_MSG));
    2b20:	84 e5       	ldi	r24, 0x54	; 84
    2b22:	97 e0       	ldi	r25, 0x07	; 7
    2b24:	9f 93       	push	r25
    2b26:	8f 93       	push	r24
    2b28:	51 d3       	rcall	.+1698   	; 0x31cc <printf_P>

    rfid_print_card_info(new_card);
    2b2a:	c8 01       	movw	r24, r16
    2b2c:	e5 de       	rcall	.-566    	; 0x28f8 <rfid_print_card_info>

    return;
    2b2e:	0f 90       	pop	r0
    2b30:	0f 90       	pop	r0
}
    2b32:	df 91       	pop	r29
    2b34:	cf 91       	pop	r28
    2b36:	1f 91       	pop	r17
    2b38:	0f 91       	pop	r16
    2b3a:	ff 90       	pop	r15
    2b3c:	ef 90       	pop	r14
    2b3e:	df 90       	pop	r13
    2b40:	cf 90       	pop	r12
    2b42:	08 95       	ret

00002b44 <rfid_remove_card_by_uid>:


/*Summary: function convert input from console into char array. Iterate through linked list of cards, convert UID to hex and concatenate
into char array. Console array compared to array of the card. If match - linked list will adjusted and matched card removed from memory.*/
void rfid_remove_card_by_uid(const char *uid)
{
    2b44:	7f 92       	push	r7
    2b46:	8f 92       	push	r8
    2b48:	9f 92       	push	r9
    2b4a:	af 92       	push	r10
    2b4c:	bf 92       	push	r11
    2b4e:	cf 92       	push	r12
    2b50:	df 92       	push	r13
    2b52:	ef 92       	push	r14
    2b54:	ff 92       	push	r15
    2b56:	0f 93       	push	r16
    2b58:	1f 93       	push	r17
    2b5a:	cf 93       	push	r28
    2b5c:	df 93       	push	r29
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	6e 97       	sbiw	r28, 0x1e	; 30
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61

    card_t *current;
    card_t *prev;
    current = head;
    2b6e:	e0 90 7e 05 	lds	r14, 0x057E	; 0x80057e <head>
    2b72:	f0 90 7f 05 	lds	r15, 0x057F	; 0x80057f <head+0x1>
    prev = NULL;
    char cli_buf[10];
    char uid_hex_buf[10];
    char uid_buf[10];

    sprintf(cli_buf, "%s", uid);
    2b76:	bc 01       	movw	r22, r24
    2b78:	ce 01       	movw	r24, r28
    2b7a:	01 96       	adiw	r24, 0x01	; 1
    2b7c:	aa d2       	rcall	.+1364   	; 0x30d2 <strcpy>

    if (head == NULL)
    2b7e:	e1 14       	cp	r14, r1
    2b80:	f1 04       	cpc	r15, r1
    2b82:	41 f4       	brne	.+16     	; 0x2b94 <rfid_remove_card_by_uid+0x50>
    {
        printf_P(PSTR(CARD_LIST_EMPTY_MSG));
    2b84:	8e e3       	ldi	r24, 0x3E	; 62
    2b86:	97 e0       	ldi	r25, 0x07	; 7
    2b88:	9f 93       	push	r25
    2b8a:	8f 93       	push	r24
    2b8c:	1f d3       	rcall	.+1598   	; 0x31cc <printf_P>
        return;
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	a7 c0       	rjmp	.+334    	; 0x2ce2 <rfid_remove_card_by_uid+0x19e>
    2b94:	81 2c       	mov	r8, r1
    2b96:	91 2c       	mov	r9, r1
        {
            strcpy(uid_hex_buf, "");
            strcpy(uid_buf, "");
            for (uint8_t i = 0; i < current->uid_size; i++)
            {
                sprintf(uid_hex_buf,"%X", current->uid[i]);
    2b98:	0f 2e       	mov	r0, r31
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	af 2e       	mov	r10, r31
    2b9e:	f3 e0       	ldi	r31, 0x03	; 3
    2ba0:	bf 2e       	mov	r11, r31
    2ba2:	f0 2d       	mov	r31, r0
    2ba4:	6e 01       	movw	r12, r28
    2ba6:	8b e0       	ldi	r24, 0x0B	; 11
    2ba8:	c8 0e       	add	r12, r24
    2baa:	d1 1c       	adc	r13, r1
    2bac:	7c 2c       	mov	r7, r12
    2bae:	0d 2d       	mov	r16, r13
    2bb0:	01 c0       	rjmp	.+2      	; 0x2bb4 <rfid_remove_card_by_uid+0x70>
                }
                free(current);
                return;
            }
            prev = current;
            current = current->next;
    2bb2:	7c 01       	movw	r14, r24
    }
    else
    {
        while (current != NULL)
        {
            strcpy(uid_hex_buf, "");
    2bb4:	1b 86       	std	Y+11, r1	; 0x0b
            strcpy(uid_buf, "");
    2bb6:	1d 8a       	std	Y+21, r1	; 0x15
            for (uint8_t i = 0; i < current->uid_size; i++)
    2bb8:	f7 01       	movw	r30, r14
    2bba:	80 81       	ld	r24, Z
    2bbc:	88 23       	and	r24, r24
    2bbe:	e1 f0       	breq	.+56     	; 0x2bf8 <rfid_remove_card_by_uid+0xb4>
    2bc0:	10 e0       	ldi	r17, 0x00	; 0
            {
                sprintf(uid_hex_buf,"%X", current->uid[i]);
    2bc2:	f7 01       	movw	r30, r14
    2bc4:	e1 0f       	add	r30, r17
    2bc6:	f1 1d       	adc	r31, r1
    2bc8:	81 81       	ldd	r24, Z+1	; 0x01
    2bca:	1f 92       	push	r1
    2bcc:	8f 93       	push	r24
    2bce:	bf 92       	push	r11
    2bd0:	af 92       	push	r10
    2bd2:	df 92       	push	r13
    2bd4:	cf 92       	push	r12
    2bd6:	5d d3       	rcall	.+1722   	; 0x3292 <sprintf>
                strcat(uid_buf, uid_hex_buf);
    2bd8:	67 2d       	mov	r22, r7
    2bda:	70 2f       	mov	r23, r16
    2bdc:	ce 01       	movw	r24, r28
    2bde:	45 96       	adiw	r24, 0x15	; 21
    2be0:	64 d2       	rcall	.+1224   	; 0x30aa <strcat>
    {
        while (current != NULL)
        {
            strcpy(uid_hex_buf, "");
            strcpy(uid_buf, "");
            for (uint8_t i = 0; i < current->uid_size; i++)
    2be2:	1f 5f       	subi	r17, 0xFF	; 255
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	f7 01       	movw	r30, r14
    2bf2:	80 81       	ld	r24, Z
    2bf4:	18 17       	cp	r17, r24
    2bf6:	28 f3       	brcs	.-54     	; 0x2bc2 <rfid_remove_card_by_uid+0x7e>
            {
                sprintf(uid_hex_buf,"%X", current->uid[i]);
                strcat(uid_buf, uid_hex_buf);
            }

            if (strcmp(cli_buf, uid_buf) == 0)
    2bf8:	be 01       	movw	r22, r28
    2bfa:	6b 5e       	subi	r22, 0xEB	; 235
    2bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bfe:	ce 01       	movw	r24, r28
    2c00:	01 96       	adiw	r24, 0x01	; 1
    2c02:	5e d2       	rcall	.+1212   	; 0x30c0 <strcmp>
    2c04:	89 2b       	or	r24, r25
    2c06:	09 f0       	breq	.+2      	; 0x2c0a <rfid_remove_card_by_uid+0xc6>
    2c08:	5e c0       	rjmp	.+188    	; 0x2cc6 <rfid_remove_card_by_uid+0x182>
            {
                if(prev == NULL)
    2c0a:	81 14       	cp	r8, r1
    2c0c:	91 04       	cpc	r9, r1
    2c0e:	69 f5       	brne	.+90     	; 0x2c6a <rfid_remove_card_by_uid+0x126>
                // Special condition when first item is removed
                // No need to change next value. Just point head to next item
                {
                    head = current->next;
    2c10:	f7 01       	movw	r30, r14
    2c12:	85 85       	ldd	r24, Z+13	; 0x0d
    2c14:	96 85       	ldd	r25, Z+14	; 0x0e
    2c16:	90 93 7f 05 	sts	0x057F, r25	; 0x80057f <head+0x1>
    2c1a:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <head>
                    printf_P(PSTR(CARD_REMOVING_MSG));
    2c1e:	89 e2       	ldi	r24, 0x29	; 41
    2c20:	97 e0       	ldi	r25, 0x07	; 7
    2c22:	9f 93       	push	r25
    2c24:	8f 93       	push	r24
    2c26:	d2 d2       	rcall	.+1444   	; 0x31cc <printf_P>
                    printf("%s", uid_buf);
    2c28:	ce 01       	movw	r24, r28
    2c2a:	45 96       	adiw	r24, 0x15	; 21
    2c2c:	9f 93       	push	r25
    2c2e:	8f 93       	push	r24
    2c30:	0b ea       	ldi	r16, 0xAB	; 171
    2c32:	12 e0       	ldi	r17, 0x02	; 2
    2c34:	1f 93       	push	r17
    2c36:	0f 93       	push	r16
    2c38:	b6 d2       	rcall	.+1388   	; 0x31a6 <printf>
                    printf_P(PSTR(CARD_HOLDER_MSG));
    2c3a:	80 e2       	ldi	r24, 0x20	; 32
    2c3c:	97 e0       	ldi	r25, 0x07	; 7
    2c3e:	9f 93       	push	r25
    2c40:	8f 93       	push	r24
    2c42:	c4 d2       	rcall	.+1416   	; 0x31cc <printf_P>
                    printf("%s", current->user);
    2c44:	f7 01       	movw	r30, r14
    2c46:	84 85       	ldd	r24, Z+12	; 0x0c
    2c48:	8f 93       	push	r24
    2c4a:	83 85       	ldd	r24, Z+11	; 0x0b
    2c4c:	8f 93       	push	r24
    2c4e:	1f 93       	push	r17
    2c50:	0f 93       	push	r16
    2c52:	a9 d2       	rcall	.+1362   	; 0x31a6 <printf>
                    printf_P(PSTR("\n"));
    2c54:	8e e1       	ldi	r24, 0x1E	; 30
    2c56:	97 e0       	ldi	r25, 0x07	; 7
    2c58:	9f 93       	push	r25
    2c5a:	8f 93       	push	r24
    2c5c:	b7 d2       	rcall	.+1390   	; 0x31cc <printf_P>
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	f8 94       	cli
    2c62:	de bf       	out	0x3e, r29	; 62
    2c64:	0f be       	out	0x3f, r0	; 63
    2c66:	cd bf       	out	0x3d, r28	; 61
    2c68:	2b c0       	rjmp	.+86     	; 0x2cc0 <rfid_remove_card_by_uid+0x17c>
                }
                else
                {
                    prev->next = current->next;
    2c6a:	f7 01       	movw	r30, r14
    2c6c:	85 85       	ldd	r24, Z+13	; 0x0d
    2c6e:	96 85       	ldd	r25, Z+14	; 0x0e
    2c70:	f4 01       	movw	r30, r8
    2c72:	96 87       	std	Z+14, r25	; 0x0e
    2c74:	85 87       	std	Z+13, r24	; 0x0d
                    printf_P(PSTR(CARD_REMOVING_MSG));
    2c76:	89 e0       	ldi	r24, 0x09	; 9
    2c78:	97 e0       	ldi	r25, 0x07	; 7
    2c7a:	9f 93       	push	r25
    2c7c:	8f 93       	push	r24
    2c7e:	a6 d2       	rcall	.+1356   	; 0x31cc <printf_P>
                    printf("%s", uid_buf);
    2c80:	ce 01       	movw	r24, r28
    2c82:	45 96       	adiw	r24, 0x15	; 21
    2c84:	9f 93       	push	r25
    2c86:	8f 93       	push	r24
    2c88:	0b ea       	ldi	r16, 0xAB	; 171
    2c8a:	12 e0       	ldi	r17, 0x02	; 2
    2c8c:	1f 93       	push	r17
    2c8e:	0f 93       	push	r16
    2c90:	8a d2       	rcall	.+1300   	; 0x31a6 <printf>
                    printf_P(PSTR(CARD_HOLDER_MSG));
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	97 e0       	ldi	r25, 0x07	; 7
    2c96:	9f 93       	push	r25
    2c98:	8f 93       	push	r24
    2c9a:	98 d2       	rcall	.+1328   	; 0x31cc <printf_P>
                    printf("%s", current->user);
    2c9c:	f7 01       	movw	r30, r14
    2c9e:	84 85       	ldd	r24, Z+12	; 0x0c
    2ca0:	8f 93       	push	r24
    2ca2:	83 85       	ldd	r24, Z+11	; 0x0b
    2ca4:	8f 93       	push	r24
    2ca6:	1f 93       	push	r17
    2ca8:	0f 93       	push	r16
    2caa:	7d d2       	rcall	.+1274   	; 0x31a6 <printf>
                    printf_P(PSTR("\n"));
    2cac:	8e ef       	ldi	r24, 0xFE	; 254
    2cae:	96 e0       	ldi	r25, 0x06	; 6
    2cb0:	9f 93       	push	r25
    2cb2:	8f 93       	push	r24
    2cb4:	8b d2       	rcall	.+1302   	; 0x31cc <printf_P>
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61
                }
                free(current);
    2cc0:	c7 01       	movw	r24, r14
    2cc2:	19 d1       	rcall	.+562    	; 0x2ef6 <free>
                return;
    2cc4:	0e c0       	rjmp	.+28     	; 0x2ce2 <rfid_remove_card_by_uid+0x19e>
            }
            prev = current;
            current = current->next;
    2cc6:	f7 01       	movw	r30, r14
    2cc8:	85 85       	ldd	r24, Z+13	; 0x0d
    2cca:	96 85       	ldd	r25, Z+14	; 0x0e
    2ccc:	47 01       	movw	r8, r14
        printf_P(PSTR(CARD_LIST_EMPTY_MSG));
        return;
    }
    else
    {
        while (current != NULL)
    2cce:	00 97       	sbiw	r24, 0x00	; 0
    2cd0:	09 f0       	breq	.+2      	; 0x2cd4 <rfid_remove_card_by_uid+0x190>
    2cd2:	6f cf       	rjmp	.-290    	; 0x2bb2 <rfid_remove_card_by_uid+0x6e>
            }
            prev = current;
            current = current->next;
        }
    }
    printf_P(PSTR(CARD_NOT_FOUND_MSG));
    2cd4:	8e ec       	ldi	r24, 0xCE	; 206
    2cd6:	96 e0       	ldi	r25, 0x06	; 6
    2cd8:	9f 93       	push	r25
    2cda:	8f 93       	push	r24
    2cdc:	77 d2       	rcall	.+1262   	; 0x31cc <printf_P>
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	6e 96       	adiw	r28, 0x1e	; 30
    2ce4:	0f b6       	in	r0, 0x3f	; 63
    2ce6:	f8 94       	cli
    2ce8:	de bf       	out	0x3e, r29	; 62
    2cea:	0f be       	out	0x3f, r0	; 63
    2cec:	cd bf       	out	0x3d, r28	; 61
    2cee:	df 91       	pop	r29
    2cf0:	cf 91       	pop	r28
    2cf2:	1f 91       	pop	r17
    2cf4:	0f 91       	pop	r16
    2cf6:	ff 90       	pop	r15
    2cf8:	ef 90       	pop	r14
    2cfa:	df 90       	pop	r13
    2cfc:	cf 90       	pop	r12
    2cfe:	bf 90       	pop	r11
    2d00:	af 90       	pop	r10
    2d02:	9f 90       	pop	r9
    2d04:	8f 90       	pop	r8
    2d06:	7f 90       	pop	r7
    2d08:	08 95       	ret

00002d0a <uart0_putchar>:
#endif



int uart0_putchar(char c, FILE *stream)
{
    2d0a:	cf 93       	push	r28
    2d0c:	c8 2f       	mov	r28, r24
    (void)stream;

    if (c == '\n') {
    2d0e:	8a 30       	cpi	r24, 0x0A	; 10
    2d10:	19 f4       	brne	.+6      	; 0x2d18 <uart0_putchar+0xe>
        uart0_putc('\r');
    2d12:	8d e0       	ldi	r24, 0x0D	; 13
    2d14:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart0_putc>
    }

    uart0_putc((uint8_t)c);
    2d18:	8c 2f       	mov	r24, r28
    2d1a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart0_putc>
    return 0;
}
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	cf 91       	pop	r28
    2d24:	08 95       	ret

00002d26 <uart0_getchar>:

int uart0_getchar(FILE *stream)
{
    (void)stream;

    while (uart0_peek() == UART_NO_DATA) {
    2d26:	0e 94 df 04 	call	0x9be	; 0x9be <uart0_peek>
    2d2a:	81 15       	cp	r24, r1
    2d2c:	91 40       	sbci	r25, 0x01	; 1
    2d2e:	d9 f3       	breq	.-10     	; 0x2d26 <uart0_getchar>
    }

    return (uart0_getc() & 0x00ff);
    2d30:	0e 94 c2 04 	call	0x984	; 0x984 <uart0_getc>
}
    2d34:	99 27       	eor	r25, r25
    2d36:	08 95       	ret

00002d38 <uart3_putchar>:


int uart3_putchar(char c, FILE *stream)
{
    2d38:	cf 93       	push	r28
    2d3a:	c8 2f       	mov	r28, r24
    (void)stream;

    if (c == '\n') {
    2d3c:	8a 30       	cpi	r24, 0x0A	; 10
    2d3e:	19 f4       	brne	.+6      	; 0x2d46 <uart3_putchar+0xe>
        uart3_putc('\r');
    2d40:	8d e0       	ldi	r24, 0x0D	; 13
    2d42:	0e 94 94 05 	call	0xb28	; 0xb28 <uart3_putc>
    }

    uart3_putc((uint8_t)c);
    2d46:	8c 2f       	mov	r24, r28
    2d48:	0e 94 94 05 	call	0xb28	; 0xb28 <uart3_putc>
    return 0;
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	cf 91       	pop	r28
    2d52:	08 95       	ret

00002d54 <__tablejump2__>:
    2d54:	ee 0f       	add	r30, r30
    2d56:	ff 1f       	adc	r31, r31
    2d58:	88 1f       	adc	r24, r24
    2d5a:	8b bf       	out	0x3b, r24	; 59
    2d5c:	07 90       	elpm	r0, Z+
    2d5e:	f6 91       	elpm	r31, Z
    2d60:	e0 2d       	mov	r30, r0
    2d62:	19 94       	eijmp

00002d64 <__assert>:
    2d64:	f0 91 fe 05 	lds	r31, 0x05FE	; 0x8005fe <__iob+0x5>
    2d68:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <__iob+0x4>
    2d6c:	00 97       	sbiw	r24, 0x00	; 0
    2d6e:	b1 f4       	brne	.+44     	; 0x2d9c <__assert+0x38>
    2d70:	5f 93       	push	r21
    2d72:	4f 93       	push	r20
    2d74:	7f 93       	push	r23
    2d76:	6f 93       	push	r22
    2d78:	3f 93       	push	r19
    2d7a:	2f 93       	push	r18
    2d7c:	83 e0       	ldi	r24, 0x03	; 3
    2d7e:	93 e0       	ldi	r25, 0x03	; 3
    2d80:	9f 93       	push	r25
    2d82:	8f 93       	push	r24
    2d84:	ff 93       	push	r31
    2d86:	ef 93       	push	r30
    2d88:	ab d1       	rcall	.+854    	; 0x30e0 <fprintf>
    2d8a:	8d b7       	in	r24, 0x3d	; 61
    2d8c:	9e b7       	in	r25, 0x3e	; 62
    2d8e:	0a 96       	adiw	r24, 0x0a	; 10
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	9e bf       	out	0x3e, r25	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	8d bf       	out	0x3d, r24	; 61
    2d9a:	17 c0       	rjmp	.+46     	; 0x2dca <__assert+0x66>
    2d9c:	5f 93       	push	r21
    2d9e:	4f 93       	push	r20
    2da0:	7f 93       	push	r23
    2da2:	6f 93       	push	r22
    2da4:	9f 93       	push	r25
    2da6:	8f 93       	push	r24
    2da8:	3f 93       	push	r19
    2daa:	2f 93       	push	r18
    2dac:	8e e2       	ldi	r24, 0x2E	; 46
    2dae:	93 e0       	ldi	r25, 0x03	; 3
    2db0:	9f 93       	push	r25
    2db2:	8f 93       	push	r24
    2db4:	ff 93       	push	r31
    2db6:	ef 93       	push	r30
    2db8:	93 d1       	rcall	.+806    	; 0x30e0 <fprintf>
    2dba:	8d b7       	in	r24, 0x3d	; 61
    2dbc:	9e b7       	in	r25, 0x3e	; 62
    2dbe:	0c 96       	adiw	r24, 0x0c	; 12
    2dc0:	0f b6       	in	r0, 0x3f	; 63
    2dc2:	f8 94       	cli
    2dc4:	9e bf       	out	0x3e, r25	; 62
    2dc6:	0f be       	out	0x3f, r0	; 63
    2dc8:	8d bf       	out	0x3d, r24	; 61
    2dca:	2d d1       	rcall	.+602    	; 0x3026 <abort>

00002dcc <malloc>:
    2dcc:	cf 93       	push	r28
    2dce:	df 93       	push	r29
    2dd0:	82 30       	cpi	r24, 0x02	; 2
    2dd2:	91 05       	cpc	r25, r1
    2dd4:	10 f4       	brcc	.+4      	; 0x2dda <malloc+0xe>
    2dd6:	82 e0       	ldi	r24, 0x02	; 2
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	e0 91 f7 05 	lds	r30, 0x05F7	; 0x8005f7 <__flp>
    2dde:	f0 91 f8 05 	lds	r31, 0x05F8	; 0x8005f8 <__flp+0x1>
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	c0 e0       	ldi	r28, 0x00	; 0
    2de8:	d0 e0       	ldi	r29, 0x00	; 0
    2dea:	30 97       	sbiw	r30, 0x00	; 0
    2dec:	11 f1       	breq	.+68     	; 0x2e32 <malloc+0x66>
    2dee:	40 81       	ld	r20, Z
    2df0:	51 81       	ldd	r21, Z+1	; 0x01
    2df2:	48 17       	cp	r20, r24
    2df4:	59 07       	cpc	r21, r25
    2df6:	c0 f0       	brcs	.+48     	; 0x2e28 <malloc+0x5c>
    2df8:	48 17       	cp	r20, r24
    2dfa:	59 07       	cpc	r21, r25
    2dfc:	61 f4       	brne	.+24     	; 0x2e16 <malloc+0x4a>
    2dfe:	82 81       	ldd	r24, Z+2	; 0x02
    2e00:	93 81       	ldd	r25, Z+3	; 0x03
    2e02:	20 97       	sbiw	r28, 0x00	; 0
    2e04:	19 f0       	breq	.+6      	; 0x2e0c <malloc+0x40>
    2e06:	9b 83       	std	Y+3, r25	; 0x03
    2e08:	8a 83       	std	Y+2, r24	; 0x02
    2e0a:	2b c0       	rjmp	.+86     	; 0x2e62 <malloc+0x96>
    2e0c:	90 93 f8 05 	sts	0x05F8, r25	; 0x8005f8 <__flp+0x1>
    2e10:	80 93 f7 05 	sts	0x05F7, r24	; 0x8005f7 <__flp>
    2e14:	26 c0       	rjmp	.+76     	; 0x2e62 <malloc+0x96>
    2e16:	21 15       	cp	r18, r1
    2e18:	31 05       	cpc	r19, r1
    2e1a:	19 f0       	breq	.+6      	; 0x2e22 <malloc+0x56>
    2e1c:	42 17       	cp	r20, r18
    2e1e:	53 07       	cpc	r21, r19
    2e20:	18 f4       	brcc	.+6      	; 0x2e28 <malloc+0x5c>
    2e22:	9a 01       	movw	r18, r20
    2e24:	be 01       	movw	r22, r28
    2e26:	df 01       	movw	r26, r30
    2e28:	ef 01       	movw	r28, r30
    2e2a:	02 80       	ldd	r0, Z+2	; 0x02
    2e2c:	f3 81       	ldd	r31, Z+3	; 0x03
    2e2e:	e0 2d       	mov	r30, r0
    2e30:	dc cf       	rjmp	.-72     	; 0x2dea <malloc+0x1e>
    2e32:	21 15       	cp	r18, r1
    2e34:	31 05       	cpc	r19, r1
    2e36:	09 f1       	breq	.+66     	; 0x2e7a <malloc+0xae>
    2e38:	28 1b       	sub	r18, r24
    2e3a:	39 0b       	sbc	r19, r25
    2e3c:	24 30       	cpi	r18, 0x04	; 4
    2e3e:	31 05       	cpc	r19, r1
    2e40:	90 f4       	brcc	.+36     	; 0x2e66 <malloc+0x9a>
    2e42:	12 96       	adiw	r26, 0x02	; 2
    2e44:	8d 91       	ld	r24, X+
    2e46:	9c 91       	ld	r25, X
    2e48:	13 97       	sbiw	r26, 0x03	; 3
    2e4a:	61 15       	cp	r22, r1
    2e4c:	71 05       	cpc	r23, r1
    2e4e:	21 f0       	breq	.+8      	; 0x2e58 <malloc+0x8c>
    2e50:	fb 01       	movw	r30, r22
    2e52:	93 83       	std	Z+3, r25	; 0x03
    2e54:	82 83       	std	Z+2, r24	; 0x02
    2e56:	04 c0       	rjmp	.+8      	; 0x2e60 <malloc+0x94>
    2e58:	90 93 f8 05 	sts	0x05F8, r25	; 0x8005f8 <__flp+0x1>
    2e5c:	80 93 f7 05 	sts	0x05F7, r24	; 0x8005f7 <__flp>
    2e60:	fd 01       	movw	r30, r26
    2e62:	32 96       	adiw	r30, 0x02	; 2
    2e64:	44 c0       	rjmp	.+136    	; 0x2eee <malloc+0x122>
    2e66:	fd 01       	movw	r30, r26
    2e68:	e2 0f       	add	r30, r18
    2e6a:	f3 1f       	adc	r31, r19
    2e6c:	81 93       	st	Z+, r24
    2e6e:	91 93       	st	Z+, r25
    2e70:	22 50       	subi	r18, 0x02	; 2
    2e72:	31 09       	sbc	r19, r1
    2e74:	2d 93       	st	X+, r18
    2e76:	3c 93       	st	X, r19
    2e78:	3a c0       	rjmp	.+116    	; 0x2eee <malloc+0x122>
    2e7a:	20 91 f5 05 	lds	r18, 0x05F5	; 0x8005f5 <__brkval>
    2e7e:	30 91 f6 05 	lds	r19, 0x05F6	; 0x8005f6 <__brkval+0x1>
    2e82:	23 2b       	or	r18, r19
    2e84:	41 f4       	brne	.+16     	; 0x2e96 <malloc+0xca>
    2e86:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2e8a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2e8e:	30 93 f6 05 	sts	0x05F6, r19	; 0x8005f6 <__brkval+0x1>
    2e92:	20 93 f5 05 	sts	0x05F5, r18	; 0x8005f5 <__brkval>
    2e96:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2e9a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2e9e:	21 15       	cp	r18, r1
    2ea0:	31 05       	cpc	r19, r1
    2ea2:	41 f4       	brne	.+16     	; 0x2eb4 <malloc+0xe8>
    2ea4:	2d b7       	in	r18, 0x3d	; 61
    2ea6:	3e b7       	in	r19, 0x3e	; 62
    2ea8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2eac:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2eb0:	24 1b       	sub	r18, r20
    2eb2:	35 0b       	sbc	r19, r21
    2eb4:	e0 91 f5 05 	lds	r30, 0x05F5	; 0x8005f5 <__brkval>
    2eb8:	f0 91 f6 05 	lds	r31, 0x05F6	; 0x8005f6 <__brkval+0x1>
    2ebc:	e2 17       	cp	r30, r18
    2ebe:	f3 07       	cpc	r31, r19
    2ec0:	a0 f4       	brcc	.+40     	; 0x2eea <malloc+0x11e>
    2ec2:	2e 1b       	sub	r18, r30
    2ec4:	3f 0b       	sbc	r19, r31
    2ec6:	28 17       	cp	r18, r24
    2ec8:	39 07       	cpc	r19, r25
    2eca:	78 f0       	brcs	.+30     	; 0x2eea <malloc+0x11e>
    2ecc:	ac 01       	movw	r20, r24
    2ece:	4e 5f       	subi	r20, 0xFE	; 254
    2ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ed2:	24 17       	cp	r18, r20
    2ed4:	35 07       	cpc	r19, r21
    2ed6:	48 f0       	brcs	.+18     	; 0x2eea <malloc+0x11e>
    2ed8:	4e 0f       	add	r20, r30
    2eda:	5f 1f       	adc	r21, r31
    2edc:	50 93 f6 05 	sts	0x05F6, r21	; 0x8005f6 <__brkval+0x1>
    2ee0:	40 93 f5 05 	sts	0x05F5, r20	; 0x8005f5 <__brkval>
    2ee4:	81 93       	st	Z+, r24
    2ee6:	91 93       	st	Z+, r25
    2ee8:	02 c0       	rjmp	.+4      	; 0x2eee <malloc+0x122>
    2eea:	e0 e0       	ldi	r30, 0x00	; 0
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	cf 01       	movw	r24, r30
    2ef0:	df 91       	pop	r29
    2ef2:	cf 91       	pop	r28
    2ef4:	08 95       	ret

00002ef6 <free>:
    2ef6:	0f 93       	push	r16
    2ef8:	1f 93       	push	r17
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	09 f4       	brne	.+2      	; 0x2f04 <free+0xe>
    2f02:	8c c0       	rjmp	.+280    	; 0x301c <free+0x126>
    2f04:	fc 01       	movw	r30, r24
    2f06:	32 97       	sbiw	r30, 0x02	; 2
    2f08:	13 82       	std	Z+3, r1	; 0x03
    2f0a:	12 82       	std	Z+2, r1	; 0x02
    2f0c:	00 91 f7 05 	lds	r16, 0x05F7	; 0x8005f7 <__flp>
    2f10:	10 91 f8 05 	lds	r17, 0x05F8	; 0x8005f8 <__flp+0x1>
    2f14:	01 15       	cp	r16, r1
    2f16:	11 05       	cpc	r17, r1
    2f18:	81 f4       	brne	.+32     	; 0x2f3a <free+0x44>
    2f1a:	20 81       	ld	r18, Z
    2f1c:	31 81       	ldd	r19, Z+1	; 0x01
    2f1e:	82 0f       	add	r24, r18
    2f20:	93 1f       	adc	r25, r19
    2f22:	20 91 f5 05 	lds	r18, 0x05F5	; 0x8005f5 <__brkval>
    2f26:	30 91 f6 05 	lds	r19, 0x05F6	; 0x8005f6 <__brkval+0x1>
    2f2a:	28 17       	cp	r18, r24
    2f2c:	39 07       	cpc	r19, r25
    2f2e:	79 f5       	brne	.+94     	; 0x2f8e <free+0x98>
    2f30:	f0 93 f6 05 	sts	0x05F6, r31	; 0x8005f6 <__brkval+0x1>
    2f34:	e0 93 f5 05 	sts	0x05F5, r30	; 0x8005f5 <__brkval>
    2f38:	71 c0       	rjmp	.+226    	; 0x301c <free+0x126>
    2f3a:	d8 01       	movw	r26, r16
    2f3c:	40 e0       	ldi	r20, 0x00	; 0
    2f3e:	50 e0       	ldi	r21, 0x00	; 0
    2f40:	ae 17       	cp	r26, r30
    2f42:	bf 07       	cpc	r27, r31
    2f44:	50 f4       	brcc	.+20     	; 0x2f5a <free+0x64>
    2f46:	12 96       	adiw	r26, 0x02	; 2
    2f48:	2d 91       	ld	r18, X+
    2f4a:	3c 91       	ld	r19, X
    2f4c:	13 97       	sbiw	r26, 0x03	; 3
    2f4e:	ad 01       	movw	r20, r26
    2f50:	21 15       	cp	r18, r1
    2f52:	31 05       	cpc	r19, r1
    2f54:	09 f1       	breq	.+66     	; 0x2f98 <free+0xa2>
    2f56:	d9 01       	movw	r26, r18
    2f58:	f3 cf       	rjmp	.-26     	; 0x2f40 <free+0x4a>
    2f5a:	9d 01       	movw	r18, r26
    2f5c:	da 01       	movw	r26, r20
    2f5e:	33 83       	std	Z+3, r19	; 0x03
    2f60:	22 83       	std	Z+2, r18	; 0x02
    2f62:	60 81       	ld	r22, Z
    2f64:	71 81       	ldd	r23, Z+1	; 0x01
    2f66:	86 0f       	add	r24, r22
    2f68:	97 1f       	adc	r25, r23
    2f6a:	82 17       	cp	r24, r18
    2f6c:	93 07       	cpc	r25, r19
    2f6e:	69 f4       	brne	.+26     	; 0x2f8a <free+0x94>
    2f70:	ec 01       	movw	r28, r24
    2f72:	28 81       	ld	r18, Y
    2f74:	39 81       	ldd	r19, Y+1	; 0x01
    2f76:	26 0f       	add	r18, r22
    2f78:	37 1f       	adc	r19, r23
    2f7a:	2e 5f       	subi	r18, 0xFE	; 254
    2f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7e:	31 83       	std	Z+1, r19	; 0x01
    2f80:	20 83       	st	Z, r18
    2f82:	8a 81       	ldd	r24, Y+2	; 0x02
    2f84:	9b 81       	ldd	r25, Y+3	; 0x03
    2f86:	93 83       	std	Z+3, r25	; 0x03
    2f88:	82 83       	std	Z+2, r24	; 0x02
    2f8a:	45 2b       	or	r20, r21
    2f8c:	29 f4       	brne	.+10     	; 0x2f98 <free+0xa2>
    2f8e:	f0 93 f8 05 	sts	0x05F8, r31	; 0x8005f8 <__flp+0x1>
    2f92:	e0 93 f7 05 	sts	0x05F7, r30	; 0x8005f7 <__flp>
    2f96:	42 c0       	rjmp	.+132    	; 0x301c <free+0x126>
    2f98:	13 96       	adiw	r26, 0x03	; 3
    2f9a:	fc 93       	st	X, r31
    2f9c:	ee 93       	st	-X, r30
    2f9e:	12 97       	sbiw	r26, 0x02	; 2
    2fa0:	ed 01       	movw	r28, r26
    2fa2:	49 91       	ld	r20, Y+
    2fa4:	59 91       	ld	r21, Y+
    2fa6:	9e 01       	movw	r18, r28
    2fa8:	24 0f       	add	r18, r20
    2faa:	35 1f       	adc	r19, r21
    2fac:	e2 17       	cp	r30, r18
    2fae:	f3 07       	cpc	r31, r19
    2fb0:	71 f4       	brne	.+28     	; 0x2fce <free+0xd8>
    2fb2:	80 81       	ld	r24, Z
    2fb4:	91 81       	ldd	r25, Z+1	; 0x01
    2fb6:	84 0f       	add	r24, r20
    2fb8:	95 1f       	adc	r25, r21
    2fba:	02 96       	adiw	r24, 0x02	; 2
    2fbc:	11 96       	adiw	r26, 0x01	; 1
    2fbe:	9c 93       	st	X, r25
    2fc0:	8e 93       	st	-X, r24
    2fc2:	82 81       	ldd	r24, Z+2	; 0x02
    2fc4:	93 81       	ldd	r25, Z+3	; 0x03
    2fc6:	13 96       	adiw	r26, 0x03	; 3
    2fc8:	9c 93       	st	X, r25
    2fca:	8e 93       	st	-X, r24
    2fcc:	12 97       	sbiw	r26, 0x02	; 2
    2fce:	e0 e0       	ldi	r30, 0x00	; 0
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	d8 01       	movw	r26, r16
    2fd4:	12 96       	adiw	r26, 0x02	; 2
    2fd6:	8d 91       	ld	r24, X+
    2fd8:	9c 91       	ld	r25, X
    2fda:	13 97       	sbiw	r26, 0x03	; 3
    2fdc:	00 97       	sbiw	r24, 0x00	; 0
    2fde:	19 f0       	breq	.+6      	; 0x2fe6 <free+0xf0>
    2fe0:	f8 01       	movw	r30, r16
    2fe2:	8c 01       	movw	r16, r24
    2fe4:	f6 cf       	rjmp	.-20     	; 0x2fd2 <free+0xdc>
    2fe6:	8d 91       	ld	r24, X+
    2fe8:	9c 91       	ld	r25, X
    2fea:	98 01       	movw	r18, r16
    2fec:	2e 5f       	subi	r18, 0xFE	; 254
    2fee:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff0:	82 0f       	add	r24, r18
    2ff2:	93 1f       	adc	r25, r19
    2ff4:	20 91 f5 05 	lds	r18, 0x05F5	; 0x8005f5 <__brkval>
    2ff8:	30 91 f6 05 	lds	r19, 0x05F6	; 0x8005f6 <__brkval+0x1>
    2ffc:	28 17       	cp	r18, r24
    2ffe:	39 07       	cpc	r19, r25
    3000:	69 f4       	brne	.+26     	; 0x301c <free+0x126>
    3002:	30 97       	sbiw	r30, 0x00	; 0
    3004:	29 f4       	brne	.+10     	; 0x3010 <free+0x11a>
    3006:	10 92 f8 05 	sts	0x05F8, r1	; 0x8005f8 <__flp+0x1>
    300a:	10 92 f7 05 	sts	0x05F7, r1	; 0x8005f7 <__flp>
    300e:	02 c0       	rjmp	.+4      	; 0x3014 <free+0x11e>
    3010:	13 82       	std	Z+3, r1	; 0x03
    3012:	12 82       	std	Z+2, r1	; 0x02
    3014:	10 93 f6 05 	sts	0x05F6, r17	; 0x8005f6 <__brkval+0x1>
    3018:	00 93 f5 05 	sts	0x05F5, r16	; 0x8005f5 <__brkval>
    301c:	df 91       	pop	r29
    301e:	cf 91       	pop	r28
    3020:	1f 91       	pop	r17
    3022:	0f 91       	pop	r16
    3024:	08 95       	ret

00003026 <abort>:
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	f8 94       	cli
    302c:	c3 c3       	rjmp	.+1926   	; 0x37b4 <_exit>

0000302e <strcmp_P>:
    302e:	fb 01       	movw	r30, r22
    3030:	dc 01       	movw	r26, r24
    3032:	8d 91       	ld	r24, X+
    3034:	05 90       	lpm	r0, Z+
    3036:	80 19       	sub	r24, r0
    3038:	01 10       	cpse	r0, r1
    303a:	d9 f3       	breq	.-10     	; 0x3032 <strcmp_P+0x4>
    303c:	99 0b       	sbc	r25, r25
    303e:	08 95       	ret

00003040 <strncmp_P>:
    3040:	fb 01       	movw	r30, r22
    3042:	dc 01       	movw	r26, r24
    3044:	41 50       	subi	r20, 0x01	; 1
    3046:	50 40       	sbci	r21, 0x00	; 0
    3048:	30 f0       	brcs	.+12     	; 0x3056 <strncmp_P+0x16>
    304a:	8d 91       	ld	r24, X+
    304c:	05 90       	lpm	r0, Z+
    304e:	80 19       	sub	r24, r0
    3050:	19 f4       	brne	.+6      	; 0x3058 <strncmp_P+0x18>
    3052:	00 20       	and	r0, r0
    3054:	b9 f7       	brne	.-18     	; 0x3044 <strncmp_P+0x4>
    3056:	88 1b       	sub	r24, r24
    3058:	99 0b       	sbc	r25, r25
    305a:	08 95       	ret

0000305c <memcmp>:
    305c:	fb 01       	movw	r30, r22
    305e:	dc 01       	movw	r26, r24
    3060:	04 c0       	rjmp	.+8      	; 0x306a <memcmp+0xe>
    3062:	8d 91       	ld	r24, X+
    3064:	01 90       	ld	r0, Z+
    3066:	80 19       	sub	r24, r0
    3068:	21 f4       	brne	.+8      	; 0x3072 <memcmp+0x16>
    306a:	41 50       	subi	r20, 0x01	; 1
    306c:	50 40       	sbci	r21, 0x00	; 0
    306e:	c8 f7       	brcc	.-14     	; 0x3062 <memcmp+0x6>
    3070:	88 1b       	sub	r24, r24
    3072:	99 0b       	sbc	r25, r25
    3074:	08 95       	ret

00003076 <memcpy>:
    3076:	fb 01       	movw	r30, r22
    3078:	dc 01       	movw	r26, r24
    307a:	02 c0       	rjmp	.+4      	; 0x3080 <memcpy+0xa>
    307c:	01 90       	ld	r0, Z+
    307e:	0d 92       	st	X+, r0
    3080:	41 50       	subi	r20, 0x01	; 1
    3082:	50 40       	sbci	r21, 0x00	; 0
    3084:	d8 f7       	brcc	.-10     	; 0x307c <memcpy+0x6>
    3086:	08 95       	ret

00003088 <memmove>:
    3088:	68 17       	cp	r22, r24
    308a:	79 07       	cpc	r23, r25
    308c:	68 f4       	brcc	.+26     	; 0x30a8 <memmove+0x20>
    308e:	fb 01       	movw	r30, r22
    3090:	dc 01       	movw	r26, r24
    3092:	e4 0f       	add	r30, r20
    3094:	f5 1f       	adc	r31, r21
    3096:	a4 0f       	add	r26, r20
    3098:	b5 1f       	adc	r27, r21
    309a:	02 c0       	rjmp	.+4      	; 0x30a0 <memmove+0x18>
    309c:	02 90       	ld	r0, -Z
    309e:	0e 92       	st	-X, r0
    30a0:	41 50       	subi	r20, 0x01	; 1
    30a2:	50 40       	sbci	r21, 0x00	; 0
    30a4:	d8 f7       	brcc	.-10     	; 0x309c <memmove+0x14>
    30a6:	08 95       	ret
    30a8:	e6 cf       	rjmp	.-52     	; 0x3076 <memcpy>

000030aa <strcat>:
    30aa:	fb 01       	movw	r30, r22
    30ac:	dc 01       	movw	r26, r24
    30ae:	0d 90       	ld	r0, X+
    30b0:	00 20       	and	r0, r0
    30b2:	e9 f7       	brne	.-6      	; 0x30ae <strcat+0x4>
    30b4:	11 97       	sbiw	r26, 0x01	; 1
    30b6:	01 90       	ld	r0, Z+
    30b8:	0d 92       	st	X+, r0
    30ba:	00 20       	and	r0, r0
    30bc:	e1 f7       	brne	.-8      	; 0x30b6 <strcat+0xc>
    30be:	08 95       	ret

000030c0 <strcmp>:
    30c0:	fb 01       	movw	r30, r22
    30c2:	dc 01       	movw	r26, r24
    30c4:	8d 91       	ld	r24, X+
    30c6:	01 90       	ld	r0, Z+
    30c8:	80 19       	sub	r24, r0
    30ca:	01 10       	cpse	r0, r1
    30cc:	d9 f3       	breq	.-10     	; 0x30c4 <strcmp+0x4>
    30ce:	99 0b       	sbc	r25, r25
    30d0:	08 95       	ret

000030d2 <strcpy>:
    30d2:	fb 01       	movw	r30, r22
    30d4:	dc 01       	movw	r26, r24
    30d6:	01 90       	ld	r0, Z+
    30d8:	0d 92       	st	X+, r0
    30da:	00 20       	and	r0, r0
    30dc:	e1 f7       	brne	.-8      	; 0x30d6 <strcpy+0x4>
    30de:	08 95       	ret

000030e0 <fprintf>:
    30e0:	cf 93       	push	r28
    30e2:	df 93       	push	r29
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	ae 01       	movw	r20, r28
    30ea:	46 5f       	subi	r20, 0xF6	; 246
    30ec:	5f 4f       	sbci	r21, 0xFF	; 255
    30ee:	68 85       	ldd	r22, Y+8	; 0x08
    30f0:	79 85       	ldd	r23, Y+9	; 0x09
    30f2:	8e 81       	ldd	r24, Y+6	; 0x06
    30f4:	9f 81       	ldd	r25, Y+7	; 0x07
    30f6:	fc d0       	rcall	.+504    	; 0x32f0 <vfprintf>
    30f8:	df 91       	pop	r29
    30fa:	cf 91       	pop	r28
    30fc:	08 95       	ret

000030fe <fprintf_P>:
    30fe:	0f 93       	push	r16
    3100:	1f 93       	push	r17
    3102:	cf 93       	push	r28
    3104:	df 93       	push	r29
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
    310a:	08 85       	ldd	r16, Y+8	; 0x08
    310c:	19 85       	ldd	r17, Y+9	; 0x09
    310e:	f8 01       	movw	r30, r16
    3110:	83 81       	ldd	r24, Z+3	; 0x03
    3112:	88 60       	ori	r24, 0x08	; 8
    3114:	83 83       	std	Z+3, r24	; 0x03
    3116:	ae 01       	movw	r20, r28
    3118:	44 5f       	subi	r20, 0xF4	; 244
    311a:	5f 4f       	sbci	r21, 0xFF	; 255
    311c:	6a 85       	ldd	r22, Y+10	; 0x0a
    311e:	7b 85       	ldd	r23, Y+11	; 0x0b
    3120:	c8 01       	movw	r24, r16
    3122:	e6 d0       	rcall	.+460    	; 0x32f0 <vfprintf>
    3124:	f8 01       	movw	r30, r16
    3126:	23 81       	ldd	r18, Z+3	; 0x03
    3128:	27 7f       	andi	r18, 0xF7	; 247
    312a:	23 83       	std	Z+3, r18	; 0x03
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	1f 91       	pop	r17
    3132:	0f 91       	pop	r16
    3134:	08 95       	ret

00003136 <fputc>:
    3136:	0f 93       	push	r16
    3138:	1f 93       	push	r17
    313a:	cf 93       	push	r28
    313c:	df 93       	push	r29
    313e:	fb 01       	movw	r30, r22
    3140:	23 81       	ldd	r18, Z+3	; 0x03
    3142:	21 fd       	sbrc	r18, 1
    3144:	03 c0       	rjmp	.+6      	; 0x314c <fputc+0x16>
    3146:	8f ef       	ldi	r24, 0xFF	; 255
    3148:	9f ef       	ldi	r25, 0xFF	; 255
    314a:	28 c0       	rjmp	.+80     	; 0x319c <fputc+0x66>
    314c:	22 ff       	sbrs	r18, 2
    314e:	16 c0       	rjmp	.+44     	; 0x317c <fputc+0x46>
    3150:	46 81       	ldd	r20, Z+6	; 0x06
    3152:	57 81       	ldd	r21, Z+7	; 0x07
    3154:	24 81       	ldd	r18, Z+4	; 0x04
    3156:	35 81       	ldd	r19, Z+5	; 0x05
    3158:	42 17       	cp	r20, r18
    315a:	53 07       	cpc	r21, r19
    315c:	44 f4       	brge	.+16     	; 0x316e <fputc+0x38>
    315e:	a0 81       	ld	r26, Z
    3160:	b1 81       	ldd	r27, Z+1	; 0x01
    3162:	9d 01       	movw	r18, r26
    3164:	2f 5f       	subi	r18, 0xFF	; 255
    3166:	3f 4f       	sbci	r19, 0xFF	; 255
    3168:	31 83       	std	Z+1, r19	; 0x01
    316a:	20 83       	st	Z, r18
    316c:	8c 93       	st	X, r24
    316e:	26 81       	ldd	r18, Z+6	; 0x06
    3170:	37 81       	ldd	r19, Z+7	; 0x07
    3172:	2f 5f       	subi	r18, 0xFF	; 255
    3174:	3f 4f       	sbci	r19, 0xFF	; 255
    3176:	37 83       	std	Z+7, r19	; 0x07
    3178:	26 83       	std	Z+6, r18	; 0x06
    317a:	10 c0       	rjmp	.+32     	; 0x319c <fputc+0x66>
    317c:	eb 01       	movw	r28, r22
    317e:	09 2f       	mov	r16, r25
    3180:	18 2f       	mov	r17, r24
    3182:	00 84       	ldd	r0, Z+8	; 0x08
    3184:	f1 85       	ldd	r31, Z+9	; 0x09
    3186:	e0 2d       	mov	r30, r0
    3188:	19 95       	eicall
    318a:	89 2b       	or	r24, r25
    318c:	e1 f6       	brne	.-72     	; 0x3146 <fputc+0x10>
    318e:	8e 81       	ldd	r24, Y+6	; 0x06
    3190:	9f 81       	ldd	r25, Y+7	; 0x07
    3192:	01 96       	adiw	r24, 0x01	; 1
    3194:	9f 83       	std	Y+7, r25	; 0x07
    3196:	8e 83       	std	Y+6, r24	; 0x06
    3198:	81 2f       	mov	r24, r17
    319a:	90 2f       	mov	r25, r16
    319c:	df 91       	pop	r29
    319e:	cf 91       	pop	r28
    31a0:	1f 91       	pop	r17
    31a2:	0f 91       	pop	r16
    31a4:	08 95       	ret

000031a6 <printf>:
    31a6:	cf 93       	push	r28
    31a8:	df 93       	push	r29
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
    31ae:	ae 01       	movw	r20, r28
    31b0:	4a 5f       	subi	r20, 0xFA	; 250
    31b2:	5f 4f       	sbci	r21, 0xFF	; 255
    31b4:	fa 01       	movw	r30, r20
    31b6:	61 91       	ld	r22, Z+
    31b8:	71 91       	ld	r23, Z+
    31ba:	af 01       	movw	r20, r30
    31bc:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <__iob+0x2>
    31c0:	90 91 fc 05 	lds	r25, 0x05FC	; 0x8005fc <__iob+0x3>
    31c4:	95 d0       	rcall	.+298    	; 0x32f0 <vfprintf>
    31c6:	df 91       	pop	r29
    31c8:	cf 91       	pop	r28
    31ca:	08 95       	ret

000031cc <printf_P>:
    31cc:	0f 93       	push	r16
    31ce:	1f 93       	push	r17
    31d0:	cf 93       	push	r28
    31d2:	df 93       	push	r29
    31d4:	cd b7       	in	r28, 0x3d	; 61
    31d6:	de b7       	in	r29, 0x3e	; 62
    31d8:	ae 01       	movw	r20, r28
    31da:	48 5f       	subi	r20, 0xF8	; 248
    31dc:	5f 4f       	sbci	r21, 0xFF	; 255
    31de:	da 01       	movw	r26, r20
    31e0:	6d 91       	ld	r22, X+
    31e2:	7d 91       	ld	r23, X+
    31e4:	ad 01       	movw	r20, r26
    31e6:	09 ef       	ldi	r16, 0xF9	; 249
    31e8:	15 e0       	ldi	r17, 0x05	; 5
    31ea:	f8 01       	movw	r30, r16
    31ec:	82 81       	ldd	r24, Z+2	; 0x02
    31ee:	93 81       	ldd	r25, Z+3	; 0x03
    31f0:	dc 01       	movw	r26, r24
    31f2:	13 96       	adiw	r26, 0x03	; 3
    31f4:	2c 91       	ld	r18, X
    31f6:	13 97       	sbiw	r26, 0x03	; 3
    31f8:	28 60       	ori	r18, 0x08	; 8
    31fa:	13 96       	adiw	r26, 0x03	; 3
    31fc:	2c 93       	st	X, r18
    31fe:	78 d0       	rcall	.+240    	; 0x32f0 <vfprintf>
    3200:	d8 01       	movw	r26, r16
    3202:	12 96       	adiw	r26, 0x02	; 2
    3204:	ed 91       	ld	r30, X+
    3206:	fc 91       	ld	r31, X
    3208:	13 97       	sbiw	r26, 0x03	; 3
    320a:	23 81       	ldd	r18, Z+3	; 0x03
    320c:	27 7f       	andi	r18, 0xF7	; 247
    320e:	23 83       	std	Z+3, r18	; 0x03
    3210:	df 91       	pop	r29
    3212:	cf 91       	pop	r28
    3214:	1f 91       	pop	r17
    3216:	0f 91       	pop	r16
    3218:	08 95       	ret

0000321a <snprintf>:
    321a:	0f 93       	push	r16
    321c:	1f 93       	push	r17
    321e:	cf 93       	push	r28
    3220:	df 93       	push	r29
    3222:	cd b7       	in	r28, 0x3d	; 61
    3224:	de b7       	in	r29, 0x3e	; 62
    3226:	2e 97       	sbiw	r28, 0x0e	; 14
    3228:	0f b6       	in	r0, 0x3f	; 63
    322a:	f8 94       	cli
    322c:	de bf       	out	0x3e, r29	; 62
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	cd bf       	out	0x3d, r28	; 61
    3232:	0e 89       	ldd	r16, Y+22	; 0x16
    3234:	1f 89       	ldd	r17, Y+23	; 0x17
    3236:	88 8d       	ldd	r24, Y+24	; 0x18
    3238:	99 8d       	ldd	r25, Y+25	; 0x19
    323a:	26 e0       	ldi	r18, 0x06	; 6
    323c:	2c 83       	std	Y+4, r18	; 0x04
    323e:	1a 83       	std	Y+2, r17	; 0x02
    3240:	09 83       	std	Y+1, r16	; 0x01
    3242:	97 ff       	sbrs	r25, 7
    3244:	02 c0       	rjmp	.+4      	; 0x324a <snprintf+0x30>
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	90 e8       	ldi	r25, 0x80	; 128
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	9e 83       	std	Y+6, r25	; 0x06
    324e:	8d 83       	std	Y+5, r24	; 0x05
    3250:	ae 01       	movw	r20, r28
    3252:	44 5e       	subi	r20, 0xE4	; 228
    3254:	5f 4f       	sbci	r21, 0xFF	; 255
    3256:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3258:	7b 8d       	ldd	r23, Y+27	; 0x1b
    325a:	ce 01       	movw	r24, r28
    325c:	01 96       	adiw	r24, 0x01	; 1
    325e:	48 d0       	rcall	.+144    	; 0x32f0 <vfprintf>
    3260:	4d 81       	ldd	r20, Y+5	; 0x05
    3262:	5e 81       	ldd	r21, Y+6	; 0x06
    3264:	57 fd       	sbrc	r21, 7
    3266:	0a c0       	rjmp	.+20     	; 0x327c <snprintf+0x62>
    3268:	2f 81       	ldd	r18, Y+7	; 0x07
    326a:	38 85       	ldd	r19, Y+8	; 0x08
    326c:	42 17       	cp	r20, r18
    326e:	53 07       	cpc	r21, r19
    3270:	0c f4       	brge	.+2      	; 0x3274 <snprintf+0x5a>
    3272:	9a 01       	movw	r18, r20
    3274:	f8 01       	movw	r30, r16
    3276:	e2 0f       	add	r30, r18
    3278:	f3 1f       	adc	r31, r19
    327a:	10 82       	st	Z, r1
    327c:	2e 96       	adiw	r28, 0x0e	; 14
    327e:	0f b6       	in	r0, 0x3f	; 63
    3280:	f8 94       	cli
    3282:	de bf       	out	0x3e, r29	; 62
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	cd bf       	out	0x3d, r28	; 61
    3288:	df 91       	pop	r29
    328a:	cf 91       	pop	r28
    328c:	1f 91       	pop	r17
    328e:	0f 91       	pop	r16
    3290:	08 95       	ret

00003292 <sprintf>:
    3292:	0f 93       	push	r16
    3294:	1f 93       	push	r17
    3296:	cf 93       	push	r28
    3298:	df 93       	push	r29
    329a:	cd b7       	in	r28, 0x3d	; 61
    329c:	de b7       	in	r29, 0x3e	; 62
    329e:	2e 97       	sbiw	r28, 0x0e	; 14
    32a0:	0f b6       	in	r0, 0x3f	; 63
    32a2:	f8 94       	cli
    32a4:	de bf       	out	0x3e, r29	; 62
    32a6:	0f be       	out	0x3f, r0	; 63
    32a8:	cd bf       	out	0x3d, r28	; 61
    32aa:	0e 89       	ldd	r16, Y+22	; 0x16
    32ac:	1f 89       	ldd	r17, Y+23	; 0x17
    32ae:	86 e0       	ldi	r24, 0x06	; 6
    32b0:	8c 83       	std	Y+4, r24	; 0x04
    32b2:	1a 83       	std	Y+2, r17	; 0x02
    32b4:	09 83       	std	Y+1, r16	; 0x01
    32b6:	8f ef       	ldi	r24, 0xFF	; 255
    32b8:	9f e7       	ldi	r25, 0x7F	; 127
    32ba:	9e 83       	std	Y+6, r25	; 0x06
    32bc:	8d 83       	std	Y+5, r24	; 0x05
    32be:	ae 01       	movw	r20, r28
    32c0:	46 5e       	subi	r20, 0xE6	; 230
    32c2:	5f 4f       	sbci	r21, 0xFF	; 255
    32c4:	68 8d       	ldd	r22, Y+24	; 0x18
    32c6:	79 8d       	ldd	r23, Y+25	; 0x19
    32c8:	ce 01       	movw	r24, r28
    32ca:	01 96       	adiw	r24, 0x01	; 1
    32cc:	11 d0       	rcall	.+34     	; 0x32f0 <vfprintf>
    32ce:	2f 81       	ldd	r18, Y+7	; 0x07
    32d0:	38 85       	ldd	r19, Y+8	; 0x08
    32d2:	f8 01       	movw	r30, r16
    32d4:	e2 0f       	add	r30, r18
    32d6:	f3 1f       	adc	r31, r19
    32d8:	10 82       	st	Z, r1
    32da:	2e 96       	adiw	r28, 0x0e	; 14
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	f8 94       	cli
    32e0:	de bf       	out	0x3e, r29	; 62
    32e2:	0f be       	out	0x3f, r0	; 63
    32e4:	cd bf       	out	0x3d, r28	; 61
    32e6:	df 91       	pop	r29
    32e8:	cf 91       	pop	r28
    32ea:	1f 91       	pop	r17
    32ec:	0f 91       	pop	r16
    32ee:	08 95       	ret

000032f0 <vfprintf>:
    32f0:	2f 92       	push	r2
    32f2:	3f 92       	push	r3
    32f4:	4f 92       	push	r4
    32f6:	5f 92       	push	r5
    32f8:	6f 92       	push	r6
    32fa:	7f 92       	push	r7
    32fc:	8f 92       	push	r8
    32fe:	9f 92       	push	r9
    3300:	af 92       	push	r10
    3302:	bf 92       	push	r11
    3304:	cf 92       	push	r12
    3306:	df 92       	push	r13
    3308:	ef 92       	push	r14
    330a:	ff 92       	push	r15
    330c:	0f 93       	push	r16
    330e:	1f 93       	push	r17
    3310:	cf 93       	push	r28
    3312:	df 93       	push	r29
    3314:	cd b7       	in	r28, 0x3d	; 61
    3316:	de b7       	in	r29, 0x3e	; 62
    3318:	2c 97       	sbiw	r28, 0x0c	; 12
    331a:	0f b6       	in	r0, 0x3f	; 63
    331c:	f8 94       	cli
    331e:	de bf       	out	0x3e, r29	; 62
    3320:	0f be       	out	0x3f, r0	; 63
    3322:	cd bf       	out	0x3d, r28	; 61
    3324:	7c 01       	movw	r14, r24
    3326:	6b 01       	movw	r12, r22
    3328:	8a 01       	movw	r16, r20
    332a:	fc 01       	movw	r30, r24
    332c:	17 82       	std	Z+7, r1	; 0x07
    332e:	16 82       	std	Z+6, r1	; 0x06
    3330:	83 81       	ldd	r24, Z+3	; 0x03
    3332:	81 ff       	sbrs	r24, 1
    3334:	b0 c1       	rjmp	.+864    	; 0x3696 <vfprintf+0x3a6>
    3336:	ce 01       	movw	r24, r28
    3338:	01 96       	adiw	r24, 0x01	; 1
    333a:	4c 01       	movw	r8, r24
    333c:	f7 01       	movw	r30, r14
    333e:	93 81       	ldd	r25, Z+3	; 0x03
    3340:	f6 01       	movw	r30, r12
    3342:	93 fd       	sbrc	r25, 3
    3344:	85 91       	lpm	r24, Z+
    3346:	93 ff       	sbrs	r25, 3
    3348:	81 91       	ld	r24, Z+
    334a:	6f 01       	movw	r12, r30
    334c:	88 23       	and	r24, r24
    334e:	09 f4       	brne	.+2      	; 0x3352 <vfprintf+0x62>
    3350:	9e c1       	rjmp	.+828    	; 0x368e <vfprintf+0x39e>
    3352:	85 32       	cpi	r24, 0x25	; 37
    3354:	39 f4       	brne	.+14     	; 0x3364 <vfprintf+0x74>
    3356:	93 fd       	sbrc	r25, 3
    3358:	85 91       	lpm	r24, Z+
    335a:	93 ff       	sbrs	r25, 3
    335c:	81 91       	ld	r24, Z+
    335e:	6f 01       	movw	r12, r30
    3360:	85 32       	cpi	r24, 0x25	; 37
    3362:	21 f4       	brne	.+8      	; 0x336c <vfprintf+0x7c>
    3364:	b7 01       	movw	r22, r14
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	e6 de       	rcall	.-564    	; 0x3136 <fputc>
    336a:	e8 cf       	rjmp	.-48     	; 0x333c <vfprintf+0x4c>
    336c:	51 2c       	mov	r5, r1
    336e:	31 2c       	mov	r3, r1
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	20 32       	cpi	r18, 0x20	; 32
    3374:	a0 f4       	brcc	.+40     	; 0x339e <vfprintf+0xae>
    3376:	8b 32       	cpi	r24, 0x2B	; 43
    3378:	69 f0       	breq	.+26     	; 0x3394 <vfprintf+0xa4>
    337a:	30 f4       	brcc	.+12     	; 0x3388 <vfprintf+0x98>
    337c:	80 32       	cpi	r24, 0x20	; 32
    337e:	59 f0       	breq	.+22     	; 0x3396 <vfprintf+0xa6>
    3380:	83 32       	cpi	r24, 0x23	; 35
    3382:	69 f4       	brne	.+26     	; 0x339e <vfprintf+0xae>
    3384:	20 61       	ori	r18, 0x10	; 16
    3386:	2c c0       	rjmp	.+88     	; 0x33e0 <vfprintf+0xf0>
    3388:	8d 32       	cpi	r24, 0x2D	; 45
    338a:	39 f0       	breq	.+14     	; 0x339a <vfprintf+0xaa>
    338c:	80 33       	cpi	r24, 0x30	; 48
    338e:	39 f4       	brne	.+14     	; 0x339e <vfprintf+0xae>
    3390:	21 60       	ori	r18, 0x01	; 1
    3392:	26 c0       	rjmp	.+76     	; 0x33e0 <vfprintf+0xf0>
    3394:	22 60       	ori	r18, 0x02	; 2
    3396:	24 60       	ori	r18, 0x04	; 4
    3398:	23 c0       	rjmp	.+70     	; 0x33e0 <vfprintf+0xf0>
    339a:	28 60       	ori	r18, 0x08	; 8
    339c:	21 c0       	rjmp	.+66     	; 0x33e0 <vfprintf+0xf0>
    339e:	27 fd       	sbrc	r18, 7
    33a0:	27 c0       	rjmp	.+78     	; 0x33f0 <vfprintf+0x100>
    33a2:	30 ed       	ldi	r19, 0xD0	; 208
    33a4:	38 0f       	add	r19, r24
    33a6:	3a 30       	cpi	r19, 0x0A	; 10
    33a8:	78 f4       	brcc	.+30     	; 0x33c8 <vfprintf+0xd8>
    33aa:	26 ff       	sbrs	r18, 6
    33ac:	06 c0       	rjmp	.+12     	; 0x33ba <vfprintf+0xca>
    33ae:	fa e0       	ldi	r31, 0x0A	; 10
    33b0:	5f 9e       	mul	r5, r31
    33b2:	30 0d       	add	r19, r0
    33b4:	11 24       	eor	r1, r1
    33b6:	53 2e       	mov	r5, r19
    33b8:	13 c0       	rjmp	.+38     	; 0x33e0 <vfprintf+0xf0>
    33ba:	8a e0       	ldi	r24, 0x0A	; 10
    33bc:	38 9e       	mul	r3, r24
    33be:	30 0d       	add	r19, r0
    33c0:	11 24       	eor	r1, r1
    33c2:	33 2e       	mov	r3, r19
    33c4:	20 62       	ori	r18, 0x20	; 32
    33c6:	0c c0       	rjmp	.+24     	; 0x33e0 <vfprintf+0xf0>
    33c8:	8e 32       	cpi	r24, 0x2E	; 46
    33ca:	21 f4       	brne	.+8      	; 0x33d4 <vfprintf+0xe4>
    33cc:	26 fd       	sbrc	r18, 6
    33ce:	5f c1       	rjmp	.+702    	; 0x368e <vfprintf+0x39e>
    33d0:	20 64       	ori	r18, 0x40	; 64
    33d2:	06 c0       	rjmp	.+12     	; 0x33e0 <vfprintf+0xf0>
    33d4:	8c 36       	cpi	r24, 0x6C	; 108
    33d6:	11 f4       	brne	.+4      	; 0x33dc <vfprintf+0xec>
    33d8:	20 68       	ori	r18, 0x80	; 128
    33da:	02 c0       	rjmp	.+4      	; 0x33e0 <vfprintf+0xf0>
    33dc:	88 36       	cpi	r24, 0x68	; 104
    33de:	41 f4       	brne	.+16     	; 0x33f0 <vfprintf+0x100>
    33e0:	f6 01       	movw	r30, r12
    33e2:	93 fd       	sbrc	r25, 3
    33e4:	85 91       	lpm	r24, Z+
    33e6:	93 ff       	sbrs	r25, 3
    33e8:	81 91       	ld	r24, Z+
    33ea:	6f 01       	movw	r12, r30
    33ec:	81 11       	cpse	r24, r1
    33ee:	c1 cf       	rjmp	.-126    	; 0x3372 <vfprintf+0x82>
    33f0:	98 2f       	mov	r25, r24
    33f2:	9f 7d       	andi	r25, 0xDF	; 223
    33f4:	95 54       	subi	r25, 0x45	; 69
    33f6:	93 30       	cpi	r25, 0x03	; 3
    33f8:	28 f4       	brcc	.+10     	; 0x3404 <vfprintf+0x114>
    33fa:	0c 5f       	subi	r16, 0xFC	; 252
    33fc:	1f 4f       	sbci	r17, 0xFF	; 255
    33fe:	ff e3       	ldi	r31, 0x3F	; 63
    3400:	f9 83       	std	Y+1, r31	; 0x01
    3402:	0d c0       	rjmp	.+26     	; 0x341e <vfprintf+0x12e>
    3404:	83 36       	cpi	r24, 0x63	; 99
    3406:	31 f0       	breq	.+12     	; 0x3414 <vfprintf+0x124>
    3408:	83 37       	cpi	r24, 0x73	; 115
    340a:	71 f0       	breq	.+28     	; 0x3428 <vfprintf+0x138>
    340c:	83 35       	cpi	r24, 0x53	; 83
    340e:	09 f0       	breq	.+2      	; 0x3412 <vfprintf+0x122>
    3410:	57 c0       	rjmp	.+174    	; 0x34c0 <vfprintf+0x1d0>
    3412:	21 c0       	rjmp	.+66     	; 0x3456 <vfprintf+0x166>
    3414:	f8 01       	movw	r30, r16
    3416:	80 81       	ld	r24, Z
    3418:	89 83       	std	Y+1, r24	; 0x01
    341a:	0e 5f       	subi	r16, 0xFE	; 254
    341c:	1f 4f       	sbci	r17, 0xFF	; 255
    341e:	44 24       	eor	r4, r4
    3420:	43 94       	inc	r4
    3422:	51 2c       	mov	r5, r1
    3424:	54 01       	movw	r10, r8
    3426:	14 c0       	rjmp	.+40     	; 0x3450 <vfprintf+0x160>
    3428:	38 01       	movw	r6, r16
    342a:	f2 e0       	ldi	r31, 0x02	; 2
    342c:	6f 0e       	add	r6, r31
    342e:	71 1c       	adc	r7, r1
    3430:	f8 01       	movw	r30, r16
    3432:	a0 80       	ld	r10, Z
    3434:	b1 80       	ldd	r11, Z+1	; 0x01
    3436:	26 ff       	sbrs	r18, 6
    3438:	03 c0       	rjmp	.+6      	; 0x3440 <vfprintf+0x150>
    343a:	65 2d       	mov	r22, r5
    343c:	70 e0       	ldi	r23, 0x00	; 0
    343e:	02 c0       	rjmp	.+4      	; 0x3444 <vfprintf+0x154>
    3440:	6f ef       	ldi	r22, 0xFF	; 255
    3442:	7f ef       	ldi	r23, 0xFF	; 255
    3444:	c5 01       	movw	r24, r10
    3446:	2c 87       	std	Y+12, r18	; 0x0c
    3448:	4c d1       	rcall	.+664    	; 0x36e2 <strnlen>
    344a:	2c 01       	movw	r4, r24
    344c:	83 01       	movw	r16, r6
    344e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3450:	2f 77       	andi	r18, 0x7F	; 127
    3452:	22 2e       	mov	r2, r18
    3454:	16 c0       	rjmp	.+44     	; 0x3482 <vfprintf+0x192>
    3456:	38 01       	movw	r6, r16
    3458:	f2 e0       	ldi	r31, 0x02	; 2
    345a:	6f 0e       	add	r6, r31
    345c:	71 1c       	adc	r7, r1
    345e:	f8 01       	movw	r30, r16
    3460:	a0 80       	ld	r10, Z
    3462:	b1 80       	ldd	r11, Z+1	; 0x01
    3464:	26 ff       	sbrs	r18, 6
    3466:	03 c0       	rjmp	.+6      	; 0x346e <vfprintf+0x17e>
    3468:	65 2d       	mov	r22, r5
    346a:	70 e0       	ldi	r23, 0x00	; 0
    346c:	02 c0       	rjmp	.+4      	; 0x3472 <vfprintf+0x182>
    346e:	6f ef       	ldi	r22, 0xFF	; 255
    3470:	7f ef       	ldi	r23, 0xFF	; 255
    3472:	c5 01       	movw	r24, r10
    3474:	2c 87       	std	Y+12, r18	; 0x0c
    3476:	2a d1       	rcall	.+596    	; 0x36cc <strnlen_P>
    3478:	2c 01       	movw	r4, r24
    347a:	2c 85       	ldd	r18, Y+12	; 0x0c
    347c:	20 68       	ori	r18, 0x80	; 128
    347e:	22 2e       	mov	r2, r18
    3480:	83 01       	movw	r16, r6
    3482:	23 fc       	sbrc	r2, 3
    3484:	19 c0       	rjmp	.+50     	; 0x34b8 <vfprintf+0x1c8>
    3486:	83 2d       	mov	r24, r3
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	48 16       	cp	r4, r24
    348c:	59 06       	cpc	r5, r25
    348e:	a0 f4       	brcc	.+40     	; 0x34b8 <vfprintf+0x1c8>
    3490:	b7 01       	movw	r22, r14
    3492:	80 e2       	ldi	r24, 0x20	; 32
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	4f de       	rcall	.-866    	; 0x3136 <fputc>
    3498:	3a 94       	dec	r3
    349a:	f5 cf       	rjmp	.-22     	; 0x3486 <vfprintf+0x196>
    349c:	f5 01       	movw	r30, r10
    349e:	27 fc       	sbrc	r2, 7
    34a0:	85 91       	lpm	r24, Z+
    34a2:	27 fe       	sbrs	r2, 7
    34a4:	81 91       	ld	r24, Z+
    34a6:	5f 01       	movw	r10, r30
    34a8:	b7 01       	movw	r22, r14
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	44 de       	rcall	.-888    	; 0x3136 <fputc>
    34ae:	31 10       	cpse	r3, r1
    34b0:	3a 94       	dec	r3
    34b2:	f1 e0       	ldi	r31, 0x01	; 1
    34b4:	4f 1a       	sub	r4, r31
    34b6:	51 08       	sbc	r5, r1
    34b8:	41 14       	cp	r4, r1
    34ba:	51 04       	cpc	r5, r1
    34bc:	79 f7       	brne	.-34     	; 0x349c <vfprintf+0x1ac>
    34be:	de c0       	rjmp	.+444    	; 0x367c <vfprintf+0x38c>
    34c0:	84 36       	cpi	r24, 0x64	; 100
    34c2:	11 f0       	breq	.+4      	; 0x34c8 <vfprintf+0x1d8>
    34c4:	89 36       	cpi	r24, 0x69	; 105
    34c6:	31 f5       	brne	.+76     	; 0x3514 <vfprintf+0x224>
    34c8:	f8 01       	movw	r30, r16
    34ca:	27 ff       	sbrs	r18, 7
    34cc:	07 c0       	rjmp	.+14     	; 0x34dc <vfprintf+0x1ec>
    34ce:	60 81       	ld	r22, Z
    34d0:	71 81       	ldd	r23, Z+1	; 0x01
    34d2:	82 81       	ldd	r24, Z+2	; 0x02
    34d4:	93 81       	ldd	r25, Z+3	; 0x03
    34d6:	0c 5f       	subi	r16, 0xFC	; 252
    34d8:	1f 4f       	sbci	r17, 0xFF	; 255
    34da:	08 c0       	rjmp	.+16     	; 0x34ec <vfprintf+0x1fc>
    34dc:	60 81       	ld	r22, Z
    34de:	71 81       	ldd	r23, Z+1	; 0x01
    34e0:	07 2e       	mov	r0, r23
    34e2:	00 0c       	add	r0, r0
    34e4:	88 0b       	sbc	r24, r24
    34e6:	99 0b       	sbc	r25, r25
    34e8:	0e 5f       	subi	r16, 0xFE	; 254
    34ea:	1f 4f       	sbci	r17, 0xFF	; 255
    34ec:	2f 76       	andi	r18, 0x6F	; 111
    34ee:	72 2e       	mov	r7, r18
    34f0:	97 ff       	sbrs	r25, 7
    34f2:	09 c0       	rjmp	.+18     	; 0x3506 <vfprintf+0x216>
    34f4:	90 95       	com	r25
    34f6:	80 95       	com	r24
    34f8:	70 95       	com	r23
    34fa:	61 95       	neg	r22
    34fc:	7f 4f       	sbci	r23, 0xFF	; 255
    34fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3500:	9f 4f       	sbci	r25, 0xFF	; 255
    3502:	20 68       	ori	r18, 0x80	; 128
    3504:	72 2e       	mov	r7, r18
    3506:	2a e0       	ldi	r18, 0x0A	; 10
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	a4 01       	movw	r20, r8
    350c:	f5 d0       	rcall	.+490    	; 0x36f8 <__ultoa_invert>
    350e:	a8 2e       	mov	r10, r24
    3510:	a8 18       	sub	r10, r8
    3512:	43 c0       	rjmp	.+134    	; 0x359a <vfprintf+0x2aa>
    3514:	85 37       	cpi	r24, 0x75	; 117
    3516:	29 f4       	brne	.+10     	; 0x3522 <vfprintf+0x232>
    3518:	2f 7e       	andi	r18, 0xEF	; 239
    351a:	b2 2e       	mov	r11, r18
    351c:	2a e0       	ldi	r18, 0x0A	; 10
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	25 c0       	rjmp	.+74     	; 0x356c <vfprintf+0x27c>
    3522:	f2 2f       	mov	r31, r18
    3524:	f9 7f       	andi	r31, 0xF9	; 249
    3526:	bf 2e       	mov	r11, r31
    3528:	8f 36       	cpi	r24, 0x6F	; 111
    352a:	c1 f0       	breq	.+48     	; 0x355c <vfprintf+0x26c>
    352c:	18 f4       	brcc	.+6      	; 0x3534 <vfprintf+0x244>
    352e:	88 35       	cpi	r24, 0x58	; 88
    3530:	79 f0       	breq	.+30     	; 0x3550 <vfprintf+0x260>
    3532:	ad c0       	rjmp	.+346    	; 0x368e <vfprintf+0x39e>
    3534:	80 37       	cpi	r24, 0x70	; 112
    3536:	19 f0       	breq	.+6      	; 0x353e <vfprintf+0x24e>
    3538:	88 37       	cpi	r24, 0x78	; 120
    353a:	21 f0       	breq	.+8      	; 0x3544 <vfprintf+0x254>
    353c:	a8 c0       	rjmp	.+336    	; 0x368e <vfprintf+0x39e>
    353e:	2f 2f       	mov	r18, r31
    3540:	20 61       	ori	r18, 0x10	; 16
    3542:	b2 2e       	mov	r11, r18
    3544:	b4 fe       	sbrs	r11, 4
    3546:	0d c0       	rjmp	.+26     	; 0x3562 <vfprintf+0x272>
    3548:	8b 2d       	mov	r24, r11
    354a:	84 60       	ori	r24, 0x04	; 4
    354c:	b8 2e       	mov	r11, r24
    354e:	09 c0       	rjmp	.+18     	; 0x3562 <vfprintf+0x272>
    3550:	24 ff       	sbrs	r18, 4
    3552:	0a c0       	rjmp	.+20     	; 0x3568 <vfprintf+0x278>
    3554:	9f 2f       	mov	r25, r31
    3556:	96 60       	ori	r25, 0x06	; 6
    3558:	b9 2e       	mov	r11, r25
    355a:	06 c0       	rjmp	.+12     	; 0x3568 <vfprintf+0x278>
    355c:	28 e0       	ldi	r18, 0x08	; 8
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	05 c0       	rjmp	.+10     	; 0x356c <vfprintf+0x27c>
    3562:	20 e1       	ldi	r18, 0x10	; 16
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	02 c0       	rjmp	.+4      	; 0x356c <vfprintf+0x27c>
    3568:	20 e1       	ldi	r18, 0x10	; 16
    356a:	32 e0       	ldi	r19, 0x02	; 2
    356c:	f8 01       	movw	r30, r16
    356e:	b7 fe       	sbrs	r11, 7
    3570:	07 c0       	rjmp	.+14     	; 0x3580 <vfprintf+0x290>
    3572:	60 81       	ld	r22, Z
    3574:	71 81       	ldd	r23, Z+1	; 0x01
    3576:	82 81       	ldd	r24, Z+2	; 0x02
    3578:	93 81       	ldd	r25, Z+3	; 0x03
    357a:	0c 5f       	subi	r16, 0xFC	; 252
    357c:	1f 4f       	sbci	r17, 0xFF	; 255
    357e:	06 c0       	rjmp	.+12     	; 0x358c <vfprintf+0x29c>
    3580:	60 81       	ld	r22, Z
    3582:	71 81       	ldd	r23, Z+1	; 0x01
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	0e 5f       	subi	r16, 0xFE	; 254
    358a:	1f 4f       	sbci	r17, 0xFF	; 255
    358c:	a4 01       	movw	r20, r8
    358e:	b4 d0       	rcall	.+360    	; 0x36f8 <__ultoa_invert>
    3590:	a8 2e       	mov	r10, r24
    3592:	a8 18       	sub	r10, r8
    3594:	fb 2d       	mov	r31, r11
    3596:	ff 77       	andi	r31, 0x7F	; 127
    3598:	7f 2e       	mov	r7, r31
    359a:	76 fe       	sbrs	r7, 6
    359c:	0b c0       	rjmp	.+22     	; 0x35b4 <vfprintf+0x2c4>
    359e:	37 2d       	mov	r19, r7
    35a0:	3e 7f       	andi	r19, 0xFE	; 254
    35a2:	a5 14       	cp	r10, r5
    35a4:	50 f4       	brcc	.+20     	; 0x35ba <vfprintf+0x2ca>
    35a6:	74 fe       	sbrs	r7, 4
    35a8:	0a c0       	rjmp	.+20     	; 0x35be <vfprintf+0x2ce>
    35aa:	72 fc       	sbrc	r7, 2
    35ac:	08 c0       	rjmp	.+16     	; 0x35be <vfprintf+0x2ce>
    35ae:	37 2d       	mov	r19, r7
    35b0:	3e 7e       	andi	r19, 0xEE	; 238
    35b2:	05 c0       	rjmp	.+10     	; 0x35be <vfprintf+0x2ce>
    35b4:	ba 2c       	mov	r11, r10
    35b6:	37 2d       	mov	r19, r7
    35b8:	03 c0       	rjmp	.+6      	; 0x35c0 <vfprintf+0x2d0>
    35ba:	ba 2c       	mov	r11, r10
    35bc:	01 c0       	rjmp	.+2      	; 0x35c0 <vfprintf+0x2d0>
    35be:	b5 2c       	mov	r11, r5
    35c0:	34 ff       	sbrs	r19, 4
    35c2:	0d c0       	rjmp	.+26     	; 0x35de <vfprintf+0x2ee>
    35c4:	fe 01       	movw	r30, r28
    35c6:	ea 0d       	add	r30, r10
    35c8:	f1 1d       	adc	r31, r1
    35ca:	80 81       	ld	r24, Z
    35cc:	80 33       	cpi	r24, 0x30	; 48
    35ce:	11 f4       	brne	.+4      	; 0x35d4 <vfprintf+0x2e4>
    35d0:	39 7e       	andi	r19, 0xE9	; 233
    35d2:	09 c0       	rjmp	.+18     	; 0x35e6 <vfprintf+0x2f6>
    35d4:	32 ff       	sbrs	r19, 2
    35d6:	06 c0       	rjmp	.+12     	; 0x35e4 <vfprintf+0x2f4>
    35d8:	b3 94       	inc	r11
    35da:	b3 94       	inc	r11
    35dc:	04 c0       	rjmp	.+8      	; 0x35e6 <vfprintf+0x2f6>
    35de:	83 2f       	mov	r24, r19
    35e0:	86 78       	andi	r24, 0x86	; 134
    35e2:	09 f0       	breq	.+2      	; 0x35e6 <vfprintf+0x2f6>
    35e4:	b3 94       	inc	r11
    35e6:	33 fd       	sbrc	r19, 3
    35e8:	12 c0       	rjmp	.+36     	; 0x360e <vfprintf+0x31e>
    35ea:	30 ff       	sbrs	r19, 0
    35ec:	06 c0       	rjmp	.+12     	; 0x35fa <vfprintf+0x30a>
    35ee:	5a 2c       	mov	r5, r10
    35f0:	b3 14       	cp	r11, r3
    35f2:	18 f4       	brcc	.+6      	; 0x35fa <vfprintf+0x30a>
    35f4:	53 0c       	add	r5, r3
    35f6:	5b 18       	sub	r5, r11
    35f8:	b3 2c       	mov	r11, r3
    35fa:	b3 14       	cp	r11, r3
    35fc:	60 f4       	brcc	.+24     	; 0x3616 <vfprintf+0x326>
    35fe:	b7 01       	movw	r22, r14
    3600:	80 e2       	ldi	r24, 0x20	; 32
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	3c 87       	std	Y+12, r19	; 0x0c
    3606:	97 dd       	rcall	.-1234   	; 0x3136 <fputc>
    3608:	b3 94       	inc	r11
    360a:	3c 85       	ldd	r19, Y+12	; 0x0c
    360c:	f6 cf       	rjmp	.-20     	; 0x35fa <vfprintf+0x30a>
    360e:	b3 14       	cp	r11, r3
    3610:	10 f4       	brcc	.+4      	; 0x3616 <vfprintf+0x326>
    3612:	3b 18       	sub	r3, r11
    3614:	01 c0       	rjmp	.+2      	; 0x3618 <vfprintf+0x328>
    3616:	31 2c       	mov	r3, r1
    3618:	34 ff       	sbrs	r19, 4
    361a:	11 c0       	rjmp	.+34     	; 0x363e <vfprintf+0x34e>
    361c:	b7 01       	movw	r22, r14
    361e:	80 e3       	ldi	r24, 0x30	; 48
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	3c 87       	std	Y+12, r19	; 0x0c
    3624:	88 dd       	rcall	.-1264   	; 0x3136 <fputc>
    3626:	3c 85       	ldd	r19, Y+12	; 0x0c
    3628:	32 ff       	sbrs	r19, 2
    362a:	16 c0       	rjmp	.+44     	; 0x3658 <vfprintf+0x368>
    362c:	31 fd       	sbrc	r19, 1
    362e:	03 c0       	rjmp	.+6      	; 0x3636 <vfprintf+0x346>
    3630:	88 e7       	ldi	r24, 0x78	; 120
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	02 c0       	rjmp	.+4      	; 0x363a <vfprintf+0x34a>
    3636:	88 e5       	ldi	r24, 0x58	; 88
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	b7 01       	movw	r22, r14
    363c:	0c c0       	rjmp	.+24     	; 0x3656 <vfprintf+0x366>
    363e:	83 2f       	mov	r24, r19
    3640:	86 78       	andi	r24, 0x86	; 134
    3642:	51 f0       	breq	.+20     	; 0x3658 <vfprintf+0x368>
    3644:	31 ff       	sbrs	r19, 1
    3646:	02 c0       	rjmp	.+4      	; 0x364c <vfprintf+0x35c>
    3648:	8b e2       	ldi	r24, 0x2B	; 43
    364a:	01 c0       	rjmp	.+2      	; 0x364e <vfprintf+0x35e>
    364c:	80 e2       	ldi	r24, 0x20	; 32
    364e:	37 fd       	sbrc	r19, 7
    3650:	8d e2       	ldi	r24, 0x2D	; 45
    3652:	b7 01       	movw	r22, r14
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	6f dd       	rcall	.-1314   	; 0x3136 <fputc>
    3658:	a5 14       	cp	r10, r5
    365a:	30 f4       	brcc	.+12     	; 0x3668 <vfprintf+0x378>
    365c:	b7 01       	movw	r22, r14
    365e:	80 e3       	ldi	r24, 0x30	; 48
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	69 dd       	rcall	.-1326   	; 0x3136 <fputc>
    3664:	5a 94       	dec	r5
    3666:	f8 cf       	rjmp	.-16     	; 0x3658 <vfprintf+0x368>
    3668:	aa 94       	dec	r10
    366a:	f4 01       	movw	r30, r8
    366c:	ea 0d       	add	r30, r10
    366e:	f1 1d       	adc	r31, r1
    3670:	80 81       	ld	r24, Z
    3672:	b7 01       	movw	r22, r14
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	5f dd       	rcall	.-1346   	; 0x3136 <fputc>
    3678:	a1 10       	cpse	r10, r1
    367a:	f6 cf       	rjmp	.-20     	; 0x3668 <vfprintf+0x378>
    367c:	33 20       	and	r3, r3
    367e:	09 f4       	brne	.+2      	; 0x3682 <vfprintf+0x392>
    3680:	5d ce       	rjmp	.-838    	; 0x333c <vfprintf+0x4c>
    3682:	b7 01       	movw	r22, r14
    3684:	80 e2       	ldi	r24, 0x20	; 32
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	56 dd       	rcall	.-1364   	; 0x3136 <fputc>
    368a:	3a 94       	dec	r3
    368c:	f7 cf       	rjmp	.-18     	; 0x367c <vfprintf+0x38c>
    368e:	f7 01       	movw	r30, r14
    3690:	86 81       	ldd	r24, Z+6	; 0x06
    3692:	97 81       	ldd	r25, Z+7	; 0x07
    3694:	02 c0       	rjmp	.+4      	; 0x369a <vfprintf+0x3aa>
    3696:	8f ef       	ldi	r24, 0xFF	; 255
    3698:	9f ef       	ldi	r25, 0xFF	; 255
    369a:	2c 96       	adiw	r28, 0x0c	; 12
    369c:	0f b6       	in	r0, 0x3f	; 63
    369e:	f8 94       	cli
    36a0:	de bf       	out	0x3e, r29	; 62
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	cd bf       	out	0x3d, r28	; 61
    36a6:	df 91       	pop	r29
    36a8:	cf 91       	pop	r28
    36aa:	1f 91       	pop	r17
    36ac:	0f 91       	pop	r16
    36ae:	ff 90       	pop	r15
    36b0:	ef 90       	pop	r14
    36b2:	df 90       	pop	r13
    36b4:	cf 90       	pop	r12
    36b6:	bf 90       	pop	r11
    36b8:	af 90       	pop	r10
    36ba:	9f 90       	pop	r9
    36bc:	8f 90       	pop	r8
    36be:	7f 90       	pop	r7
    36c0:	6f 90       	pop	r6
    36c2:	5f 90       	pop	r5
    36c4:	4f 90       	pop	r4
    36c6:	3f 90       	pop	r3
    36c8:	2f 90       	pop	r2
    36ca:	08 95       	ret

000036cc <strnlen_P>:
    36cc:	fc 01       	movw	r30, r24
    36ce:	05 90       	lpm	r0, Z+
    36d0:	61 50       	subi	r22, 0x01	; 1
    36d2:	70 40       	sbci	r23, 0x00	; 0
    36d4:	01 10       	cpse	r0, r1
    36d6:	d8 f7       	brcc	.-10     	; 0x36ce <strnlen_P+0x2>
    36d8:	80 95       	com	r24
    36da:	90 95       	com	r25
    36dc:	8e 0f       	add	r24, r30
    36de:	9f 1f       	adc	r25, r31
    36e0:	08 95       	ret

000036e2 <strnlen>:
    36e2:	fc 01       	movw	r30, r24
    36e4:	61 50       	subi	r22, 0x01	; 1
    36e6:	70 40       	sbci	r23, 0x00	; 0
    36e8:	01 90       	ld	r0, Z+
    36ea:	01 10       	cpse	r0, r1
    36ec:	d8 f7       	brcc	.-10     	; 0x36e4 <strnlen+0x2>
    36ee:	80 95       	com	r24
    36f0:	90 95       	com	r25
    36f2:	8e 0f       	add	r24, r30
    36f4:	9f 1f       	adc	r25, r31
    36f6:	08 95       	ret

000036f8 <__ultoa_invert>:
    36f8:	fa 01       	movw	r30, r20
    36fa:	aa 27       	eor	r26, r26
    36fc:	28 30       	cpi	r18, 0x08	; 8
    36fe:	51 f1       	breq	.+84     	; 0x3754 <__ultoa_invert+0x5c>
    3700:	20 31       	cpi	r18, 0x10	; 16
    3702:	81 f1       	breq	.+96     	; 0x3764 <__ultoa_invert+0x6c>
    3704:	e8 94       	clt
    3706:	6f 93       	push	r22
    3708:	6e 7f       	andi	r22, 0xFE	; 254
    370a:	6e 5f       	subi	r22, 0xFE	; 254
    370c:	7f 4f       	sbci	r23, 0xFF	; 255
    370e:	8f 4f       	sbci	r24, 0xFF	; 255
    3710:	9f 4f       	sbci	r25, 0xFF	; 255
    3712:	af 4f       	sbci	r26, 0xFF	; 255
    3714:	b1 e0       	ldi	r27, 0x01	; 1
    3716:	3e d0       	rcall	.+124    	; 0x3794 <__ultoa_invert+0x9c>
    3718:	b4 e0       	ldi	r27, 0x04	; 4
    371a:	3c d0       	rcall	.+120    	; 0x3794 <__ultoa_invert+0x9c>
    371c:	67 0f       	add	r22, r23
    371e:	78 1f       	adc	r23, r24
    3720:	89 1f       	adc	r24, r25
    3722:	9a 1f       	adc	r25, r26
    3724:	a1 1d       	adc	r26, r1
    3726:	68 0f       	add	r22, r24
    3728:	79 1f       	adc	r23, r25
    372a:	8a 1f       	adc	r24, r26
    372c:	91 1d       	adc	r25, r1
    372e:	a1 1d       	adc	r26, r1
    3730:	6a 0f       	add	r22, r26
    3732:	71 1d       	adc	r23, r1
    3734:	81 1d       	adc	r24, r1
    3736:	91 1d       	adc	r25, r1
    3738:	a1 1d       	adc	r26, r1
    373a:	20 d0       	rcall	.+64     	; 0x377c <__ultoa_invert+0x84>
    373c:	09 f4       	brne	.+2      	; 0x3740 <__ultoa_invert+0x48>
    373e:	68 94       	set
    3740:	3f 91       	pop	r19
    3742:	2a e0       	ldi	r18, 0x0A	; 10
    3744:	26 9f       	mul	r18, r22
    3746:	11 24       	eor	r1, r1
    3748:	30 19       	sub	r19, r0
    374a:	30 5d       	subi	r19, 0xD0	; 208
    374c:	31 93       	st	Z+, r19
    374e:	de f6       	brtc	.-74     	; 0x3706 <__ultoa_invert+0xe>
    3750:	cf 01       	movw	r24, r30
    3752:	08 95       	ret
    3754:	46 2f       	mov	r20, r22
    3756:	47 70       	andi	r20, 0x07	; 7
    3758:	40 5d       	subi	r20, 0xD0	; 208
    375a:	41 93       	st	Z+, r20
    375c:	b3 e0       	ldi	r27, 0x03	; 3
    375e:	0f d0       	rcall	.+30     	; 0x377e <__ultoa_invert+0x86>
    3760:	c9 f7       	brne	.-14     	; 0x3754 <__ultoa_invert+0x5c>
    3762:	f6 cf       	rjmp	.-20     	; 0x3750 <__ultoa_invert+0x58>
    3764:	46 2f       	mov	r20, r22
    3766:	4f 70       	andi	r20, 0x0F	; 15
    3768:	40 5d       	subi	r20, 0xD0	; 208
    376a:	4a 33       	cpi	r20, 0x3A	; 58
    376c:	18 f0       	brcs	.+6      	; 0x3774 <__ultoa_invert+0x7c>
    376e:	49 5d       	subi	r20, 0xD9	; 217
    3770:	31 fd       	sbrc	r19, 1
    3772:	40 52       	subi	r20, 0x20	; 32
    3774:	41 93       	st	Z+, r20
    3776:	02 d0       	rcall	.+4      	; 0x377c <__ultoa_invert+0x84>
    3778:	a9 f7       	brne	.-22     	; 0x3764 <__ultoa_invert+0x6c>
    377a:	ea cf       	rjmp	.-44     	; 0x3750 <__ultoa_invert+0x58>
    377c:	b4 e0       	ldi	r27, 0x04	; 4
    377e:	a6 95       	lsr	r26
    3780:	97 95       	ror	r25
    3782:	87 95       	ror	r24
    3784:	77 95       	ror	r23
    3786:	67 95       	ror	r22
    3788:	ba 95       	dec	r27
    378a:	c9 f7       	brne	.-14     	; 0x377e <__ultoa_invert+0x86>
    378c:	00 97       	sbiw	r24, 0x00	; 0
    378e:	61 05       	cpc	r22, r1
    3790:	71 05       	cpc	r23, r1
    3792:	08 95       	ret
    3794:	9b 01       	movw	r18, r22
    3796:	ac 01       	movw	r20, r24
    3798:	0a 2e       	mov	r0, r26
    379a:	06 94       	lsr	r0
    379c:	57 95       	ror	r21
    379e:	47 95       	ror	r20
    37a0:	37 95       	ror	r19
    37a2:	27 95       	ror	r18
    37a4:	ba 95       	dec	r27
    37a6:	c9 f7       	brne	.-14     	; 0x379a <__ultoa_invert+0xa2>
    37a8:	62 0f       	add	r22, r18
    37aa:	73 1f       	adc	r23, r19
    37ac:	84 1f       	adc	r24, r20
    37ae:	95 1f       	adc	r25, r21
    37b0:	a0 1d       	adc	r26, r0
    37b2:	08 95       	ret

000037b4 <_exit>:
    37b4:	f8 94       	cli

000037b6 <__stop_program>:
    37b6:	ff cf       	rjmp	.-2      	; 0x37b6 <__stop_program>
